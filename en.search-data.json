{"/docs/":{"data":{"":"Everything you need to know for your golangci-lint journey. Getting StartedGet ready to use golangci-lint LintersList of all the linters FormattersList of all the formatters","contributors#Contributors":"This project exists thanks to all the people who contribute. How to contribute.","stargazers-over-time#Stargazers over time":"","support-us#Support Us":"Golangci-lint is a free and open-source project built by volunteers.\nIf you value it, consider supporting us, we appreciate it!\nDonate ❤️"},"title":"Golangci-lint Documentation"},"/docs/configuration/":{"data":{"":"The config file has lower priority than command-line options. If the same bool/string/int option is provided on the command-line and in the config file, the option from command-line will be used. Slice options (e.g. list of enabled/disabled linters) are combined from the command-line and config file.","more#More":"Command Line Configuration File"},"title":"Configuration"},"/docs/configuration/cli/":{"data":{"":"$ golangci-lint -h Smart, fast linters runner. Usage: golangci-lint [flags] golangci-lint [command] Available Commands: cache Cache control and information. completion Generate the autocompletion script for the specified shell config Configuration file information and verification. custom Build a version of golangci-lint with custom linters. fmt Format Go source files. formatters List current formatters configuration. help Display extra help linters List current linters configuration. migrate Migrate configuration file from v1 to v2. run Lint the code. version Display the golangci-lint version. Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output --version Print version Use \"golangci-lint [command] --help\" for more information about a command.","cache#\u003ccode\u003ecache\u003c/code\u003e":"Golangci-lint stores its cache in the subdirectory golangci-lint inside the default user cache directory.\nYou can override the default cache directory with the environment variable GOLANGCI_LINT_CACHE; the path must be absolute.\nThe cache is only used by golangci-lint run (linters).\n$ golangci-lint cache -h Cache control and information. Usage: golangci-lint cache [flags] golangci-lint cache [command] Available Commands: clean Clean cache status Show cache status Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output Use \"golangci-lint cache [command] --help\" for more information about a command.","completion#\u003ccode\u003ecompletion\u003c/code\u003e":"$ golangci-lint completion -h Generate the autocompletion script for golangci-lint for the specified shell. See each sub-command's help for details on how to use the generated script. Usage: golangci-lint completion [command] Available Commands: bash Generate the autocompletion script for bash fish Generate the autocompletion script for fish powershell Generate the autocompletion script for powershell zsh Generate the autocompletion script for zsh Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output Use \"golangci-lint completion [command] --help\" for more information about a command.","config#\u003ccode\u003econfig\u003c/code\u003e":"$ golangci-lint config -h Configuration file information and verification. Usage: golangci-lint config [flags] golangci-lint config [command] Available Commands: path Print used configuration path. verify Verify configuration against JSON schema. Flags: -c, --config PATH Read config from file path PATH --no-config Don't read config file Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output Use \"golangci-lint config [command] --help\" for more information about a command.","custom#\u003ccode\u003ecustom\u003c/code\u003e":"$ golangci-lint custom -h Build a version of golangci-lint with custom linters. Usage: golangci-lint custom [flags] Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output","fmt#fmt":"Formatters Overview Global Configuration Formatter Settings $ golangci-lint fmt -h Format Go source files. Usage: golangci-lint fmt [flags] Flags: -c, --config PATH Read config from file path PATH --no-config Don't read config file -E, --enable strings Enable specific formatter -d, --diff Display diffs instead of rewriting files --diff-colored Display diffs instead of rewriting files (with colors) --stdin Use standard input for piping source files Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output","formatters#\u003ccode\u003eformatters\u003c/code\u003e":"$ golangci-lint formatters -h List current formatters configuration. Usage: golangci-lint formatters [flags] Flags: -c, --config PATH Read config from file path PATH --no-config Don't read config file -E, --enable strings Enable specific formatter --json Display as JSON Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output","help#\u003ccode\u003ehelp\u003c/code\u003e":"$ golangci-lint help -h Display extra help Usage: golangci-lint help [flags] golangci-lint help [command] Available Commands: formatters Display help for formatters. linters Display help for linters. Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output Use \"golangci-lint help [command] --help\" for more information about a command.","linters#\u003ccode\u003elinters\u003c/code\u003e":"$ golangci-lint linters -h List current linters configuration. Usage: golangci-lint linters [flags] Flags: -c, --config PATH Read config from file path PATH --no-config Don't read config file --default string Default set of linters to enable (default \"standard\") -D, --disable strings Disable specific linter -E, --enable strings Enable specific linter --enable-only strings Override linters configuration section to only run the specific linter(s) --fast-only Filter enabled linters to run only fast linters --json Display as JSON Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output","migrate#\u003ccode\u003emigrate\u003c/code\u003e":"$ golangci-lint migrate -h Migrate configuration file from v1 to v2. Usage: golangci-lint migrate [flags] Flags: -c, --config PATH Read config from file path PATH --no-config Don't read config file --format string Output file format. By default, the format of the input configuration file is used. It can be 'yml', 'yaml', 'toml', or 'json'. --skip-validation Skip validation of the configuration file against the JSON Schema for v1. Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output","run#\u003ccode\u003erun\u003c/code\u003e":"Linters Overview Global Configuration Linter Settings Note\nThis command executes enabled linters, and the formatters defined in formatters, but it does not format the code.\nTo only format code, use golangci-lint fmt. To apply both linter fixes and formatting, use golangci-lint run --fix.\nThe formatters cannot be enabled or disabled inside the linters section or the flags -E/--enable, -D/--disable of the command golangci-lint run.\nThe formatters can be enabled/disabled by defining them inside the formatters section or by using the flags -E/--enable, -D/--disable of command golangci-lint fmt.\n$ golangci-lint run -h Lint the code. Usage: golangci-lint run [flags] Flags: -c, --config PATH Read config from file path PATH --no-config Don't read config file --default string Default set of linters to enable (default \"standard\") -D, --disable strings Disable specific linter -E, --enable strings Enable specific linter --enable-only strings Override linters configuration section to only run the specific linter(s) --fast-only Filter enabled linters to run only fast linters -j, --concurrency int Number of CPUs to use (Default: Automatically set to match Linux container CPU quota and fall back to the number of logical CPUs in the machine) --modules-download-mode string Modules download mode. If not empty, passed as -mod= to go tools --issues-exit-code int Exit code when issues were found (default 1) --build-tags strings Build tags --timeout duration Timeout for total work. Disabled by default --tests Analyze tests (*_test.go) (default true) --allow-parallel-runners Allow multiple parallel golangci-lint instances running. If false (default) - golangci-lint acquires file lock on start. --allow-serial-runners Allow multiple golangci-lint instances running, but serialize them around a lock. If false (default) - golangci-lint exits with an error if it fails to acquire file lock on start. --path-prefix string Path prefix to add to output --path-mode string Path mode to use (empty, or 'abs') --show-stats Show statistics per linter (default true) --output.text.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.text.print-linter-name Print linter name in the end of issue text. (default true) --output.text.print-issued-lines Print lines of code with issue. (default true) --output.text.colors Use colors. (default true) --output.json.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.tab.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.tab.print-linter-name Print linter name in the end of issue text. (default true) --output.tab.colors Use colors. (default true) --output.html.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.checkstyle.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.code-climate.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.junit-xml.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.junit-xml.extended Support extra JUnit XML fields. --output.teamcity.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --output.sarif.path stdout Output path can be either stdout, `stderr` or path to the file to write to. --max-issues-per-linter int Maximum issues count per one linter. Set to 0 to disable (default 50) --max-same-issues int Maximum count of issues with the same text. Set to 0 to disable (default 3) --uniq-by-line Make issues output unique by line (default true) -n, --new Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed. It's a super-useful option for integration of golangci-lint into existing large codebase. It's not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code. For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs. --new-from-rev REV Show only new issues created after git revision REV --new-from-patch PATH Show only new issues created in git patch with file path PATH --new-from-merge-base string Show only new issues created after the best common ancestor (merge-base against HEAD) --whole-files Show issues in any part of update files (requires new-from-rev or new-from-patch) --fix Fix found issues (if it's supported by the linter) --cpu-profile-path string Path to CPU profile output file --mem-profile-path string Path to memory profile output file --trace-path string Path to trace output file Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output When the --cpu-profile-path or --mem-profile-path arguments are specified, golangci-lint writes runtime profiling data in the format expected by the pprof visualization tool.\nWhen the --trace-path argument is specified, golangci-lint writes runtime tracing data in the format expected by the go tool trace command and visualization tool.","version#\u003ccode\u003eversion\u003c/code\u003e":"$ golangci-lint version -h Display the golangci-lint version. Usage: golangci-lint version [flags] Flags: --debug Add build information --json Display as JSON --short Display only the version number Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output"},"title":"Command-Line"},"/docs/configuration/file/":{"data":{"":"Golangci-lint looks for config files in the following paths from the current working directory:\n.golangci.yml .golangci.yaml .golangci.toml .golangci.json Golangci-lint also searches for config files in all directories from the directory of the first analyzed path up to the root. If no configuration file has been found, golangci-lint will try to find one in your home directory. To see which config file is being used and where it was sourced from run golangci-lint with -v option.\nConfig options inside the file are identical to command-line options. You can configure specific linters’ options only within the config file (not the command-line).\nThere is a .golangci.reference.yml file with all supported options, their descriptions, and default values. This file is neither a working example nor a recommended configuration, it’s just a reference to display all the configuration options used to generate the documentation.\nThe configuration file can be validated with the JSON Schema: golangci.jsonschema.json\n# See the dedicated \"version\" documentation section. version: \"2\" linters: # See the dedicated \"linters\" documentation section. option: value formatters: # See the dedicated \"formatters\" documentation section. option: value issues: # See the dedicated \"issues\" documentation section. option: value # Output configuration options. output: # See the dedicated \"output\" documentation section. option: value # Options for analysis running. run: # See the dedicated \"run\" documentation section. option: value severity: # See the dedicated \"severity\" documentation section. option: value","formatters-configuration#\u003ccode\u003eformatters\u003c/code\u003e configuration":"Formatters Overview Formatters Settings formatters: # Enable specific formatter. # Default: [] (uses standard Go formatting) enable: - gci - gofmt - gofumpt - goimports - golines - swaggo # Formatters settings. settings: # See the dedicated \"formatters.settings\" documentation section. option: value exclusions: # Log a warning if an exclusion path is unused. # Default: false warn-unused: true # Mode of the generated files analysis. # # - `strict`: sources are excluded by strictly following the Go generated file convention. # Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\\.$` # This line must appear before the first non-comment, non-blank text in the file. # https://go.dev/s/generatedcode # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc. # - `disable`: disable the generated files exclusion. # # Default: lax generated: strict # Which file paths to exclude. # This option is ignored when using `--stdin` as the path is unknown. # Default: [] paths: - \".*\\\\.my\\\\.go$\" - lib/bad.go","issues-configuration#\u003ccode\u003eissues\u003c/code\u003e configuration":"issues: # Maximum issues count per one linter. # Set to 0 to disable. # Default: 50 max-issues-per-linter: 0 # Maximum count of issues with the same text. # Set to 0 to disable. # Default: 3 max-same-issues: 0 # Make issues output unique by line. # Default: true uniq-by-line: false # Show only new issues: if there are unstaged changes or untracked files, # only those changes are analyzed, else only changes in HEAD~ are analyzed. # It's a super-useful option for integration of golangci-lint into existing large codebase. # It's not practical to fix all existing issues at the moment of integration: # much better don't allow issues in new code. # # Default: false new: true # Show only new issues created after the best common ancestor (merge-base against HEAD). # Default: \"\" new-from-merge-base: main # Show only new issues created after git revision `REV`. # Default: \"\" new-from-rev: HEAD # Show only new issues created in git patch with set file path. # Default: \"\" new-from-patch: path/to/patch/file # Show issues in any part of update files (requires new-from-rev or new-from-patch). # Default: false whole-files: true # Fix found issues (if it's supported by the linter). # Default: false fix: true","linters-configuration#\u003ccode\u003elinters\u003c/code\u003e configuration":"Linters Overview Linters Settings linters: # Default set of linters. # The value can be: # - `standard`: https://golangci-lint.run/docs/linters/#enabled-by-default # - `all`: enables all linters by default. # - `none`: disables all linters by default. # - `fast`: enables only linters considered as \"fast\" (`golangci-lint help linters --json | jq '[ .[] | select(.fast==true) ] | map(.name)'`). # Default: standard default: all # Enable specific linter. enable: - arangolint - asasalint - asciicheck - bidichk - bodyclose - canonicalheader - containedctx - contextcheck - copyloopvar - cyclop - decorder - depguard - dogsled - dupl - dupword - durationcheck - embeddedstructfieldcheck - err113 - errcheck - errchkjson - errname - errorlint - exhaustive - exhaustruct - exptostd - fatcontext - forbidigo - forcetypeassert - funcorder - funlen - ginkgolinter - gocheckcompilerdirectives - gochecknoglobals - gochecknoinits - gochecksumtype - gocognit - goconst - gocritic - gocyclo - godoclint - godot - godox - goheader - gomoddirectives - gomodguard - goprintffuncname - gosec - gosmopolitan - govet - grouper - iface - importas - inamedparam - ineffassign - interfacebloat - intrange - iotamixing - ireturn - lll - loggercheck - maintidx - makezero - mirror - misspell - mnd - modernize - musttag - nakedret - nestif - nilerr - nilnesserr - nilnil - nlreturn - noctx - noinlineerr - nolintlint - nonamedreturns - nosprintfhostport - paralleltest - perfsprint - prealloc - predeclared - promlinter - protogetter - reassign - recvcheck - revive - rowserrcheck - sloglint - spancheck - sqlclosecheck - staticcheck - tagalign - tagliatelle - testableexamples - testifylint - testpackage - thelper - tparallel - unconvert - unparam - unqueryvet - unused - usestdlibvars - usetesting - varnamelen - wastedassign - whitespace - wrapcheck - wsl - wsl_v5 - zerologlint # Disable specific linters. disable: - arangolint - asasalint - asciicheck - bidichk - bodyclose - canonicalheader - containedctx - contextcheck - copyloopvar - cyclop - decorder - depguard - dogsled - dupl - dupword - durationcheck - embeddedstructfieldcheck - err113 - errcheck - errchkjson - errname - errorlint - exhaustive - exhaustruct - exptostd - fatcontext - forbidigo - forcetypeassert - funcorder - funlen - ginkgolinter - gocheckcompilerdirectives - gochecknoglobals - gochecknoinits - gochecksumtype - gocognit - goconst - gocritic - gocyclo - godoclint - godot - godox - goheader - gomoddirectives - gomodguard - goprintffuncname - gosec - gosmopolitan - govet - grouper - iface - importas - inamedparam - ineffassign - interfacebloat - intrange - iotamixing - ireturn - lll - loggercheck - maintidx - makezero - mirror - misspell - mnd - modernize - musttag - nakedret - nestif - nilerr - nilnesserr - nilnil - nlreturn - noctx - noinlineerr - nolintlint - nonamedreturns - nosprintfhostport - paralleltest - perfsprint - prealloc - predeclared - promlinter - protogetter - reassign - recvcheck - revive - rowserrcheck - sloglint - spancheck - sqlclosecheck - staticcheck - tagalign - tagliatelle - testableexamples - testifylint - testpackage - thelper - tparallel - unconvert - unparam - unqueryvet - unused - usestdlibvars - usetesting - varnamelen - wastedassign - whitespace - wrapcheck - wsl - wsl_v5 - zerologlint # All available settings of specific linters. settings: # See the dedicated \"linters.settings\" documentation section. option: value # Defines a set of rules to ignore issues. # It does not skip the analysis, and so does not ignore \"typecheck\" errors. exclusions: # Mode of the generated files analysis. # # - `strict`: sources are excluded by strictly following the Go generated file convention. # Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\\.$` # This line must appear before the first non-comment, non-blank text in the file. # https://go.dev/s/generatedcode # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc. # - `disable`: disable the generated files exclusion. # # Default: strict generated: lax # Log a warning if an exclusion rule is unused. # Default: false warn-unused: true # Predefined exclusion rules. # Default: [] presets: - comments - std-error-handling - common-false-positives - legacy # Excluding configuration per-path, per-linter, per-text and per-source. rules: # Exclude some linters from running on tests files. - path: _test\\.go linters: - gocyclo - errcheck - dupl - gosec # Run some linter only for test files by excluding its issues for everything else. - path-except: _test\\.go linters: - forbidigo # Exclude known linters from partially hard-vendored code, # which is impossible to exclude via `nolint` comments. # `/` will be replaced by the current OS file path separator to properly work on Windows. - path: internal/hmac/ text: \"weak cryptographic primitive\" linters: - gosec # Exclude some `staticcheck` messages. - linters: - staticcheck text: \"SA9003:\" # Exclude `lll` issues for long lines with `go:generate`. - linters: - lll source: \"^//go:generate \" # Which file paths to exclude: they will be analyzed, but issues from them won't be reported. # \"/\" will be replaced by the current OS file path separator to properly work on Windows. # Default: [] paths: - \".*\\\\.my\\\\.go$\" - lib/bad.go # Which file paths to not exclude. # Default: [] paths-except: - \".*\\\\.my\\\\.go$\" - lib/bad.go","output-configuration#\u003ccode\u003eoutput\u003c/code\u003e configuration":"# Output configuration options. output: # The formats used to render issues. formats: # Prints issues in a text format with colors, line number, and linter name. # This format is the default format. text: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.txt # Print linter name in the end of issue text. # Default: true print-linter-name: false # Print lines of code with issue. # Default: true print-issued-lines: false # Use colors. # Default: true colors: false # Prints issues in a JSON representation. json: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.json # Prints issues in columns representation separated by tabulations. tab: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.txt # Print linter name in the end of issue text. # Default: true print-linter-name: true # Use colors. # Default: true colors: false # Prints issues in an HTML page. # It uses the Cloudflare CDN (cdnjs) and React. html: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.html # Prints issues in the Checkstyle format. checkstyle: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.xml # Prints issues in the Code Climate format. code-climate: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.json # Prints issues in the JUnit XML format. junit-xml: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.xml # Support extra JUnit XML fields. # Default: false extended: true # Prints issues in the TeamCity format. teamcity: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.txt # Prints issues in the SARIF format. sarif: # Output path can be either `stdout`, `stderr` or path to the file to write to. # Default: stdout path: ./path/to/output.json # Add a prefix to the output file references. # This option is ignored when using `output.path-mode: abs` mode. # Default: \"\" path-prefix: \"\" # By default, the report are related to the path obtained by `run.relative-path-mode`. # The mode `abs` allows to show absolute file paths instead of relative file paths. # The option `output.path-prefix` is ignored when using `abs` mode. # Default: \"\" path-mode: \"abs\" # Order to use when sorting results. # Possible values: `file`, `linter`, and `severity`. # # If the severity values are inside the following list, they are ordered in this order: # 1. error # 2. warning # 3. high # 4. medium # 5. low # Either they are sorted alphabetically. # # Default: [\"linter\", \"file\"] sort-order: - linter - severity - file # filepath, line, and column. # Show statistics per linter. # Default: true show-stats: false","run-configuration#\u003ccode\u003erun\u003c/code\u003e configuration":"# Options for analysis running. run: # Timeout for total work, e.g. 30s, 5m, 5m30s. # If the value is lower or equal to 0, the timeout is disabled. # Default: 0 (disabled) timeout: 5m # The mode used to evaluate relative paths. # It's used by exclusions, Go plugins, and some linters. # The value can be: # - `gomod`: the paths will be relative to the directory of the `go.mod` file. # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`). # - `cfg`: the paths will be relative to the configuration file. # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run. # Default: cfg relative-path-mode: gomod # Exit code when at least one issue was found. # Default: 1 issues-exit-code: 2 # Include test files or not. # Default: true tests: false # List of build tags, all linters use it. # Default: [] build-tags: - mytag # If set, we pass it to \"go list -mod={option}\". From \"go help modules\": # If invoked with -mod=readonly, the go command is disallowed from the implicit # automatic updating of go.mod described above. Instead, it fails when any changes # to go.mod are needed. This setting is most useful to check that go.mod does # not need updates, such as in a continuous integration and testing system. # If invoked with -mod=vendor, the go command assumes that the vendor # directory holds the correct copies of dependencies and ignores # the dependency descriptions in go.mod. # # Allowed values: readonly|vendor|mod # Default: \"\" modules-download-mode: readonly # Allow multiple parallel golangci-lint instances running. # If false, golangci-lint acquires file lock on start. # Default: false allow-parallel-runners: true # Allow multiple golangci-lint instances running, but serialize them around a lock. # If false, golangci-lint exits with an error if it fails to acquire file lock on start. # Default: false allow-serial-runners: true # Define the Go version limit. # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.22. go: '1.23' # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously. # Default: 0 (automatically set to match Linux container CPU quota and # fall back to the number of logical CPUs in the machine) concurrency: 4","severity-configuration#\u003ccode\u003eseverity\u003c/code\u003e configuration":"severity: # Set the default severity for issues. # # If severity rules are defined and the issues do not match or no severity is provided to the rule # this will be the default severity applied. # Severities should match the supported severity names of the selected out format. # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance # # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...) # # Default: \"\" default: error # When a list of severity rules are provided, severity information will be added to lint issues. # Severity rules have the same filtering capability as exclude rules # except you are allowed to specify one matcher per severity rule. # # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...) # # Only affects out formats that support setting severity information. # # Default: [] rules: - linters: - dupl severity: info","version-configuration#\u003ccode\u003eversion\u003c/code\u003e configuration":"# Defines the configuration version. # The only possible value is \"2\". version: \"2\""},"title":"Configuration File"},"/docs/contributing/":{"data":{"":"Contributing workflow Architecture of golangci-lint How to add new linters Debugging golangci-lint FAQ Contributing to this website"},"title":"Contributing"},"/docs/contributing/architecture/":{"data":{"":"There are the following golangci-lint execution steps:\ngraph LR init[Init] loadPackages[Load packages] runLinters[Run linters] postprocess[Postprocess issues] print[Print issues] init --\u003e loadPackages --\u003e runLinters --\u003e postprocess --\u003e print","init#Init":"The configuration is loaded from file and flags by config.Loader inside PersistentPreRun (or PreRun) of the commands that require configuration.\nThe linter database (linterdb.Manager) is fill based on the configuration:\nThe linters (“internals” and plugins) are built by linterdb.LinterBuilder and linterdb.PluginBuilder builders. The configuration is validated by linterdb.Validator.","load-packages#Load Packages":"Loading packages is listing all packages and their recursive dependencies for analysis.\nAlso, depending on the enabled linters set some parsing of the source code can be performed at this step.\nPackages loading starts here:\npkg/lint/package.gofunc (l *PackageLoader) Load(ctx context.Context, linters []*linter.Config) (pkgs, deduplicatedPkgs []*packages.Package, err error) { loadMode := findLoadMode(linters) pkgs, err = l.loadPackages(ctx, loadMode) if err != nil { return nil, nil, fmt.Errorf(\"failed to load packages: %w\", err) } // ... First, we find a load mode as union of load modes for all enabled linters. We use go/packages for packages loading and use it’s enum packages.Need* for load modes. Load mode sets which data does a linter needs for execution.\nA linter that works only with AST need minimum of information: only filenames and AST.\nThere is no need for packages dependencies or type information. AST is built during go/analysis execution to reduce memory usage. Such AST-based linters are configured with the following code:\npkg/lint/linter/config.gofunc (lc *Config) WithLoadFiles() *Config { lc.LoadMode |= packages.NeedName | packages.NeedFiles | packages.NeedCompiledGoFiles return lc } If a linter uses go/analysis and needs type information, we need to extract more data by go/packages:\npkg/lint/linter/config.gofunc (lc *Config) WithLoadForGoAnalysis() *Config { lc = lc.WithLoadFiles() lc.LoadMode |= packages.NeedImports | packages.NeedDeps | packages.NeedExportFile | packages.NeedTypesSizes lc.IsSlow = true return lc } After finding a load mode, we run go/packages: the library get list of dirs (or ./... as the default value) as input and outputs list of packages and requested information about them: filenames, type information, AST, etc.","postprocess-issues#Postprocess Issues":"We have an abstraction of result.Processor to postprocess found issues:\n./pkg/result/processors/ cgo.go diff.go exclusion_generated_file_filter.go exclusion_generated_file_matcher.go exclusion_paths.go exclusion_presets.go exclusion_rules.go filename_unadjuster.go fixer.go identifier_marker.go invalid_issue.go issues.go max_from_linter.go max_per_file_from_linter.go max_same_issues.go nolint_filter.go path_absoluter.go path_prettifier.go path_relativity.go path_shortener.go processor.go severity.go sort_results.go source_code.go uniq_by_line.go The abstraction is simple:\npkg/result/processors/processor.gotype Processor interface { Process(issues []*result.Issue) ([]*result.Issue, error) Name() string Finish() } A processor can hide issues (nolint, exclude) or change issues (path_prettifier).","print-issues#Print Issues":"We have an abstraction for printing found issues.\n./pkg/printers/ checkstyle.go codeclimate.go html.go json.go junitxml.go printer.go sarif.go tab.go teamcity.go text.go","run-linters#Run Linters":"First, we need to find all enabled linters. All linters are registered here:\npkg/lint/lintersdb/builder_linter.gofunc (b LinterBuilder) Build(cfg *config.Config) []*linter.Config { // ... return []*linter.Config{ // ... linter.NewConfig(golinters.NewBodyclose()). WithSince(\"v1.18.0\"). WithLoadForGoAnalysis(). WithURL(\"https://github.com/timakin/bodyclose\"), // ... linter.NewConfig(golinters.NewGovet(govetCfg)). WithGroups(config.GroupStandard). WithSince(\"v1.0.0\"). WithLoadForGoAnalysis(). WithURL(\"https://pkg.go.dev/cmd/vet\"), // ... } } We filter requested in config and command-line linters in EnabledSet:\npkg/lint/lintersdb/manager.gofunc (m *Manager) GetEnabledLintersMap() (map[string]*linter.Config, error) We merge enabled linters into one MetaLinter to improve execution time if we can:\npkg/lint/lintersdb/manager.go// GetOptimizedLinters returns enabled linters after optimization (merging) of multiple linters into a fewer number of linters. // E.g. some go/analysis linters can be optimized into one metalinter for data reuse and speed up. func (m *Manager) GetOptimizedLinters() ([]*linter.Config, error) { // ... m.combineGoAnalysisLinters(resultLintersSet) // ... } The MetaLinter just stores all merged linters inside to run them at once:\npkg/goanalysis/metalinter.gotype MetaLinter struct { linters []*Linter analyzerToLinterName map[*analysis.Analyzer]string } Currently, all linters except unused can be merged into this meta linter.\nThe unused isn’t merged because it has high memory usage.\nLinters execution starts in runAnalyzers. It’s the most complex part of the golangci-lint. We use custom go/analysis runner there.\nIt runs as much as it can in parallel. It lazy-loads as much as it can to reduce memory usage. Also, it sets all heavyweight data to nil as becomes unneeded to save memory.\nWe don’t use existing multichecker because it doesn’t use caching and doesn’t have some important performance optimizations.\nAll found by linters issues are represented with result.Issue struct:\npkg/result/issue.gotype Issue struct { FromLinter string Text string Severity string // Source lines of a code with the issue to show SourceLines []string // Pkg is needed for proper caching of linting results Pkg *packages.Package `json:\"-\"` Pos token.Position LineRange *Range `json:\",omitempty\"` // HunkPos is used only when golangci-lint is run over a diff HunkPos int `json:\",omitempty\"` // If we know how to fix the issue we can provide replacement lines SuggestedFixes []analysis.SuggestedFix `json:\",omitempty\"` // If we are expecting a nolint (because this is from nolintlint), record the expected linter ExpectNoLint bool ExpectedNoLintLinter string // ... }"},"title":"Architecture"},"/docs/contributing/debug/":{"data":{"":"You can see a verbose output of linter by using -v option.\ngolangci-lint run -v If you would like to see more detailed logs you can use the environment variable GL_DEBUG.\nIts value is a list of debug tags.\nThe existing debug tags are documented in the following file: /pkg/logutils/logutils.go\nFor example:\nGL_DEBUG=\"loader,gocritic\" golangci-lint run GL_DEBUG=\"loader,env\" golangci-lint run"},"title":"Debugging"},"/docs/contributing/faq/":{"data":{"":"","how-to-add-a-configuration-option-to-an-existing-linter#How to add a configuration option to an existing linter":"Add a new field to the linter settings struct.\nDocument it in .golangci.next.reference.yml.\nPass it to the linter.","how-to-add-a-new-open-source-linter-to-golangci-lint#How to add a new open-source linter to \u003ccode\u003egolangci-lint\u003c/code\u003e":"See there.","how-to-add-a-new-private-linter-to-golangci-lint#How to add a new private linter to \u003ccode\u003egolangci-lint\u003c/code\u003e":"See there.","how-to-see-info-or-debug-logs#How to see \u003ccode\u003eINFO\u003c/code\u003e or \u003ccode\u003eDEBUG\u003c/code\u003e logs":"See tutorial about debugging.","how-to-update-an-existing-linter#How to update an existing linter":"We use Dependabot to update dependencies, including linters.\nThe updates happen at least automatically once a week (Sunday 11am UTC).\nNo pull requests to update a linter will be accepted unless you are the author of the linter and specific changes are required."},"title":"FAQ"},"/docs/contributing/new-linters/":{"data":{"":"","how-to-add-a-private-linter-to-golangci-lint#How to add a private linter to \u003ccode\u003egolangci-lint\u003c/code\u003e":"Some people and organizations may choose to have custom-made linters run as a part of golangci-lint.\nTypically, these linters can’t be open-sourced or too specific.\nSuch linters can be added through 2 plugin systems:\nModule Plugin System Recommended Go Plugin System","how-to-add-a-public-linter-to-golangci-lint#How to add a public linter to \u003ccode\u003egolangci-lint\u003c/code\u003e":"You need to implement a new linter using go/analysis API.\nWe don’t accept non go/analysis linters.\nAfter that:\nImplement functional tests for the linter: Add one file into directory pkg/golinters/{yourlintername}/testdata/. Add a new file pkg/golinters/{yourlintername}/{yourlintername}.go. Other linters implementation can help you. Add the new struct for the linter (which you’ve implemented in pkg/golinters/{yourlintername}/{yourlintername}.go) to the list of all supported linters in pkg/lint/lintersdb/builder_linter.go to the method LinterBuilder.Build. Add WithSince(\"next_version\"), where next_version must be replaced by the next minor version. (ex: v1.2.0 if the current version is v1.1.0) Find out what options do you need to configure for the linter. For example, nakedret has only 1 option: max-func-lines. Choose default values to not being annoying for users of golangci-lint. Add configuration options to: .golangci.next.reference.yml: the example of a configuration file. You can also add them to .golangci.yml if you think that this project needs not default values. config struct: don’t forget about mapstructure tags for proper configuration files parsing. Take a look at the example of pull requests with new linter support. Run the tests: go run ./cmd/golangci-lint/ run --no-config --default=none --enable={yourlintername} ./pkg/golinters/{yourlintername}/testdata/{yourlintername}.go","how-to-write-a-linter#How to write a linter":"Use go/analysis and take a look at this tutorial: it shows how to write go/analysis linter from scratch and integrate it into golangci-lint."},"title":"New linters"},"/docs/contributing/website/":{"data":{"":"","hosting#Hosting":"We use GitHub Pages for static website hosting and CD.\nGitHub deploys the website to production after merging anything to a main branch.","local-testing#Local Testing":"Install Hugo Extended (v0.148.1 or newer).\nRun:\n# (in the root of the repository) make docs_serve or\n# (in the root of the repository) make website_expand_templates cd docs/ # (inside the docs/ folder) make serve And navigate to http://localhost:1313 after a successful build.\nThere is no need to restart the Hugo server for almost all changes: it supports hot reload.\nAlso, there is no need to refresh a webpage: hot reload updates changed content on the open page.","some-notes#Some Notes":"shortcodes:\ncannot be used inside another shortcode can only be used inside a page can contain Markdown or HTML, but the tag is different: {{% shortcode %}} vs {{\u003c shortcode \u003e}} partials:\nare reusable HTML blocks or “functions” cannot be used inside a page can be used inside another partial can be used inside a shortcode can be used inside a layout","source-code#Source Code":"The website lives in docs/ directory of golangci-lint repository.","technology#Technology":"We use Hugo for static site generation because sites built with it are very fast.","templating#Templating":"We use shortcodes and partials based on files from ./docs/.tmp/ and ./docs/data/.\nThe files in ./docs/.tmp/ are used to be embedded with the shortcode {{% golangci/embed file=\"filename.ext\" %}}. The files in ./docs/data/ are used as data sources. These files are created by running:\nmake website_expand_templates in the root of the repository. make website_dump_info in the root of the repository. (only during a release)","theme#Theme":"The site is based on hextra theme.","website-build#Website Build":"To do this, run:\n# (in the root of the repository) make docs_build or\n# (in the root of the repository) make website_copy_jsonschema website_expand_templates cd docs/ # (inside the docs/ folder) make build"},"title":"This Website"},"/docs/contributing/workflow/":{"data":{"":"By participating in this project, you agree to abide our code of conduct.","create-or-update-parameters-for-docs#Create or update parameters for docs":"Add your new or updated parameters to .golangci.next.reference.yml so they will be shown in the docs","new-releases#New releases":"First, see our versioning policy.\nTo make a new release create a tag vX.Y.Z.\nDon’t forget to add zero patch version for a new minor release, e.g. v1.99.0.\nA GitHub Action workflow will start building and publishing release after that.\nAfter making a release, you need to update GitHub Action config by running:\nmake assets/github-action-config.json","pull-request-checks#Pull request checks":"First, please, accept CLA - CLA assistant will make a comment on the pull request about it.\nAlso, we run a few checks in CI by using GitHub Actions, you can see them here.","set-up-your-machine#Set up your machine":"Golangci-lint is written in Go.\nPrerequisites:\nmake Go Fork and clone golangci-lint repository.\nA good way of making sure everything is all right is running the following:\nmake build ./golangci-lint run -v","submit-a-pull-request#Submit a pull request":"Push your branch to your golangci-lint fork and open a pull request against the main branch.","test-your-change#Test your change":"When you are satisfied with the changes, we suggest you run:\nmake test Which runs all the linters and tests."},"title":"Workflow"},"/docs/donate/":{"data":{"":"Golangci-lint is a free and open-source project built by volunteers.\nIf you value it, consider supporting us, we appreciate it! ❤️\nYou can support us via:\nGitHub SponsorsCredit card Open CollectiveCredit card, PayPal, etc. Thanks.devCredit card"},"title":"Support Us"},"/docs/formatters/configuration/":{"data":{"":"","gci#gci":"Check if code and import statements are formatted, with additional rules.\nSince golangci-lint v1.30.0 Autofix Repository formatters: settings: gci: # Section configuration to compare against. # Section names are case-insensitive and may contain parameters in (). # The default order of sections is `standard \u003e default \u003e custom \u003e blank \u003e dot \u003e alias \u003e localmodule`. # If `custom-order` is `true`, it follows the order of `sections` option. # Default: [\"standard\", \"default\"] sections: - standard # Standard section: captures all standard packages. - default # Default section: contains all imports that could not be matched to another section type. - prefix(github.com/org/project) # Custom section: groups all imports with the specified Prefix. - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled. - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled. - alias # Alias section: contains all alias imports. This section is not present unless explicitly enabled. - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled. # Checks that no inline comments are present. # Default: false no-inline-comments: true # Checks that no prefix comments (comment lines above an import) are present. # Default: false no-prefix-comments: true # Enable custom order of sections. # If `true`, make the section order the same as the order of `sections`. # Default: false custom-order: true # Drops lexical ordering for custom sections. # Default: false no-lex-order: true","gofmt#gofmt":"Check if the code is formatted according to 'gofmt' command.\nSince golangci-lint v1.0.0 Autofix Repository formatters: settings: gofmt: # Simplify code: gofmt with `-s` option. # Default: true simplify: false # Apply the rewrite rules to the source before reformatting. # https://pkg.go.dev/cmd/gofmt # Default: [] rewrite-rules: - pattern: 'interface{}' replacement: 'any' - pattern: 'a[b:len(a)]' replacement: 'a[b:]'","gofumpt#gofumpt":"Check if code and import statements are formatted, with additional rules.\nSince golangci-lint v1.28.0 Autofix Repository formatters: settings: gofumpt: # Module path which contains the source code being formatted. # Default: \"\" module-path: github.com/org/project # Choose whether to use the extra rules. # Default: false extra-rules: true","goimports#goimports":"Checks if the code and import statements are formatted according to the 'goimports' command.\nSince golangci-lint v1.20.0 Autofix Repository formatters: settings: goimports: # A list of prefixes, which, if set, checks import paths # with the given prefixes are grouped after 3rd-party packages. # Default: [] local-prefixes: - github.com/org/project","golines#golines":"Checks if code is formatted, and fixes long lines.\nSince golangci-lint v2.0.0 Autofix Repository formatters: settings: golines: # Target maximum line length. # Default: 100 max-len: 200 # Length of a tabulation. # Default: 4 tab-len: 8 # Shorten single-line comments. # Default: false shorten-comments: true # Default: true reformat-tags: false # Split chained methods on the dots as opposed to the arguments. # Default: true chain-split-dots: false","swaggo#swaggo":"Check if swaggo comments are formatted.\nSince golangci-lint v2.2.0 Autofix Repository No settings available."},"title":"Settings"},"/docs/linters/configuration/":{"data":{"":"","arangolint#arangolint":"Opinionated best practices for arangodb client.\nSince golangci-lint v2.2.0 Repository No settings available.","asasalint#asasalint":"Check for pass []any as any in variadic func(…any).\nSince golangci-lint v1.47.0 Repository linters: settings: asasalint: # To specify a set of function names to exclude. # The values are merged with the builtin exclusions. # The builtin exclusions can be disabled by setting `use-builtin-exclusions` to `false`. # Default: [\"^(fmt|log|logger|t|)\\.(Print|Fprint|Sprint|Fatal|Panic|Error|Warn|Warning|Info|Debug|Log)(|f|ln)$\"] exclude: - Append - \\.Wrapf # To enable/disable the asasalint builtin exclusions of function names. # See the default value of `exclude` to get the builtin exclusions. # Default: true use-builtin-exclusions: false","asciicheck#asciicheck":"Checks that all code identifiers does not have non-ASCII symbols in the name.\nSince golangci-lint v1.26.0 Repository No settings available.","bidichk#bidichk":"Checks for dangerous unicode character sequences.\nSince golangci-lint v1.43.0 Repository linters: settings: bidichk: # The following configurations check for all mentioned invisible Unicode runes. # All runes are enabled by default. left-to-right-embedding: false right-to-left-embedding: false pop-directional-formatting: false left-to-right-override: false right-to-left-override: false left-to-right-isolate: false right-to-left-isolate: false first-strong-isolate: false pop-directional-isolate: false","bodyclose#bodyclose":"Checks whether HTTP response body is closed successfully.\nSince golangci-lint v1.18.0 Repository No settings available.","canonicalheader#canonicalheader":"Canonicalheader checks whether net/http.Header uses canonical header.\nSince golangci-lint v1.58.0 Autofix Repository No settings available.","containedctx#containedctx":"Containedctx is a linter that detects struct contained context.Context field.\nSince golangci-lint v1.44.0 Repository No settings available.","contextcheck#contextcheck":"Check whether the function uses a non-inherited context.\nSince golangci-lint v1.43.0 Repository No settings available.","copyloopvar#copyloopvar":"A linter detects places where loop variables are copied.\nSince golangci-lint v1.57.0 Autofix Repository linters: settings: copyloopvar: # Check all assigning the loop variable to another variable. # Default: false check-alias: true","cyclop#cyclop":"Checks function and package cyclomatic complexity.\nSince golangci-lint v1.37.0 Repository linters: settings: cyclop: # The maximal code complexity to report. # Default: 10 max-complexity: 10 # The maximal average package complexity. # If it's higher than 0.0 (float) the check is enabled. # Default: 0.0 package-average: 0.5","decorder#decorder":"Check declaration order and count of types, constants, variables and functions.\nSince golangci-lint v1.44.0 Repository linters: settings: decorder: # Required order of `type`, `const`, `var` and `func` declarations inside a file. # Default: types before constants before variables before functions. dec-order: - type - const - var - func # If true, underscore vars (vars with \"_\" as the name) will be ignored at all checks. # Default: false (underscore vars are not ignored) ignore-underscore-vars: false # If true, order of declarations is not checked at all. # Default: true (disabled) disable-dec-order-check: false # If true, `init` func can be anywhere in file (does not have to be declared before all other functions). # Default: true (disabled) disable-init-func-first-check: false # If true, multiple global `type`, `const` and `var` declarations are allowed. # Default: true (disabled) disable-dec-num-check: false # If true, type declarations will be ignored for dec num check. # Default: false (type statements are not ignored) disable-type-dec-num-check: false # If true, const declarations will be ignored for dec num check. # Default: false (const statements are not ignored) disable-const-dec-num-check: false # If true, var declarations will be ignored for dec num check. # Default: false (var statements are not ignored) disable-var-dec-num-check: false","depguard#depguard":"Go linter that checks if package imports are in a list of acceptable packages.\nSince golangci-lint v1.4.0 Repository linters: settings: depguard: # Rules to apply. # # Variables: # - File Variables # Use an exclamation mark `!` to negate a variable. # Example: `!$test` matches any file that is not a go test file. # # `$all` - matches all go files # `$test` - matches all go test files # # - Package Variables # # `$gostd` - matches all of go's standard library (Pulled from `GOROOT`) # # Default (applies if no custom rules are defined): Only allow $gostd in all files. rules: # Name of a rule. main: # Defines package matching behavior. Available modes: # - `original`: allowed if it doesn't match the deny list and either matches the allow list or the allow list is empty. # - `strict`: allowed only if it matches the allow list and either doesn't match the deny list or the allow rule is more specific (longer) than the deny rule. # - `lax`: allowed if it doesn't match the deny list or the allow rule is more specific (longer) than the deny rule. # Default: \"original\" list-mode: lax # List of file globs that will match this list of settings to compare against. # By default, if a path is relative, it is relative to the directory where the golangci-lint command is executed. # The placeholder '${base-path}' is substituted with a path relative to the mode defined with `run.relative-path-mode`. # The placeholder '${config-path}' is substituted with a path relative to the configuration file. # Default: $all files: - \"!**/*_a _file.go\" # List of allowed packages. # Entries can be a variable (starting with $), a string prefix, or an exact match (if ending with $). # Default: [] allow: - $gostd - github.com/OpenPeeDeeP # List of packages that are not allowed. # Entries can be a variable (starting with $), a string prefix, or an exact match (if ending with $). # Default: [] deny: - pkg: \"math/rand$\" desc: use math/rand/v2 - pkg: \"github.com/sirupsen/logrus\" desc: not allowed - pkg: \"github.com/pkg/errors\" desc: Should be replaced by standard lib errors package","dogsled#dogsled":"Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()).\nSince golangci-lint v1.19.0 Repository linters: settings: dogsled: # Checks assignments with too many blank identifiers. # Default: 2 max-blank-identifiers: 3","dupl#dupl":"Detects duplicate fragments of code.\nSince golangci-lint v1.0.0 Repository linters: settings: dupl: # Tokens count to trigger issue. # Default: 150 threshold: 100","dupword#dupword":"Checks for duplicate words in the source code.\nSince golangci-lint v1.50.0 Autofix Repository linters: settings: dupword: # Keywords for detecting duplicate words. # If this list is not empty, only the words defined in this list will be detected. # Default: [] keywords: - \"the\" - \"and\" - \"a\" # Keywords used to ignore detection. # Default: [] ignore: - \"0C0C\" # Checks only comments, skip strings. # Default: false comments-only: true","durationcheck#durationcheck":"Check for two durations multiplied together.\nSince golangci-lint v1.37.0 Repository No settings available.","embeddedstructfieldcheck#embeddedstructfieldcheck":"Embedded types should be at the top of the field list of a struct, and there must be an empty line separating embedded fields from regular fields.\nSince golangci-lint v2.2.0 Repository linters: settings: embeddedstructfieldcheck: # Checks that there is an empty space between the embedded fields and regular fields. # Default: true empty-line: false # Checks that sync.Mutex and sync.RWMutex are not used as embedded fields. # Default: false forbid-mutex: true","err113#err113":"Check errors handling expressions.\nSince golangci-lint v1.26.0 Autofix Repository No settings available.","errcheck#errcheck":"Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.\nSince golangci-lint v1.0.0 Repository linters: settings: errcheck: # Report about not checking of errors in type assertions: `a := b.(MyStruct)`. # Such cases aren't reported by default. # Default: false check-type-assertions: true # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`. # Such cases aren't reported by default. # Default: false check-blank: true # To disable the errcheck built-in exclude list. # See `-excludeonly` option in https://github.com/kisielk/errcheck#excluding-functions for details. # Default: false disable-default-exclusions: true # List of functions to exclude from checking, where each entry is a single function to exclude. # See https://github.com/kisielk/errcheck#excluding-functions for details. exclude-functions: - io/ioutil.ReadFile - io.Copy(*bytes.Buffer) - io.Copy(os.Stdout) # Display function signature instead of selector. # Default: false verbose: true","errchkjson#errchkjson":"Checks types passed to the json encoding functions. Reports unsupported types and reports occurrences where the check for the returned error can be omitted.\nSince golangci-lint v1.44.0 Repository linters: settings: errchkjson: # With check-error-free-encoding set to true, errchkjson does warn about errors # from json encoding functions that are safe to be ignored, # because they are not possible to happen. # # if check-error-free-encoding is set to true and errcheck linter is enabled, # it is recommended to add the following exceptions to prevent from false positives: # # linters: # settings: # errcheck: # exclude-functions: # - encoding/json.Marshal # - encoding/json.MarshalIndent # # Default: false check-error-free-encoding: true # Issue on struct encoding that doesn't have exported fields. # Default: false report-no-exported: false","errname#errname":"Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.\nSince golangci-lint v1.42.0 Repository No settings available.","errorlint#errorlint":"Find code that can cause problems with the error wrapping scheme introduced in Go 1.13.\nSince golangci-lint v1.32.0 Autofix Repository linters: settings: errorlint: # Check whether fmt.Errorf uses the %w verb for formatting errors. # See the https://github.com/polyfloyd/go-errorlint for caveats. # Default: true errorf: false # Permit more than 1 %w verb, valid per Go 1.20 (requires `errorf: true`). # Default: true errorf-multi: false # Check for plain type assertions and type switches. # Default: true asserts: false # Check for plain error comparisons. # Default: true comparison: false # Allowed errors. # Default: [] allowed-errors: - err: \"io.EOF\" fun: \"example.com/pkg.Read\" # Allowed error \"wildcards\". # Default: [] allowed-errors-wildcard: - err: \"example.com/pkg.ErrMagic\" fun: \"example.com/pkg.Magic\"","exhaustive#exhaustive":"Check exhaustiveness of enum switch statements.\nSince golangci-lint v1.28.0 Repository linters: settings: exhaustive: # Program elements to check for exhaustiveness. # Default: [ switch ] check: - switch - map # Presence of \"default\" case in switch statements satisfies exhaustiveness, # even if all enum members are not listed. # Default: false default-signifies-exhaustive: true # Enum members matching the supplied regex do not have to be listed in # switch statements to satisfy exhaustiveness. # Default: \"\" ignore-enum-members: \"Example.+\" # Enum types matching the supplied regex do not have to be listed in # switch statements to satisfy exhaustiveness. # Default: \"\" ignore-enum-types: \"Example.+\" # Consider enums only in package scopes, not in inner scopes. # Default: false package-scope-only: true # Only run exhaustive check on switches with \"//exhaustive:enforce\" comment. # Default: false explicit-exhaustive-switch: true # Only run exhaustive check on map literals with \"//exhaustive:enforce\" comment. # Default: false explicit-exhaustive-map: true # Switch statement requires default case even if exhaustive. # Default: false default-case-required: true","exhaustruct#exhaustruct":"Checks if all structure fields are initialized.\nSince golangci-lint v1.46.0 Repository linters: settings: exhaustruct: # List of regular expressions to match type names that should be processed. # Anonymous structs can be matched by '' alias. # # Each regular expression must match the full type name, including package path. # For example, to match type `net/http.Cookie` regular expression should be `.*/http\\.Cookie`, # but not `http\\.Cookie`. # Default: [] include: - '.+\\.Test' - 'example\\.com/package\\.ExampleStruct[\\d]{1,2}' # List of regular expressions to match type names that should be excluded from processing. # Anonymous structs can be matched by '' alias. # Has precedence over `include`. # Each regular expression must match the full type name, including package path. # For example, to match type `net/http.Cookie` regular expression should be `.*/http\\.Cookie`, # but not `http\\.Cookie`. # Default: [] exclude: - '.+/cobra\\.Command$' # Allows empty structures, effectively excluding them from the check. # Default: false allow-empty: true # List of regular expressions to match type names that should be allowed to be empty. # Anonymous structs can be matched by '' alias. # Each regular expression must match the full type name, including package path. # For example, to match type `net/http.Cookie` regular expression should be `.*/http\\.Cookie`, # but not `http\\.Cookie`. # Default: [] allow-empty-rx: - '.*/http\\.Cookie' # Allows empty structures in return statements. # Default: false allow-empty-returns: true # Allows empty structures in variable declarations. # Default: false allow-empty-declarations: true","exptostd#exptostd":"Detects functions from golang.org/x/exp/ that can be replaced by std functions.\nSince golangci-lint v1.63.0 Autofix Repository No settings available.","fatcontext#fatcontext":"Detects nested contexts in loops and function literals.\nSince golangci-lint v1.58.0 Autofix Repository linters: settings: fatcontext: # Check for potential fat contexts in struct pointers. # May generate false positives. # Default: false check-struct-pointers: true","forbidigo#forbidigo":"Forbids identifiers.\nSince golangci-lint v1.34.0 Repository linters: settings: forbidigo: # Forbid the following identifiers (list of regexp). # Default: [\"^(fmt\\\\.Print(|f|ln)|print|println)$\"] forbid: # Built-in bootstrapping functions. - pattern: ^print(ln)?$ # Optional message that gets included in error reports. - pattern: ^fmt\\.Print.*$ msg: Do not commit print statements. # Alternatively, put messages at the end of the regex, surrounded by `(# )?`. # Escape any special characters. Those messages get included in error reports. - pattern: 'fmt\\.Print.*(# Do not commit print statements\\.)?' # Forbid spew Dump, whether it is called as function or method. # Depends on analyze-types below. - pattern: ^spew\\.(ConfigState\\.)?Dump$ # The package name might be ambiguous. # The full import path can be used as additional criteria. # Depends on analyze-types below. - pattern: ^v1.Dump$ pkg: ^example.com/pkg/api/v1$ # Exclude godoc examples from forbidigo checks. # Default: true exclude-godoc-examples: false # Instead of matching the literal source code, # use type information to replace expressions with strings that contain the package name # and (for methods and fields) the type name. # This makes it possible to handle import renaming and forbid struct fields and methods. # Default: false analyze-types: true","forcetypeassert#forcetypeassert":"Find forced type assertions.\nSince golangci-lint v1.38.0 Repository No settings available.","funcorder#funcorder":"Checks the order of functions, methods, and constructors.\nSince golangci-lint v2.1.0 Repository linters: settings: funcorder: # Checks that constructors are placed after the structure declaration. # Default: true constructor: false # Checks if the exported methods of a structure are placed before the non-exported ones. # Default: true struct-method: false # Checks if the constructors and/or structure methods are sorted alphabetically. # Default: false alphabetical: true","funlen#funlen":"Checks for long functions.\nSince golangci-lint v1.18.0 Repository linters: settings: funlen: # Checks the number of lines in a function. # If lower than 0, disable the check. # Default: 60 lines: -1 # Checks the number of statements in a function. # If lower than 0, disable the check. # Default: 40 statements: -1 # Ignore comments when counting lines. # Default: true ignore-comments: false","ginkgolinter#ginkgolinter":"Enforces standards of using ginkgo and gomega.\nSince golangci-lint v1.51.0 Autofix Repository linters: settings: ginkgolinter: # Suppress the wrong length assertion warning. # Default: false suppress-len-assertion: true # Suppress the wrong nil assertion warning. # Default: false suppress-nil-assertion: true # Suppress the wrong error assertion warning. # Default: false suppress-err-assertion: true # Suppress the wrong comparison assertion warning. # Default: false suppress-compare-assertion: true # Suppress the function all in async assertion warning. # Default: false suppress-async-assertion: true # Suppress warning for comparing values from different types, like `int32` and `uint32`. # Default: false suppress-type-compare-assertion: true # Trigger warning for ginkgo focus containers like `FDescribe`, `FContext`, `FWhen` or `FIt`. # Default: false forbid-focus-container: true # Don't trigger warnings for HaveLen(0) # Default: false allow-havelen-zero: true # Force using `Expect` with `To`, `ToNot` or `NotTo`. # Reject using `Expect` with `Should` or `ShouldNot`. # Default: false force-expect-to: true # Best effort validation of async intervals (timeout and polling). # Ignored the `suppress-async-assertion` is true. # Default: false validate-async-intervals: true # Trigger a warning for variable assignments in ginkgo containers like `Describe`, `Context` and `When`, instead of in `BeforeEach()`. # Default: false forbid-spec-pollution: true # Force using the Succeed matcher for error functions, and the HaveOccurred matcher for non-function error values. # Default: false force-succeed: true # Force adding assertion descriptions to gomega matchers. # Default: false force-assertion-description: true # Force using `ToNot`, `ShouldNot` instead of `To(Not())`. # Default: false force-tonot: true","gocheckcompilerdirectives#gocheckcompilerdirectives":"Checks that go compiler directive comments (//go:) are valid.\nSince golangci-lint v1.51.0 Repository No settings available.","gochecknoglobals#gochecknoglobals":"Check that no global variables exist.\nSince golangci-lint v1.12.0 Repository No settings available.","gochecknoinits#gochecknoinits":"Checks that no init functions are present in Go code.\nSince golangci-lint v1.12.0 No settings available.","gochecksumtype#gochecksumtype":"Run exhaustiveness checks on Go \"sum types\".\nSince golangci-lint v1.55.0 Repository linters: settings: gochecksumtype: # Presence of `default` case in switch statements satisfies exhaustiveness, if all members are not listed. # Default: true default-signifies-exhaustive: false # Include shared interfaces in the exhaustiveness check. # Default: false include-shared-interfaces: true","gocognit#gocognit":"Computes and checks the cognitive complexity of functions.\nSince golangci-lint v1.20.0 Repository linters: settings: gocognit: # Minimal code complexity to report. # Default: 30 (but we recommend 10-20) min-complexity: 10","goconst#goconst":"Finds repeated strings that could be replaced by a constant.\nSince golangci-lint v1.0.0 Repository linters: settings: goconst: # Minimal length of string constant. # Default: 3 min-len: 2 # Minimum occurrences of constant string count to trigger issue. # Default: 3 min-occurrences: 2 # Look for existing constants matching the values. # Default: true match-constant: false # Search also for duplicated numbers. # Default: false numbers: true # Minimum value, only works with `goconst.numbers`. # Default: 3 min: 2 # Maximum value, only works with `goconst.numbers`. # Default: 3 max: 2 # Ignore when constant is not used as function argument. # Default: true ignore-calls: false # Exclude strings matching the given regular expression. # Default: \"\" ignore-string-values: - 'foo.+' # Detects constants with identical values. # Default: false find-duplicates: true # Evaluates of constant expressions like Prefix + \"suffix\". # Default: false eval-const-expressions: true","gocritic#gocritic":"Provides diagnostics that check for bugs, performance and style issues. Extensible without recompilation through dynamic rules. Dynamic rules are written declaratively with AST patterns, filters, report message and optional suggestion.\nSince golangci-lint v1.12.0 Autofix Repository linters: settings: gocritic: # Disable all checks. # Default: false disable-all: true # Which checks should be enabled in addition to default checks; can't be combined with 'disabled-checks'. # By default, list of stable checks is used (https://go-critic.com/overview#checks-overview): # appendAssign, argOrder, assignOp, badCall, badCond, captLocal, caseOrder, codegenComment, commentFormatting, # defaultCaseOrder, deprecatedComment, dupArg, dupBranchBody, dupCase, dupSubExpr, elseif, exitAfterDefer, # flagDeref, flagName, ifElseChain, mapKey, newDeref, offBy1, regexpMust, singleCaseSwitch, sloppyLen, # sloppyTypeAssert, switchTrue, typeSwitchVar, underef, unlambda, unslice, valSwap, wrapperFunc # To see which checks are enabled run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic`. enabled-checks: # Detects suspicious append result assignments. # https://go-critic.com/overview.html#appendassign - appendAssign # Detects `append` chains to the same slice that can be done in a single `append` call. # https://go-critic.com/overview.html#appendcombine - appendCombine # Detects suspicious arguments order. # https://go-critic.com/overview.html#argorder - argOrder # Detects assignments that can be simplified by using assignment operators. # https://go-critic.com/overview.html#assignop - assignOp # Detects suspicious function calls. # https://go-critic.com/overview.html#badcall - badCall # Detects suspicious condition expressions. # https://go-critic.com/overview.html#badcond - badCond # Detects suspicious mutex lock/unlock operations. # https://go-critic.com/overview.html#badlock - badLock # Detects suspicious regexp patterns. # https://go-critic.com/overview.html#badregexp - badRegexp # Detects bad usage of sort package. # https://go-critic.com/overview.html#badsorting - badSorting # Detects bad usage of sync.OnceFunc. # https://go-critic.com/overview.html#badsynconcefunc - badSyncOnceFunc # Detects bool expressions that can be simplified. # https://go-critic.com/overview.html#boolexprsimplify - boolExprSimplify # Detects when predeclared identifiers are shadowed in assignments. # https://go-critic.com/overview.html#builtinshadow - builtinShadow # Detects top-level declarations that shadow the predeclared identifiers. # https://go-critic.com/overview.html#builtinshadowdecl - builtinShadowDecl # Detects capitalized names for local variables. # https://go-critic.com/overview.html#captlocal - captLocal # Detects erroneous case order inside switch statements. # https://go-critic.com/overview.html#caseorder - caseOrder # Detects malformed 'code generated' file comments. # https://go-critic.com/overview.html#codegencomment - codegenComment # Detects comments with non-idiomatic formatting. # https://go-critic.com/overview.html#commentformatting - commentFormatting # Detects commented-out code inside function bodies. # https://go-critic.com/overview.html#commentedoutcode - commentedOutCode # Detects commented-out imports. # https://go-critic.com/overview.html#commentedoutimport - commentedOutImport # Detects when default case in switch isn't on 1st or last position. # https://go-critic.com/overview.html#defaultcaseorder - defaultCaseOrder # Detects loops inside functions that use defer. # https://go-critic.com/overview.html#deferinloop - deferInLoop # Detects deferred function literals that can be simplified. # https://go-critic.com/overview.html#deferunlambda - deferUnlambda # Detects malformed 'deprecated' doc-comments. # https://go-critic.com/overview.html#deprecatedcomment - deprecatedComment # Detects comments that silence go lint complaints about doc-comment. # https://go-critic.com/overview.html#docstub - docStub # Detects suspicious duplicated arguments. # https://go-critic.com/overview.html#duparg - dupArg # Detects duplicated branch bodies inside conditional statements. # https://go-critic.com/overview.html#dupbranchbody - dupBranchBody # Detects duplicated case clauses inside switch or select statements. # https://go-critic.com/overview.html#dupcase - dupCase # Detects multiple imports of the same package under different aliases. # https://go-critic.com/overview.html#dupimport - dupImport # Detects duplicated option function arguments in variadic function calls. # https://go-critic.com/overview.html#dupoption - dupOption # Detects suspicious duplicated sub-expressions. # https://go-critic.com/overview.html#dupsubexpr - dupSubExpr # Detects suspicious formatting strings usage. # https://go-critic.com/overview.html#dynamicfmtstring - dynamicFmtString # Detects else with nested if statement that can be replaced with else-if. # https://go-critic.com/overview.html#elseif - elseif # Detects suspicious empty declarations blocks. # https://go-critic.com/overview.html#emptydecl - emptyDecl # Detects fallthrough that can be avoided by using multi case values. # https://go-critic.com/overview.html#emptyfallthrough - emptyFallthrough # Detects empty string checks that can be written more idiomatically. # https://go-critic.com/overview.html#emptystringtest - emptyStringTest # Detects unoptimal strings/bytes case-insensitive comparison. # https://go-critic.com/overview.html#equalfold - equalFold # Detects unwanted dependencies on the evaluation order. # https://go-critic.com/overview.html#evalorder - evalOrder # Detects calls to exit/fatal inside functions that use defer. # https://go-critic.com/overview.html#exitafterdefer - exitAfterDefer # Detects exposed methods from sync.Mutex and sync.RWMutex. # https://go-critic.com/overview.html#exposedsyncmutex - exposedSyncMutex # Detects suspicious reassignment of error from another package. # https://go-critic.com/overview.html#externalerrorreassign - externalErrorReassign # Detects problems in filepath.Join() function calls. # https://go-critic.com/overview.html#filepathjoin - filepathJoin # Detects immediate dereferencing of `flag` package pointers. # https://go-critic.com/overview.html#flagderef - flagDeref # Detects suspicious flag names. # https://go-critic.com/overview.html#flagname - flagName # Detects hex literals that have mixed case letter digits. # https://go-critic.com/overview.html#hexliteral - hexLiteral # Detects nil usages in http.NewRequest calls, suggesting http.NoBody as an alternative. # https://go-critic.com/overview.html#httpnobody - httpNoBody # Detects params that incur excessive amount of copying. # https://go-critic.com/overview.html#hugeparam - hugeParam # Detects repeated if-else statements and suggests to replace them with switch statement. # https://go-critic.com/overview.html#ifelsechain - ifElseChain # Detects when imported package names shadowed in the assignments. # https://go-critic.com/overview.html#importshadow - importShadow # Detects strings.Index calls that may cause unwanted allocs. # https://go-critic.com/overview.html#indexalloc - indexAlloc # Detects non-assignment statements inside if/switch init clause. # https://go-critic.com/overview.html#initclause - initClause # Detects suspicious map literal keys. # https://go-critic.com/overview.html#mapkey - mapKey # Detects method expression call that can be replaced with a method call. # https://go-critic.com/overview.html#methodexprcall - methodExprCall # Finds where nesting level could be reduced. # https://go-critic.com/overview.html#nestingreduce - nestingReduce # Detects immediate dereferencing of `new` expressions. # https://go-critic.com/overview.html#newderef - newDeref # Detects return statements those results evaluate to nil. # https://go-critic.com/overview.html#nilvalreturn - nilValReturn # Detects old-style octal literals. # https://go-critic.com/overview.html#octalliteral - octalLiteral # Detects various off-by-one kind of errors. # https://go-critic.com/overview.html#offby1 - offBy1 # Detects if function parameters could be combined by type and suggest the way to do it. # https://go-critic.com/overview.html#paramtypecombine - paramTypeCombine # Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation. # https://go-critic.com/overview.html#preferdecoderune - preferDecodeRune # Detects concatenation with os.PathSeparator which can be replaced with filepath.Join. # https://go-critic.com/overview.html#preferfilepathjoin - preferFilepathJoin # Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln). # https://go-critic.com/overview.html#preferfprint - preferFprint # Detects w.Write or io.WriteString calls which can be replaced with w.WriteString. # https://go-critic.com/overview.html#preferstringwriter - preferStringWriter # Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead. # https://go-critic.com/overview.html#preferwritebyte - preferWriteByte # Detects input and output parameters that have a type of pointer to referential type. # https://go-critic.com/overview.html#ptrtorefparam - ptrToRefParam # Detects append all its data while range it. # https://go-critic.com/overview.html#rangeappendall - rangeAppendAll # Detects expensive copies of `for` loop range expressions. # https://go-critic.com/overview.html#rangeexprcopy - rangeExprCopy # Detects loops that copy big objects during each iteration. # https://go-critic.com/overview.html#rangevalcopy - rangeValCopy # Detects redundant fmt.Sprint calls. # https://go-critic.com/overview.html#redundantsprint - redundantSprint # Detects `regexp.Compile*` that can be replaced with `regexp.MustCompile*`. # https://go-critic.com/overview.html#regexpmust - regexpMust # Detects suspicious regexp patterns. # https://go-critic.com/overview.html#regexppattern - regexpPattern # Detects regexp patterns that can be simplified. # https://go-critic.com/overview.html#regexpsimplify - regexpSimplify # Detects suspicious http.Error call without following return. # https://go-critic.com/overview.html#returnafterhttperror - returnAfterHttpError # Runs user-defined rules using ruleguard linter. # https://go-critic.com/overview.html#ruleguard - ruleguard # Detects switch statements that could be better written as if statement. # https://go-critic.com/overview.html#singlecaseswitch - singleCaseSwitch # Detects slice clear loops, suggests an idiom that is recognized by the Go compiler. # https://go-critic.com/overview.html#sliceclear - sliceClear # Detects usage of `len` when result is obvious or doesn't make sense. # https://go-critic.com/overview.html#sloppylen - sloppyLen # Detects suspicious/confusing re-assignments. # https://go-critic.com/overview.html#sloppyreassign - sloppyReassign # Detects redundant type assertions. # https://go-critic.com/overview.html#sloppytypeassert - sloppyTypeAssert # Detects suspicious sort.Slice calls. # https://go-critic.com/overview.html#sortslice - sortSlice # Detects \"%s\" formatting directives that can be replaced with %q. # https://go-critic.com/overview.html#sprintfquotedstring - sprintfQuotedString # Detects issue in Query() and Exec() calls. # https://go-critic.com/overview.html#sqlquery - sqlQuery # Detects string concat operations that can be simplified. # https://go-critic.com/overview.html#stringconcatsimplify - stringConcatSimplify # Detects redundant conversions between string and []byte. # https://go-critic.com/overview.html#stringxbytes - stringXbytes # Detects strings.Compare usage. # https://go-critic.com/overview.html#stringscompare - stringsCompare # Detects switch-over-bool statements that use explicit `true` tag value. # https://go-critic.com/overview.html#switchtrue - switchTrue # Detects sync.Map load+delete operations that can be replaced with LoadAndDelete. # https://go-critic.com/overview.html#syncmaploadanddelete - syncMapLoadAndDelete # Detects manual conversion to milli- or microseconds. # https://go-critic.com/overview.html#timeexprsimplify - timeExprSimplify # Detects TODO comments without detail/assignee. # https://go-critic.com/overview.html#todocommentwithoutdetail - todoCommentWithoutDetail # Detects function with too many results. # https://go-critic.com/overview.html#toomanyresultschecker - tooManyResultsChecker # Detects potential truncation issues when comparing ints of different sizes. # https://go-critic.com/overview.html#truncatecmp - truncateCmp # Detects repeated type assertions and suggests to replace them with type switch statement. # https://go-critic.com/overview.html#typeassertchain - typeAssertChain # Detects method declarations preceding the type definition itself. # https://go-critic.com/overview.html#typedeffirst - typeDefFirst # Detects type switches that can benefit from type guard clause with variable. # https://go-critic.com/overview.html#typeswitchvar - typeSwitchVar # Detects unneeded parenthesis inside type expressions and suggests to remove them. # https://go-critic.com/overview.html#typeunparen - typeUnparen # Detects unchecked errors in if statements. # https://go-critic.com/overview.html#uncheckedinlineerr - uncheckedInlineErr # Detects dereference expressions that can be omitted. # https://go-critic.com/overview.html#underef - underef # Detects redundant statement labels. # https://go-critic.com/overview.html#unlabelstmt - unlabelStmt # Detects function literals that can be simplified. # https://go-critic.com/overview.html#unlambda - unlambda # Detects unnamed results that may benefit from names. # https://go-critic.com/overview.html#unnamedresult - unnamedResult # Detects unnecessary braced statement blocks. # https://go-critic.com/overview.html#unnecessaryblock - unnecessaryBlock # Detects redundantly deferred calls. # https://go-critic.com/overview.html#unnecessarydefer - unnecessaryDefer # Detects slice expressions that can be simplified to sliced expression itself. # https://go-critic.com/overview.html#unslice - unslice # Detects value swapping code that are not using parallel assignment. # https://go-critic.com/overview.html#valswap - valSwap # Detects conditions that are unsafe due to not being exhaustive. # https://go-critic.com/overview.html#weakcond - weakCond # Ensures that `//nolint` comments include an explanation. # https://go-critic.com/overview.html#whynolint - whyNoLint # Detects function calls that can be replaced with convenience wrappers. # https://go-critic.com/overview.html#wrapperfunc - wrapperFunc # Detects Yoda style expressions and suggests to replace them. # https://go-critic.com/overview.html#yodastyleexpr - yodaStyleExpr # Detects bytes.Repeat with 0 value. # https://go-critic.com/overview.html#zerobyterepeat - zeroByteRepeat # Enable all checks. # Default: false enable-all: true # Which checks should be disabled; can't be combined with 'enabled-checks'. # Default: [] disabled-checks: - appendAssign - appendCombine - argOrder - assignOp - badCall - badCond - badLock - badRegexp - badSorting - badSyncOnceFunc - boolExprSimplify - builtinShadow - builtinShadowDecl - captLocal - caseOrder - codegenComment - commentFormatting - commentedOutCode - commentedOutImport - defaultCaseOrder - deferInLoop - deferUnlambda - deprecatedComment - docStub - dupArg - dupBranchBody - dupCase - dupImport - dupSubExpr - dynamicFmtString - elseif - emptyDecl - emptyFallthrough - emptyStringTest - equalFold - evalOrder - exitAfterDefer - exposedSyncMutex - externalErrorReassign - filepathJoin - flagDeref - flagName - hexLiteral - httpNoBody - hugeParam - ifElseChain - importShadow - indexAlloc - initClause - mapKey - methodExprCall - nestingReduce - newDeref - nilValReturn - octalLiteral - offBy1 - paramTypeCombine - preferDecodeRune - preferFilepathJoin - preferFprint - preferStringWriter - preferWriteByte - ptrToRefParam - rangeAppendAll - rangeExprCopy - rangeValCopy - redundantSprint - regexpMust - regexpPattern - regexpSimplify - returnAfterHttpError - ruleguard - singleCaseSwitch - sliceClear - sloppyLen - sloppyReassign - sloppyTypeAssert - sortSlice - sprintfQuotedString - sqlQuery - stringConcatSimplify - stringXbytes - stringsCompare - switchTrue - syncMapLoadAndDelete - timeExprSimplify - todoCommentWithoutDetail - tooManyResultsChecker - truncateCmp - typeAssertChain - typeDefFirst - typeSwitchVar - typeUnparen - uncheckedInlineErr - underef - unlabelStmt - unlambda - unnamedResult - unnecessaryBlock - unnecessaryDefer - unslice - valSwap - weakCond - whyNoLint - wrapperFunc - yodaStyleExpr # Enable multiple checks by tags in addition to default checks. # Run `GL_DEBUG=gocritic golangci-lint run --enable=gocritic` to see all tags and checks. # See https://github.com/go-critic/go-critic#usage -\u003e section \"Tags\". # Default: [] enabled-tags: - diagnostic - style - performance - experimental - opinionated disabled-tags: - diagnostic - style - performance - experimental - opinionated # Settings passed to gocritic. # The settings key is the name of a supported gocritic checker. # The list of supported checkers can be found at https://go-critic.com/overview. settings: # Must be valid enabled check name. captLocal: # Whether to restrict checker to params only. # Default: true paramsOnly: false commentedOutCode: # Min length of the comment that triggers a warning. # Default: 15 minLength: 50 elseif: # Whether to skip balanced if-else pairs. # Default: true skipBalanced: false hugeParam: # Size in bytes that makes the warning trigger. # Default: 80 sizeThreshold: 70 ifElseChain: # Min number of if-else blocks that makes the warning trigger. # Default: 2 minThreshold: 4 nestingReduce: # Min number of statements inside a branch to trigger a warning. # Default: 5 bodyWidth: 4 rangeExprCopy: # Size in bytes that makes the warning trigger. # Default: 512 sizeThreshold: 516 # Whether to check test functions # Default: true skipTestFuncs: false rangeValCopy: # Size in bytes that makes the warning trigger. # Default: 128 sizeThreshold: 32 # Whether to check test functions. # Default: true skipTestFuncs: false ruleguard: # Enable debug to identify which 'Where' condition was rejected. # The value of the parameter is the name of a function in a ruleguard file. # # When a rule is evaluated: # If: # The Match() clause is accepted; and # One of the conditions in the Where() clause is rejected, # Then: # ruleguard prints the specific Where() condition that was rejected. # # The option is passed to the ruleguard 'debug-group' argument. # Default: \"\" debug: 'emptyDecl' # Determines the behavior when an error occurs while parsing ruleguard files. # If flag is not set, log error and skip rule files that contain an error. # If flag is set, the value must be a comma-separated list of error conditions. # - 'all': fail on all errors. # - 'import': ruleguard rule imports a package that cannot be found. # - 'dsl': gorule file does not comply with the ruleguard DSL. # Default: \"\" failOn: dsl,import # Comma-separated list of file paths containing ruleguard rules. # By default, if a path is relative, it is relative to the directory where the golangci-lint command is executed. # The placeholder '${base-path}' is substituted with a path relative to the mode defined with `run.relative-path-mode`. # The placeholder '${config-path}' is substituted with a path relative to the configuration file. # Glob patterns such as 'rules-*.go' may be specified. # Default: \"\" rules: '${base-path}/ruleguard/rules-*.go,${base-path}/myrule1.go' # Comma-separated list of enabled groups or skip empty to enable everything. # Tags can be defined with # character prefix. # Default: \"\" enable: \"myGroupName,#myTagName\" # Comma-separated list of disabled groups or skip empty to enable everything. # Tags can be defined with # character prefix. # Default: \"\" disable: \"myGroupName,#myTagName\" tooManyResultsChecker: # Maximum number of results. # Default: 5 maxResults: 10 truncateCmp: # Whether to skip int/uint/uintptr types. # Default: true skipArchDependent: false underef: # Whether to skip (*x).method() calls where x is a pointer receiver. # Default: true skipRecvDeref: false unnamedResult: # Whether to check exported functions. # Default: false checkExported: true","gocyclo#gocyclo":"Computes and checks the cyclomatic complexity of functions.\nSince golangci-lint v1.0.0 Repository linters: settings: gocyclo: # Minimal code complexity to report. # Default: 30 (but we recommend 10-20) min-complexity: 10","godoclint#godoclint":"Checks Golang's documentation practice (godoc).\nSince golangci-lint v2.5.0 Repository linters: settings: godoclint: # Default set of rules to enable. # Possible values are: `basic`, `all` or `none`. # Default: `basic` (enables `pkg-doc`, `single-pkg-doc`, `start-with-name`, and `deprecated`) default: all # List of rules to enable in addition to the default set. # Default: empty enable: # Check proper package-level godoc, if any. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#pkg-doc - pkg-doc # Assert at most one godoc per package. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#single-pkg-doc - single-pkg-doc # Require all packages to have a godoc. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#require-pkg-doc - require-pkg-doc # Assert symbol godocs start with the symbol name. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#start-with-name - start-with-name # Require godoc for all public symbols. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#require-doc - require-doc # Assert correct formatting of deprecation notes. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#deprecated - deprecated # Assert maximum line length for godocs. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#max-len - max-len # Assert no unused link in godocs. # https://github.com/godoc-lint/godoc-lint?tab=readme-ov-file#no-unused-link - no-unused-link # List of rules to disable. # Default: empty disable: - pkg-doc - single-pkg-doc - require-pkg-doc - start-with-name - require-doc - deprecated - max-len - no-unused-link # A map for fine-tuning individual rules. # All subkeys are optional. options: max-len: # Maximum line length for godocs, not including the `// `, or `/*` or `*/` tokens. # Default: 77 length: 127 require-doc: # Ignore exported (public) symbols when applying the `require-doc` rule. # Default: false ignore-exported: true # Ignore unexported (private) symbols when applying the `require-doc` rule. # Default: true ignore-unexported: false start-with-name: # Include unexported symbols when applying the `start-with-name` rule. # Default: false include-unexported: true","godot#godot":"Check if comments end in a period.\nSince golangci-lint v1.25.0 Autofix Repository linters: settings: godot: # Comments to be checked: `declarations`, `toplevel`, `noinline` or `all`. # Default: declarations scope: toplevel # List of regexps for excluding particular comment lines from check. # Default: [] exclude: # Exclude todo and fixme comments. - \"^fixme:\" - \"^todo:\" # Check that each sentence ends with a period. # Default: true period: false # Check that each sentence starts with a capital letter. # Default: false capital: true","godox#godox":"Detects usage of FIXME, TODO and other keywords inside comments.\nSince golangci-lint v1.19.0 Repository linters: settings: godox: # Report any comments starting with keywords, this is useful for TODO or FIXME comments that # might be left in the code accidentally and should be resolved before merging. # Default: [\"TODO\", \"BUG\", \"FIXME\"] keywords: - NOTE - OPTIMIZE # marks code that should be optimized before merging - HACK # marks hack-around that should be removed before merging","goheader#goheader":"Check if file header matches to pattern.\nSince golangci-lint v1.28.0 Autofix Repository linters: settings: goheader: # Supports two types 'const` and `regexp`. # Values can be used recursively. # Default: {} values: const: # Define here const type values in format k:v. # For example: COMPANY: MY COMPANY regexp: # Define here regexp type values. # for example: AUTHOR: .*@mycompany\\.com # The template used for checking. # Put here copyright header template for source code files. # Note: {{ YEAR }} is a builtin value that returns the year relative to the current machine time. # Default: \"\" template: |- {{ AUTHOR }} {{ COMPANY }} {{ YEAR }} SPDX-License-Identifier: Apache-2.0 Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. # As alternative of directive 'template', you may put the path to file with the template source. # Useful if you need to load the template from a specific file. # By default, if a path is relative, it is relative to the directory where the golangci-lint command is executed. # The placeholder '${base-path}' is substituted with a path relative to the mode defined with `run.relative-path-mode`. # The placeholder '${config-path}' is substituted with a path relative to the configuration file. # Default: \"\" template-path: /path/to/my/template.tmpl","gomoddirectives#gomoddirectives":"Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.\nSince golangci-lint v1.39.0 Repository linters: settings: gomoddirectives: # Allow local `replace` directives. # Default: false replace-local: true # List of allowed `replace` directives. # Default: [] replace-allow-list: - launchpad.net/gocheck # Allow to not explain why the version has been retracted in the `retract` directives. # Default: false retract-allow-no-explanation: true # Forbid the use of the `exclude` directives. # Default: false exclude-forbidden: true # Forbid the use of the `ignore` directives (\u003e= go1.25). # Default: false ignore-forbidden: true # Forbid the use of the `toolchain` directive. # Default: false toolchain-forbidden: true # Defines a pattern to validate `toolchain` directive. # Default: '' (no match) toolchain-pattern: 'go1\\.23\\.\\d+$' # Forbid the use of the `tool` directives. # Default: false tool-forbidden: true # Forbid the use of the `godebug` directive. # Default: false go-debug-forbidden: true # Defines a pattern to validate `go` minimum version directive. # Default: '' (no match) go-version-pattern: '\\d\\.\\d+(\\.0)?'","gomodguard#gomodguard":"Allow and blocklist linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.\nSince golangci-lint v1.25.0 Repository linters: settings: gomodguard: allowed: # List of allowed modules. # Default: [] modules: - gopkg.in/yaml.v2 # List of allowed module domains. # Default: [] domains: - golang.org blocked: # List of blocked modules. # Default: [] modules: # Blocked module. - github.com/uudashr/go-module: # Recommended modules that should be used instead. (Optional) recommendations: - golang.org/x/mod # Reason why the recommended module should be used. (Optional) reason: \"`mod` is the official go.mod parser library.\" # List of blocked module version constraints. # Default: [] versions: # Blocked module with version constraint. - github.com/mitchellh/go-homedir: # Version constraint, see https://github.com/Masterminds/semver#basic-comparisons. version: \"\u003c 1.1.0\" # Reason why the version constraint exists. (Optional) reason: \"testing if blocked version constraint works.\" # Set to true to raise lint issues for packages that are loaded from a local path via replace directive. # Default: false local-replace-directives: false","goprintffuncname#goprintffuncname":"Checks that printf-like functions are named with f at the end.\nSince golangci-lint v1.23.0 Repository No settings available.","gosec#gosec":"Inspects source code for security problems.\nSince golangci-lint v1.0.0 Repository linters: settings: gosec: # To select a subset of rules to run. # Available rules: https://github.com/securego/gosec#available-rules # Default: [] - means include all rules includes: - G101 # Look for hard coded credentials - G102 # Bind to all interfaces - G103 # Audit the use of unsafe block - G104 # Audit errors not checked - G106 # Audit the use of ssh.InsecureIgnoreHostKey - G107 # Url provided to HTTP request as taint input - G108 # Profiling endpoint automatically exposed on /debug/pprof - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32 - G110 # Potential DoS vulnerability via decompression bomb - G111 # Potential directory traversal - G112 # Potential slowloris attack - G114 # Use of net/http serve function that has no support for setting timeouts - G115 # Potential integer overflow when converting between integer types - G201 # SQL query construction using format string - G202 # SQL query construction using string concatenation - G203 # Use of unescaped data in HTML templates - G204 # Audit use of command execution - G301 # Poor file permissions used when creating a directory - G302 # Poor file permissions used with chmod - G303 # Creating tempfile using a predictable path - G304 # File path provided as taint input - G305 # File traversal when extracting zip/tar archive - G306 # Poor file permissions used when writing to a new file - G307 # Poor file permissions used when creating a file with os.Create - G401 # Detect the usage of MD5 or SHA1 - G402 # Look for bad TLS connection settings - G403 # Ensure minimum RSA key length of 2048 bits - G404 # Insecure random number source (rand) - G405 # Detect the usage of DES or RC4 - G406 # Detect the usage of MD4 or RIPEMD160 - G501 # Import blocklist: crypto/md5 - G502 # Import blocklist: crypto/des - G503 # Import blocklist: crypto/rc4 - G504 # Import blocklist: net/http/cgi - G505 # Import blocklist: crypto/sha1 - G506 # Import blocklist: golang.org/x/crypto/md4 - G507 # Import blocklist: golang.org/x/crypto/ripemd160 - G601 # Implicit memory aliasing of items from a range statement - G602 # Slice access out of bounds # To specify a set of rules to explicitly exclude. # Available rules: https://github.com/securego/gosec#available-rules # Default: [] excludes: - G101 # Look for hard coded credentials - G102 # Bind to all interfaces - G103 # Audit the use of unsafe block - G104 # Audit errors not checked - G106 # Audit the use of ssh.InsecureIgnoreHostKey - G107 # Url provided to HTTP request as taint input - G108 # Profiling endpoint automatically exposed on /debug/pprof - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32 - G110 # Potential DoS vulnerability via decompression bomb - G111 # Potential directory traversal - G112 # Potential slowloris attack - G114 # Use of net/http serve function that has no support for setting timeouts - G115 # Potential integer overflow when converting between integer types - G201 # SQL query construction using format string - G202 # SQL query construction using string concatenation - G203 # Use of unescaped data in HTML templates - G204 # Audit use of command execution - G301 # Poor file permissions used when creating a directory - G302 # Poor file permissions used with chmod - G303 # Creating tempfile using a predictable path - G304 # File path provided as taint input - G305 # File traversal when extracting zip/tar archive - G306 # Poor file permissions used when writing to a new file - G307 # Poor file permissions used when creating a file with os.Create - G401 # Detect the usage of MD5 or SHA1 - G402 # Look for bad TLS connection settings - G403 # Ensure minimum RSA key length of 2048 bits - G404 # Insecure random number source (rand) - G405 # Detect the usage of DES or RC4 - G406 # Detect the usage of MD4 or RIPEMD160 - G501 # Import blocklist: crypto/md5 - G502 # Import blocklist: crypto/des - G503 # Import blocklist: crypto/rc4 - G504 # Import blocklist: net/http/cgi - G505 # Import blocklist: crypto/sha1 - G506 # Import blocklist: golang.org/x/crypto/md4 - G507 # Import blocklist: golang.org/x/crypto/ripemd160 - G601 # Implicit memory aliasing of items from a range statement - G602 # Slice access out of bounds # Filter out the issues with a lower severity than the given value. # Valid options are: low, medium, high. # Default: low severity: medium # Filter out the issues with a lower confidence than the given value. # Valid options are: low, medium, high. # Default: low confidence: medium # Concurrency value. # Default: the number of logical CPUs usable by the current process. concurrency: 12 # To specify the configuration of rules. config: # Globals are applicable to all rules. global: # If true, ignore #nosec in comments (and an alternative as well). # Default: false nosec: true # Add an alternative comment prefix to #nosec (both will work at the same time). # Default: \"\" \"#nosec\": \"#my-custom-nosec\" # Define whether nosec issues are counted as finding or not. # Default: false show-ignored: true # Audit mode enables addition checks that for normal code analysis might be too nosy. # Default: false audit: true G101: # Regexp pattern for variables and constants to find. # Default: \"(?i)passwd|pass|password|pwd|secret|token|pw|apiKey|bearer|cred\" pattern: \"(?i)example\" # If true, complain about all cases (even with low entropy). # Default: false ignore_entropy: false # Maximum allowed entropy of the string. # Default: \"80.0\" entropy_threshold: \"80.0\" # Maximum allowed value of entropy/string length. # Is taken into account if entropy \u003e= entropy_threshold/2. # Default: \"3.0\" per_char_threshold: \"3.0\" # Calculate entropy for first N chars of the string. # Default: \"16\" truncate: \"32\" # Additional functions to ignore while checking unhandled errors. # Following functions always ignored: # bytes.Buffer: # - Write # - WriteByte # - WriteRune # - WriteString # fmt: # - Print # - Printf # - Println # - Fprint # - Fprintf # - Fprintln # strings.Builder: # - Write # - WriteByte # - WriteRune # - WriteString # io.PipeWriter: # - CloseWithError # hash.Hash: # - Write # os: # - Unsetenv # Default: {} G104: fmt: - Fscanf G111: # Regexp pattern to find potential directory traversal. # Default: \"http\\\\.Dir\\\\(\\\"\\\\/\\\"\\\\)|http\\\\.Dir\\\\('\\\\/'\\\\)\" pattern: \"custom\\\\.Dir\\\\(\\\\)\" # Maximum allowed permissions mode for os.Mkdir and os.MkdirAll. # Default: \"0750\" G301: \"0750\" # Maximum allowed permissions mode for os.OpenFile and os.Chmod. # Default: \"0600\" G302: \"0600\" # Maximum allowed permissions mode for os.WriteFile and ioutil.WriteFile. # Default: \"0600\" G306: \"0600\"","gosmopolitan#gosmopolitan":"Report certain i18n/l10n anti-patterns in your Go codebase.\nSince golangci-lint v1.53.0 Repository linters: settings: gosmopolitan: # Allow and ignore `time.Local` usages. # # Default: false allow-time-local: true # List of fully qualified names in the `full/pkg/path.name` form, to act as \"i18n escape hatches\". # String literals inside call-like expressions to, or struct literals of those names, # are exempt from the writing system check. # # Default: [] escape-hatches: - 'github.com/nicksnyder/go-i18n/v2/i18n.Message' - 'example.com/your/project/i18n/markers.Raw' - 'example.com/your/project/i18n/markers.OK' - 'example.com/your/project/i18n/markers.TODO' - 'command-line-arguments.Simple' # List of Unicode scripts to watch for any usage in string literals. # https://pkg.go.dev/unicode#pkg-variables # # Default: [\"Han\"] watch-for-scripts: - Devanagari - Han - Hangul - Hiragana - Katakana","govet#govet":"Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes.\nSince golangci-lint v1.0.0 Autofix Repository linters: settings: govet: # Disable all analyzers. # Default: false disable-all: true # Enable analyzers by name. # (In addition to default: # appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas, # framepointer, httpresponse, ifaceassert, loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog, # stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr, # unusedresult # ). # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers. # Default: [] enable: # Check for missing values after append. - appends # Report mismatches between assembly files and Go declarations. - asmdecl # Check for useless assignments. - assign # Check for common mistakes using the sync/atomic package. - atomic # Check for non-64-bits-aligned arguments to sync/atomic functions. - atomicalign # Check for common mistakes involving boolean operators. - bools # Check //go:build and // +build directives. - buildtag # Detect some violations of the cgo pointer passing rules. - cgocall # Check for unkeyed composite literals. - composites # Check for locks erroneously passed by value. - copylocks # Check for calls of reflect.DeepEqual on error values. - deepequalerrors # Report common mistakes in defer statements. - defers # Check Go toolchain directives such as //go:debug. - directive # Report passing non-pointer or non-error values to errors.As. - errorsas # Find structs that would use less memory if their fields were sorted. - fieldalignment # Find calls to a particular function. - findcall # Report assembly that clobbers the frame pointer before saving it. - framepointer # Check format of addresses passed to net.Dial. - hostport # Report using Go 1.22 enhanced ServeMux patterns in older Go versions. - httpmux # Check for mistakes using HTTP responses. - httpresponse # Detect impossible interface-to-interface type assertions. - ifaceassert # Check references to loop variables from within nested functions. - loopclosure # Check cancel func returned by context.WithCancel is called. - lostcancel # Check for useless comparisons between functions and nil. - nilfunc # Check for redundant or impossible nil comparisons. - nilness # Check consistency of Printf format strings and arguments. - printf # Check for comparing reflect.Value values with == or reflect.DeepEqual. - reflectvaluecompare # Check for possible unintended shadowing of variables. - shadow # Check for shifts that equal or exceed the width of the integer. - shift # Check for unbuffered channel of os.Signal. - sigchanyzer # Check for invalid structured logging calls. - slog # Check the argument type of sort.Slice. - sortslice # Check signature of methods of well-known interfaces. - stdmethods # Report uses of too-new standard library symbols. - stdversion # Check for string(int) conversions. - stringintconv # Check that struct field tags conform to reflect.StructTag.Get. - structtag # Report calls to (*testing.T).Fatal from goroutines started by a test. - testinggoroutine # Check for common mistaken usages of tests and examples. - tests # Check for calls of (time.Time).Format or time.Parse with 2006-02-01. - timeformat # Report passing non-pointer or non-interface values to unmarshal. - unmarshal # Check for unreachable code. - unreachable # Check for invalid conversions of uintptr to unsafe.Pointer. - unsafeptr # Check for unused results of calls to some functions. - unusedresult # Checks for unused writes. - unusedwrite # Check for misuses of sync.WaitGroup. - waitgroup # Enable all analyzers. # Default: false enable-all: true # Disable analyzers by name. # (In addition to default # atomicalign, deepequalerrors, fieldalignment, findcall, nilness, reflectvaluecompare, shadow, sortslice, # timeformat, unusedwrite # ). # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers. # Default: [] disable: - appends - asmdecl - assign - atomic - atomicalign - bools - buildtag - cgocall - composites - copylocks - deepequalerrors - defers - directive - errorsas - fieldalignment - findcall - framepointer - hostport - httpmux - httpresponse - ifaceassert - loopclosure - lostcancel - nilfunc - nilness - printf - reflectvaluecompare - shadow - shift - sigchanyzer - slog - sortslice - stdmethods - stdversion - stringintconv - structtag - testinggoroutine - tests - timeformat - unmarshal - unreachable - unsafeptr - unusedresult - unusedwrite - waitgroup # Settings per analyzer. settings: # Analyzer name, run `go tool vet help` to see all analyzers. printf: # Comma-separated list of print function names to check (in addition to default, see `go tool vet help printf`). # Default: [] funcs: - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Infof - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Warnf - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Errorf - (github.com/golangci/golangci-lint/v2/pkg/logutils.Log).Fatalf shadow: # Whether to be strict about shadowing; can be noisy. # Default: false strict: true unusedresult: # Comma-separated list of functions whose results must be used. # (In addition to default: # context.WithCancel, context.WithDeadline, context.WithTimeout, context.WithValue, errors.New, fmt.Errorf, # fmt.Sprint, fmt.Sprintf, sort.Reverse # ). # Default: [] funcs: - pkg.MyFunc # Comma-separated list of names of methods of type func() string whose results must be used. # (In addition to default Error,String). # Default: [] stringmethods: - MyMethod","grouper#grouper":"Analyze expression groups.\nSince golangci-lint v1.44.0 Repository linters: settings: grouper: # Require the use of a single global 'const' declaration only. # Default: false const-require-single-const: true # Require the use of grouped global 'const' declarations. # Default: false const-require-grouping: true # Require the use of a single 'import' declaration only. # Default: false import-require-single-import: true # Require the use of grouped 'import' declarations. # Default: false import-require-grouping: true # Require the use of a single global 'type' declaration only. # Default: false type-require-single-type: true # Require the use of grouped global 'type' declarations. # Default: false type-require-grouping: true # Require the use of a single global 'var' declaration only. # Default: false var-require-single-var: true # Require the use of grouped global 'var' declarations. # Default: false var-require-grouping: true","iface#iface":"Detect the incorrect use of interfaces, helping developers avoid interface pollution.\nSince golangci-lint v1.62.0 Autofix Repository linters: settings: iface: # List of analyzers. # Default: [\"identical\"] enable: - identical # Identifies interfaces in the same package that have identical method sets. - unused # Identifies interfaces that are not used anywhere in the same package where the interface is defined. - opaque # Identifies functions that return interfaces, but the actual returned value is always a single concrete implementation. - unexported # Identifies interfaces that are not exported but are used in exported functions or methods. settings: unused: # List of packages path to exclude from the check. # Default: [] exclude: - github.com/example/log","importas#importas":"Enforces consistent import aliases.\nSince golangci-lint v1.38.0 Autofix Repository linters: settings: importas: # Do not allow unaliased imports of aliased packages. # Default: false no-unaliased: true # Do not allow non-required aliases. # Default: false no-extra-aliases: true # List of aliases # Default: [] alias: # Using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package. - pkg: knative.dev/serving/pkg/apis/serving/v1 alias: servingv1 # Using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package. - pkg: knative.dev/serving/pkg/apis/autoscaling/v1alpha1 alias: autoscalingv1alpha1 # You can specify the package path by regular expression, # and alias by regular expression expansion syntax like below. # See https://github.com/julz/importas#use-regular-expression for details. - pkg: knative.dev/serving/pkg/apis/(\\w+)/(v[\\w\\d]+) alias: $1$2 # An explicit empty alias can be used to ensure no aliases are used for a package. # This can be useful if `no-extra-aliases: true` doesn't fit your need. # Multiple packages can use an empty alias. - pkg: errors alias: \"\"","inamedparam#inamedparam":"Reports interfaces with unnamed method parameters.\nSince golangci-lint v1.55.0 Repository linters: settings: inamedparam: # Skips check for interface methods with only a single parameter. # Default: false skip-single-param: true","ineffassign#ineffassign":"Detects when assignments to existing variables are not used.\nSince golangci-lint v1.0.0 Repository linters: settings: ineffassign: # Check escaping variables of type error, may cause false positives. # Default: false check-escaping-errors: true","interfacebloat#interfacebloat":"A linter that checks the number of methods inside an interface.\nSince golangci-lint v1.49.0 Repository linters: settings: interfacebloat: # The maximum number of methods allowed for an interface. # Default: 10 max: 5","intrange#intrange":"Intrange is a linter to find places where for loops could make use of an integer range.\nSince golangci-lint v1.57.0 Autofix Repository No settings available.","iotamixing#iotamixing":"Checks if iotas are being used in const blocks with other non-iota declarations.\nSince golangci-lint v2.5.0 Repository linters: settings: iotamixing: # Whether to report individual consts rather than just the const block. # Default: false report-individual: true","ireturn#ireturn":"Accept Interfaces, Return Concrete Types.\nSince golangci-lint v1.43.0 Repository linters: settings: ireturn: # List of interfaces to allow. # Lists of the keywords and regular expressions matched to interface or package names can be used. # `allow` and `reject` settings cannot be used at the same time. # # Keywords: # - `empty` for `interface{}` # - `error` for errors # - `stdlib` for standard library # - `anon` for anonymous interfaces # - `generic` for generic interfaces added in go 1.18 # # Default: [anon, error, empty, stdlib] allow: - anon # You can specify idiomatic endings for interface - (or|er)$ # List of interfaces to reject. # Lists of the keywords and regular expressions matched to interface or package names can be used. # `allow` and `reject` settings cannot be used at the same time. # # Keywords: # - `empty` for `interface{}` # - `error` for errors # - `stdlib` for standard library # - `anon` for anonymous interfaces # - `generic` for generic interfaces added in go 1.18 # # Default: [] reject: - github.com\\/user\\/package\\/v4\\.Type","lll#lll":"Reports long lines.\nSince golangci-lint v1.8.0 linters: settings: lll: # Max line length, lines longer will be reported. # '\\t' is counted as 1 character by default, and can be changed with the tab-width option. # Default: 120. line-length: 120 # Tab width in spaces. # Default: 1 tab-width: 1","loggercheck#loggercheck":"Checks key value pairs for common logger libraries (kitlog,klog,logr,slog,zap).\nSince golangci-lint v1.49.0 Repository linters: settings: loggercheck: # Allow check for the github.com/go-kit/log library. # Default: true kitlog: false # Allow check for the k8s.io/klog/v2 library. # Default: true klog: false # Allow check for the github.com/go-logr/logr library. # Default: true logr: false # Allow check for the log/slog library. # Default: true slog: false # Allow check for the \"sugar logger\" from go.uber.org/zap library. # Default: true zap: false # Require all logging keys to be inlined constant strings. # Default: false require-string-key: true # Require printf-like format specifier (%s, %d for example) not present. # Default: false no-printf-like: true # List of custom rules to check against, where each rule is a single logger pattern, useful for wrapped loggers. # For example: https://github.com/timonwong/loggercheck/blob/7395ab86595781e33f7afba27ad7b55e6956ebcd/testdata/custom-rules.txt # Default: empty rules: - k8s.io/klog/v2.InfoS # package level exported functions - (github.com/go-logr/logr.Logger).Error # \"Methods\" - (*go.uber.org/zap.SugaredLogger).With # Also \"Methods\", but with a pointer receiver","maintidx#maintidx":"Maintidx measures the maintainability index of each function.\nSince golangci-lint v1.44.0 Repository linters: settings: maintidx: # Show functions with maintainability index lower than N. # A high index indicates better maintainability (it's kind of the opposite of complexity). # Default: 20 under: 100","makezero#makezero":"Find slice declarations with non-zero initial length.\nSince golangci-lint v1.34.0 Repository linters: settings: makezero: # Allow only slices initialized with a length of zero. # Default: false always: true","mirror#mirror":"Reports wrong mirror patterns of bytes/strings usage.\nSince golangci-lint v1.53.0 Autofix Repository No settings available.","misspell#misspell":"Finds commonly misspelled English words.\nSince golangci-lint v1.8.0 Autofix Repository linters: settings: misspell: # Correct spellings using locale preferences for US or UK. # Setting locale to US will correct the British spelling of 'colour' to 'color'. # Default is to use a neutral variety of English. locale: US # Typos to ignore. # Should be in lower case. # Default: [] ignore-rules: - someword # Extra word corrections. # `typo` and `correction` should only contain letters. # The words are case-insensitive. # Default: [] extra-words: - typo: \"iff\" correction: \"if\" - typo: \"cancelation\" correction: \"cancellation\" # Mode of the analysis: # - default: checks all the file content. # - restricted: checks only comments. # Default: \"\" mode: restricted","mnd#mnd":"An analyzer to detect magic numbers.\nSince golangci-lint v1.22.0 Repository linters: settings: mnd: # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description. # Default: [\"argument\", \"case\", \"condition\", \"operation\", \"return\", \"assign\"] checks: - argument - case - condition - operation - return - assign # List of numbers to exclude from analysis. # The numbers should be written as string. # Values always ignored: \"1\", \"1.0\", \"0\" and \"0.0\". # Default: [] ignored-numbers: - '0666' - '0755' - '42' # List of file patterns to exclude from analysis. # Values always ignored: `.+_test.go`. # Default: [] ignored-files: - 'magic1_.+\\.go$' # List of function patterns to exclude from analysis. # Following functions are always ignored: `time.Date`, # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`, # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`. # Default: [] ignored-functions: - '^math\\.' - '^http\\.StatusText$'","modernize#modernize":"A suite of analyzers that suggest simplifications to Go code, using modern language and library features.\nSince golangci-lint v2.6.0 New Repository linters: settings: modernize: # List of analyzers to disable. # By default, all analyzers are enabled. disable: # Replace interface{} with any. - any # Replace for-range over b.N with b.Loop. - bloop # Replace []byte(fmt.Sprintf) with fmt.Appendf. - fmtappendf # Remove redundant re-declaration of loop variables. - forvar # Replace explicit loops over maps with calls to maps package. - mapsloop # Replace if/else statements with calls to min or max. - minmax # Simplify code by using go1.26's new(expr). - newexpr # Suggest replacing omitempty with omitzero for struct fields. - omitzero # Replace 3-clause for loops with for-range over integers. - rangeint # Replace reflect.TypeOf(x) with TypeFor[T](). - reflecttypefor # Replace loops with slices.Contains or slices.ContainsFunc. - slicescontains # Replace sort.Slice with slices.Sort for basic types. - slicessort # Use iterators instead of Len/At-style APIs. - stditerators # Replace HasPrefix/TrimPrefix with CutPrefix. - stringscutprefix # Replace ranging over Split/Fields with SplitSeq/FieldsSeq. - stringsseq # Replace += with strings.Builder. - stringsbuilder # Replace context.WithCancel with t.Context in tests. - testingcontext # Replace wg.Add(1)/go/wg.Done() with wg.Go. - waitgroup","musttag#musttag":"Enforce field tags in (un)marshaled structs.\nSince golangci-lint v1.51.0 Repository linters: settings: musttag: # A set of custom functions to check in addition to the builtin ones. # Default: json, xml, gopkg.in/yaml.v3, BurntSushi/toml, mitchellh/mapstructure, jmoiron/sqlx functions: # The full name of the function, including the package. - name: github.com/hashicorp/hcl/v2/hclsimple.DecodeFile # The struct tag whose presence should be ensured. tag: hcl # The position of the argument to check. arg-pos: 2","nakedret#nakedret":"Checks that functions with naked returns are not longer than a maximum size (can be zero).\nSince golangci-lint v1.19.0 Autofix Repository linters: settings: nakedret: # Make an issue if func has more lines of code than this setting, and it has naked returns. # Default: 30 max-func-lines: 31","nestif#nestif":"Reports deeply nested if statements.\nSince golangci-lint v1.25.0 Repository linters: settings: nestif: # Minimal complexity of if statements to report. # Default: 5 min-complexity: 4","nilerr#nilerr":"Find the code that returns nil even if it checks that the error is not nil.\nSince golangci-lint v1.38.0 Repository No settings available.","nilnesserr#nilnesserr":"Reports constructs that checks for err != nil, but returns a different nil value error. Powered by nilness and nilerr.\nSince golangci-lint v1.63.0 Repository No settings available.","nilnil#nilnil":"Checks that there is no simultaneous return of nil error and an invalid value.\nSince golangci-lint v1.43.0 Repository linters: settings: nilnil: # To check functions with only two return values (`return nil, nil`). # If disabled then returns like `return nil, nil, ..., nil` are supported. # Default: true only-two: false # In addition, detect opposite situation (simultaneous return of non-nil error and valid value). # E.g, `return clone, fh.indexer.Update(clone)` will be considered as invalid. # Default: false detect-opposite: true # List of return types to check. # Default: [\"chan\", \"func\", \"iface\", \"map\", \"ptr\", \"uintptr\", \"unsafeptr\"] checked-types: - chan - func - iface - map - ptr - uintptr - unsafeptr","nlreturn#nlreturn":"Checks for a new line before return and branch statements to increase code clarity.\nSince golangci-lint v1.30.0 Autofix Repository linters: settings: nlreturn: # Size of the block (including return statement that is still \"OK\"), # so no return split required. # Default: 1 block-size: 2","noctx#noctx":"Detects function and method with missing usage of context.Context.\nSince golangci-lint v1.28.0 Repository No settings available.","noinlineerr#noinlineerr":"Disallows inline error handling (if err := ...; err != nil {).\nSince golangci-lint v2.2.0 Repository No settings available.","nolintlint#nolintlint":"Reports ill-formed or insufficient nolint directives.\nSince golangci-lint v1.26.0 Autofix Repository linters: settings: nolintlint: # Disable to ensure that all nolint directives actually have an effect. # Default: false allow-unused: true # Exclude following linters from requiring an explanation. # Default: [] allow-no-explanation: [] # Enable to require an explanation of nonzero length after each nolint directive. # Default: false require-explanation: true # Enable to require nolint directives to mention the specific linter being suppressed. # Default: false require-specific: true","nonamedreturns#nonamedreturns":"Reports all named returns.\nSince golangci-lint v1.46.0 Repository linters: settings: nonamedreturns: # Report named error if it is assigned inside defer. # Default: false report-error-in-defer: true","nosprintfhostport#nosprintfhostport":"Checks for misuse of Sprintf to construct a host with port in a URL.\nSince golangci-lint v1.46.0 Repository No settings available.","paralleltest#paralleltest":"Detects missing usage of t.Parallel() method in your Go test.\nSince golangci-lint v1.33.0 Repository linters: settings: paralleltest: # Ignore missing calls to `t.Parallel()` and only report incorrect uses of it. # Default: false ignore-missing: true # Ignore missing calls to `t.Parallel()` in subtests. Top-level tests are # still required to have `t.Parallel`, but subtests are allowed to skip it. # Default: false ignore-missing-subtests: true","perfsprint#perfsprint":"Checks that fmt.Sprintf can be replaced with a faster alternative.\nSince golangci-lint v1.55.0 Autofix Repository linters: settings: perfsprint: # Enable/disable optimization of integer formatting. # Default: true integer-format: false # Optimizes even if it requires an int or uint type cast. # Default: true int-conversion: false # Enable/disable optimization of error formatting. # Default: true error-format: false # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors. # Default: false err-error: true # Optimizes `fmt.Errorf`. # Default: true errorf: false # Enable/disable optimization of string formatting. # Default: true string-format: false # Optimizes `fmt.Sprintf` with only one argument. # Default: true sprintf1: false # Optimizes into strings concatenation. # Default: true strconcat: false # Enable/disable optimization of bool formatting. # Default: true bool-format: false # Enable/disable optimization of hex formatting. # Default: true hex-format: false # Enable/disable optimization of concat loop. # Default: true concat-loop: false # Optimization of `concat-loop` even with other operations. # Default: false loop-other-ops: true","prealloc#prealloc":"Find slice declarations that could potentially be pre-allocated.\nSince golangci-lint v1.19.0 Repository linters: settings: prealloc: # IMPORTANT: we don't recommend using this linter before doing performance profiling. # For most programs usage of prealloc will be a premature optimization. # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them. # Default: true simple: false # Report pre-allocation suggestions on range loops. # Default: true range-loops: false # Report pre-allocation suggestions on for loops. # Default: false for-loops: true","predeclared#predeclared":"Find code that shadows one of Go's predeclared identifiers.\nSince golangci-lint v1.35.0 Repository linters: settings: predeclared: # List of predeclared identifiers to not report on. # Default: [] ignore: - new - int # Include method names and field names in checks. # Default: false qualified-name: true","promlinter#promlinter":"Check Prometheus metrics naming via promlint.\nSince golangci-lint v1.40.0 Repository linters: settings: promlinter: # Promlinter cannot infer all metrics name in static analysis. # Enable strict mode will also include the errors caused by failing to parse the args. # Default: false strict: true # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage. # Default: [] disabled-linters: # Help detects issues related to the help text for a metric. - Help # MetricUnits detects issues with metric unit names. - MetricUnits # Counter detects issues specific to counters, as well as patterns that should only be used with counters. - Counter # HistogramSummaryReserved detects when other types of metrics use names or labels reserved for use by histograms and/or summaries. - HistogramSummaryReserved # MetricTypeInName detects when metric types are included in the metric name. - MetricTypeInName # ReservedChars detects colons in metric names. - ReservedChars # CamelCase detects metric names and label names written in camelCase. - CamelCase # UnitAbbreviations detects abbreviated units in the metric name. - UnitAbbreviations","protogetter#protogetter":"Reports direct reads from proto message fields when getters should be used.\nSince golangci-lint v1.55.0 Autofix Repository linters: settings: protogetter: # Skip files generated by specified generators from the checking. # Checks only the file's initial comment, which must follow the format: \"// Code generated by \". # Files generated by protoc-gen-go, protoc-gen-go-grpc, and protoc-gen-grpc-gateway are always excluded automatically. # Default: [] skip-generated-by: [\"protoc-gen-go-my-own-generator\"] # Skip files matching the specified glob pattern from the checking. # Default: [] skip-files: - \"*.pb.go\" - \"*/vendor/*\" - \"/full/path/to/file.go\" # Skip any generated files from the checking. # Default: false skip-any-generated: true # Skip first argument of append function. # Default: false replace-first-arg-in-append: true","reassign#reassign":"Checks that package variables are not reassigned.\nSince golangci-lint v1.49.0 Repository linters: settings: reassign: # Patterns for global variable names that are checked for reassignment. # See https://github.com/curioswitch/go-reassign#usage # Default: [\"EOF\", \"Err.*\"] patterns: - \".*\"","recvcheck#recvcheck":"Checks for receiver type consistency.\nSince golangci-lint v1.62.0 Repository linters: settings: recvcheck: # Disables the built-in method exclusions: # - `MarshalText` # - `MarshalJSON` # - `MarshalYAML` # - `MarshalXML` # - `MarshalBinary` # - `GobEncode` # Default: false disable-builtin: true # User-defined method exclusions. # The format is `struct_name.method_name` (ex: `Foo.MethodName`). # A wildcard `*` can use as a struct name (ex: `*.MethodName`). # Default: [] exclusions: - \"*.Value\"","revive#revive":"Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.\nSince golangci-lint v1.37.0 Autofix Repository linters: settings: revive: # Maximum number of open files at the same time. # See https://github.com/mgechev/revive#command-line-flags # Defaults to unlimited. max-open-files: 2048 # Sets the default severity. # See https://github.com/mgechev/revive#configuration # Default: warning severity: error # Enable all available rules. # Default: false enable-all-rules: true # Enable validation of comment directives. # See https://github.com/mgechev/revive#comment-directives directives: - name: specify-disable-reason severity: error # Sets the default failure confidence. # This means that linting errors with less than 0.8 confidence will be ignored. # Default: 0.8 confidence: 0.1 # Revive handles the default rules in a way that can be unexpected: # - If there are no explicit rules, the default rules are used. # - If there is at least one explicit rule, the default rules are not used. # Run `GL_DEBUG=revive golangci-lint run --enable-only=revive` to see default, all available rules, and enabled rules. rules: # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#add-constant - name: add-constant severity: warning disabled: false exclude: [\"\"] arguments: - max-lit-count: \"3\" allow-strs: '\"\"' allow-ints: \"0,1,2\" allow-floats: \"0.0,0.,1.0,1.,2.0,2.\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#argument-limit - name: argument-limit severity: warning disabled: false exclude: [\"\"] arguments: [4] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#atomic - name: atomic severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#banned-characters - name: banned-characters severity: warning disabled: false exclude: [\"\"] arguments: [\"Ω\", \"Σ\", \"σ\", \"7\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#bare-return - name: bare-return severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#blank-imports - name: blank-imports severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#bool-literal-in-expr - name: bool-literal-in-expr severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#call-to-gc - name: call-to-gc severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#cognitive-complexity - name: cognitive-complexity severity: warning disabled: false exclude: [\"\"] arguments: [7] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#comment-spacings - name: comment-spacings severity: warning disabled: false exclude: [\"\"] arguments: - mypragma - otherpragma # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#comments-density - name: comments-density severity: warning disabled: false exclude: [\"\"] arguments: [15] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#confusing-naming - name: confusing-naming severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#confusing-results - name: confusing-results severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#constant-logical-expr - name: constant-logical-expr severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#context-as-argument - name: context-as-argument severity: warning disabled: false exclude: [\"\"] arguments: - allow-types-before: \"*testing.T,*github.com/user/repo/testing.Harness\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#context-keys-type - name: context-keys-type severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#cyclomatic - name: cyclomatic severity: warning disabled: false exclude: [\"\"] arguments: [3] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#datarace - name: datarace severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#deep-exit - name: deep-exit severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#defer - name: defer severity: warning disabled: false exclude: [\"\"] arguments: - \"call-chain\" - \"loop\" - \"method-call\" - \"recover\" - \"immediate-recover\" - \"return\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#dot-imports - name: dot-imports severity: warning disabled: false exclude: [\"\"] arguments: - allowed-packages: [\"github.com/onsi/ginkgo/v2\", \"github.com/onsi/gomega\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#duplicated-imports - name: duplicated-imports severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#early-return - name: early-return severity: warning disabled: false exclude: [\"\"] arguments: - \"preserve-scope\" - \"allow-jump\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#empty-block - name: empty-block severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#empty-lines - name: empty-lines severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-map-style - name: enforce-map-style severity: warning disabled: false exclude: [\"\"] arguments: - \"make\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-repeated-arg-type-style - name: enforce-repeated-arg-type-style severity: warning disabled: false exclude: [\"\"] arguments: - \"short\" # Or this parameter: - func-arg-style: \"full\" func-ret-val-style: \"short\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-slice-style - name: enforce-slice-style severity: warning disabled: false exclude: [\"\"] arguments: - \"make\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#enforce-switch-style - name: enforce-switch-style severity: warning disabled: false exclude: [\"\"] arguments: [\"allowNoDefault\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#error-naming - name: error-naming severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#error-return - name: error-return severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#error-strings - name: error-strings severity: warning disabled: false exclude: [\"\"] arguments: - \"xerrors.New\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#errorf - name: errorf severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#exported - name: exported severity: warning disabled: false exclude: [\"\"] arguments: - \"check-private-receivers\" - \"disable-stuttering-check\" - \"say-repetitive-instead-of-stutters\" - \"check-public-interface\" - \"disable-checks-on-constants\" - \"disable-checks-on-functions\" - \"disable-checks-on-methods\" - \"disable-checks-on-types\" - \"disable-checks-on-variables\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#file-header - name: file-header severity: warning disabled: false exclude: [\"\"] arguments: - This is the text that must appear at the top of source files. # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#file-length-limit - name: file-length-limit severity: warning disabled: false exclude: [\"\"] arguments: - max: 100 skip-comments: true skip-blank-lines: true # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#filename-format - name: filename-format severity: warning disabled: false exclude: [\"\"] arguments: - \"^[_a-z][_a-z0-9]*\\\\.go$\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#flag-parameter - name: flag-parameter severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#function-length - name: function-length severity: warning disabled: false exclude: [\"\"] arguments: [10, 0] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#function-result-limit - name: function-result-limit severity: warning disabled: false exclude: [\"\"] arguments: [3] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#get-return - name: get-return severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-branches - name: identical-branches severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-ifelseif-branches - name: identical-ifelseif-branches severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-ifelseif-conditions - name: identical-ifelseif-conditions severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-switch-branches - name: identical-switch-branches severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#identical-switch-conditions - name: identical-switch-conditions severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#if-return - name: if-return severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#import-alias-naming - name: import-alias-naming severity: warning disabled: false exclude: [\"\"] arguments: - \"^[a-z][a-z0-9]{0,}$\" # Or this parameter: - allow-regex: \"^[a-z][a-z0-9]{0,}$\" deny-regex: '^v\\d+$' # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#import-shadowing - name: import-shadowing severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#imports-blocklist - name: imports-blocklist severity: warning disabled: false exclude: [\"\"] arguments: - \"crypto/md5\" - \"crypto/sha1\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#increment-decrement - name: increment-decrement severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#indent-error-flow - name: indent-error-flow severity: warning disabled: false exclude: [\"\"] arguments: - \"preserve-scope\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#line-length-limit - name: line-length-limit severity: warning disabled: false exclude: [\"\"] arguments: [80] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#max-control-nesting - name: max-control-nesting severity: warning disabled: false exclude: [\"\"] arguments: [3] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#max-public-structs - name: max-public-structs severity: warning disabled: false exclude: [\"\"] arguments: [3] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#modifies-parameter - name: modifies-parameter severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#modifies-value-receiver - name: modifies-value-receiver severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#nested-structs - name: nested-structs severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#optimize-operands-order - name: optimize-operands-order severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#package-comments - name: package-comments severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#package-directory-mismatch - name: package-directory-mismatch severity: warning disabled: false exclude: [\"\"] arguments: - ignore-directories: [\"testcases\", \"testinfo\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#range - name: range severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#range-val-address - name: range-val-address severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#range-val-in-closure - name: range-val-in-closure severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#receiver-naming - name: receiver-naming severity: warning disabled: false exclude: [\"\"] arguments: - max-length: 2 # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redefines-builtin-id - name: redefines-builtin-id severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redundant-build-tag - name: redundant-build-tag severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redundant-import-alias - name: redundant-import-alias severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#redundant-test-main-exit - name: redundant-test-main-exit severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#string-format - name: string-format severity: warning disabled: false exclude: [\"\"] arguments: - - 'core.WriteError[1].Message' - '/^([^A-Z]|$)/' - must not start with a capital letter - - 'fmt.Errorf[0]' - '/(^|[^\\.!?])$/' - must not end in punctuation - - panic - '/^[^\\n]*$/' - must not contain line breaks # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#string-of-int - name: string-of-int severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#struct-tag - name: struct-tag severity: warning disabled: false exclude: [\"\"] arguments: - \"json,inline\" - \"bson,outline,gnu\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#superfluous-else - name: superfluous-else severity: warning disabled: false exclude: [\"\"] arguments: - \"preserve-scope\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#time-date - name: time-date severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#time-equal - name: time-equal severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#time-naming - name: time-naming severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unchecked-type-assertion - name: unchecked-type-assertion severity: warning disabled: false exclude: [\"\"] arguments: - accept-ignored-assertion-result: true # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unconditional-recursion - name: unconditional-recursion severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unexported-naming - name: unexported-naming severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unexported-return - name: unexported-return severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unhandled-error - name: unhandled-error severity: warning disabled: false exclude: [\"\"] arguments: - \"^fmt.Printf\" - \"myFunction\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unnecessary-format - name: unnecessary-format severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unnecessary-stmt - name: unnecessary-stmt severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unreachable-code - name: unreachable-code severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unsecure-url-scheme - name: unsecure-url-scheme severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unused-parameter - name: unused-parameter severity: warning disabled: false exclude: [\"\"] arguments: - allow-regex: \"^_\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#unused-receiver - name: unused-receiver severity: warning disabled: false exclude: [\"\"] arguments: - allow-regex: \"^_\" # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-any - name: use-any severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-errors-new - name: use-errors-new severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-fmt-print - name: use-fmt-print severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#use-waitgroup-go - name: use-waitgroup-go severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#useless-break - name: useless-break severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#useless-fallthrough - name: useless-fallthrough severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#var-declaration - name: var-declaration severity: warning disabled: false exclude: [\"\"] # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#var-naming - name: var-naming severity: warning disabled: false exclude: [\"\"] arguments: - [\"ID\"] # AllowList - [\"VM\"] # DenyList - - skip-initialism-name-checks: true upper-case-const: true skip-package-name-checks: true extra-bad-package-names: - helpers - models # https://github.com/mgechev/revive/blob/HEAD/RULES_DESCRIPTIONS.md#waitgroup-by-value - name: waitgroup-by-value severity: warning disabled: false exclude: [\"\"]","rowserrcheck#rowserrcheck":"Checks whether Rows.Err of rows is checked successfully.\nSince golangci-lint v1.23.0 Repository linters: settings: rowserrcheck: # database/sql is always checked. # Default: [] packages: - github.com/jmoiron/sqlx","sloglint#sloglint":"Ensure consistent code style when using log/slog.\nSince golangci-lint v1.55.0 Autofix Repository linters: settings: sloglint: # Enforce not mixing key-value pairs and attributes. # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-mixed-arguments # Default: true no-mixed-args: false # Enforce using key-value pairs only (overrides no-mixed-args, incompatible with attr-only). # https://github.com/go-simpler/sloglint?tab=readme-ov-file#key-value-pairs-only # Default: false kv-only: true # Enforce using attributes only (overrides no-mixed-args, incompatible with kv-only). # https://github.com/go-simpler/sloglint?tab=readme-ov-file#attributes-only # Default: false attr-only: true # Enforce not using global loggers. # Values: # - \"\": disabled # - \"all\": report all global loggers # - \"default\": report only the default slog logger # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-global # Default: \"\" no-global: \"all\" # Enforce using methods that accept a context. # Values: # - \"\": disabled # - \"all\": report all contextless calls # - \"scope\": report only if a context exists in the scope of the outermost function # https://github.com/go-simpler/sloglint?tab=readme-ov-file#context-only # Default: \"\" context: \"all\" # Enforce using static values for log messages. # https://github.com/go-simpler/sloglint?tab=readme-ov-file#static-messages # Default: false static-msg: true # Enforce message style. # Values: lowercased, capitalized # https://github.com/go-simpler/sloglint?tab=readme-ov-file#message-style # Default: \"\" msg-style: capitalized # Enforce using constants instead of raw keys. # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-raw-keys # Default: false no-raw-keys: true # Enforce key naming convention. # Values: snake, kebab, camel, pascal # https://github.com/go-simpler/sloglint?tab=readme-ov-file#key-naming-convention # Default: \"\" key-naming-case: snake # Enforce not using specific keys. # https://github.com/go-simpler/sloglint?tab=readme-ov-file#forbidden-keys # Default: [] forbidden-keys: - time - level - msg - source - foo # Enforce putting arguments on separate lines. # https://github.com/go-simpler/sloglint?tab=readme-ov-file#arguments-on-separate-lines # Default: false args-on-sep-lines: true","spancheck#spancheck":"Checks for mistakes with OpenTelemetry/Census spans.\nSince golangci-lint v1.56.0 Repository linters: settings: spancheck: # Checks to enable. # Options include: # - `end`: check that `span.End()` is called # - `record-error`: check that `span.RecordError(err)` is called when an error is returned # - `set-status`: check that `span.SetStatus(codes.Error, msg)` is called when an error is returned # Default: [\"end\"] checks: - end - record-error - set-status # A list of regexes for function signatures that silence `record-error` and `set-status` reports # if found in the call path to a returned error. # https://github.com/jjti/go-spancheck#ignore-check-signatures # Default: [] ignore-check-signatures: - \"telemetry.RecordError\" # A list of regexes for additional function signatures that create spans. # This is useful if you have a utility method to create spans. # Each entry should be of the form `:`, where `telemetry-type` can be `opentelemetry` or `opencensus`. # https://github.com/jjti/go-spancheck#extra-start-span-signatures # Default: [] extra-start-span-signatures: - \"github.com/user/repo/telemetry/trace.Start:opentelemetry\"","sqlclosecheck#sqlclosecheck":"Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed.\nSince golangci-lint v1.28.0 Repository No settings available.","staticcheck#staticcheck":"It's the set of rules from staticcheck.\nSince golangci-lint v1.0.0 Autofix Repository linters: settings: staticcheck: # https://staticcheck.dev/docs/configuration/options/#dot_import_whitelist # Default: [\"github.com/mmcloughlin/avo/build\", \"github.com/mmcloughlin/avo/operand\", \"github.com/mmcloughlin/avo/reg\"] dot-import-whitelist: - fmt # https://staticcheck.dev/docs/configuration/options/#initialisms # Default: [\"ACL\", \"API\", \"ASCII\", \"CPU\", \"CSS\", \"DNS\", \"EOF\", \"GUID\", \"HTML\", \"HTTP\", \"HTTPS\", \"ID\", \"IP\", \"JSON\", \"QPS\", \"RAM\", \"RPC\", \"SLA\", \"SMTP\", \"SQL\", \"SSH\", \"TCP\", \"TLS\", \"TTL\", \"UDP\", \"UI\", \"GID\", \"UID\", \"UUID\", \"URI\", \"URL\", \"UTF8\", \"VM\", \"XML\", \"XMPP\", \"XSRF\", \"XSS\", \"SIP\", \"RTP\", \"AMQP\", \"DB\", \"TS\"] initialisms: [\"ACL\", \"API\", \"ASCII\", \"CPU\", \"CSS\", \"DNS\", \"EOF\", \"GUID\", \"HTML\", \"HTTP\", \"HTTPS\", \"ID\", \"IP\", \"JSON\", \"QPS\", \"RAM\", \"RPC\", \"SLA\", \"SMTP\", \"SQL\", \"SSH\", \"TCP\", \"TLS\", \"TTL\", \"UDP\", \"UI\", \"GID\", \"UID\", \"UUID\", \"URI\", \"URL\", \"UTF8\", \"VM\", \"XML\", \"XMPP\", \"XSRF\", \"XSS\", \"SIP\", \"RTP\", \"AMQP\", \"DB\", \"TS\"] # https://staticcheck.dev/docs/configuration/options/#http_status_code_whitelist # Default: [\"200\", \"400\", \"404\", \"500\"] http-status-code-whitelist: [\"200\", \"400\", \"404\", \"500\"] # SAxxxx checks in https://staticcheck.dev/docs/configuration/options/#checks # Example (to disable some checks): [ \"all\", \"-SA1000\", \"-SA1001\"] # Run `GL_DEBUG=staticcheck golangci-lint run --enable=staticcheck` to see all available checks and enabled by config checks. # Default: [\"all\", \"-ST1000\", \"-ST1003\", \"-ST1016\", \"-ST1020\", \"-ST1021\", \"-ST1022\"] checks: # Invalid regular expression. # https://staticcheck.dev/docs/checks/#SA1000 - SA1000 # Invalid template. # https://staticcheck.dev/docs/checks/#SA1001 - SA1001 # Invalid format in 'time.Parse'. # https://staticcheck.dev/docs/checks/#SA1002 - SA1002 # Unsupported argument to functions in 'encoding/binary'. # https://staticcheck.dev/docs/checks/#SA1003 - SA1003 # Suspiciously small untyped constant in 'time.Sleep'. # https://staticcheck.dev/docs/checks/#SA1004 - SA1004 # Invalid first argument to 'exec.Command'. # https://staticcheck.dev/docs/checks/#SA1005 - SA1005 # 'Printf' with dynamic first argument and no further arguments. # https://staticcheck.dev/docs/checks/#SA1006 - SA1006 # Invalid URL in 'net/url.Parse'. # https://staticcheck.dev/docs/checks/#SA1007 - SA1007 # Non-canonical key in 'http.Header' map. # https://staticcheck.dev/docs/checks/#SA1008 - SA1008 # '(*regexp.Regexp).FindAll' called with 'n == 0', which will always return zero results. # https://staticcheck.dev/docs/checks/#SA1010 - SA1010 # Various methods in the \"strings\" package expect valid UTF-8, but invalid input is provided. # https://staticcheck.dev/docs/checks/#SA1011 - SA1011 # A nil 'context.Context' is being passed to a function, consider using 'context.TODO' instead. # https://staticcheck.dev/docs/checks/#SA1012 - SA1012 # 'io.Seeker.Seek' is being called with the whence constant as the first argument, but it should be the second. # https://staticcheck.dev/docs/checks/#SA1013 - SA1013 # Non-pointer value passed to 'Unmarshal' or 'Decode'. # https://staticcheck.dev/docs/checks/#SA1014 - SA1014 # Using 'time.Tick' in a way that will leak. Consider using 'time.NewTicker', and only use 'time.Tick' in tests, commands and endless functions. # https://staticcheck.dev/docs/checks/#SA1015 - SA1015 # Trapping a signal that cannot be trapped. # https://staticcheck.dev/docs/checks/#SA1016 - SA1016 # Channels used with 'os/signal.Notify' should be buffered. # https://staticcheck.dev/docs/checks/#SA1017 - SA1017 # 'strings.Replace' called with 'n == 0', which does nothing. # https://staticcheck.dev/docs/checks/#SA1018 - SA1018 # Using a deprecated function, variable, constant or field. # https://staticcheck.dev/docs/checks/#SA1019 - SA1019 # Using an invalid host:port pair with a 'net.Listen'-related function. # https://staticcheck.dev/docs/checks/#SA1020 - SA1020 # Using 'bytes.Equal' to compare two 'net.IP'. # https://staticcheck.dev/docs/checks/#SA1021 - SA1021 # Modifying the buffer in an 'io.Writer' implementation. # https://staticcheck.dev/docs/checks/#SA1023 - SA1023 # A string cutset contains duplicate characters. # https://staticcheck.dev/docs/checks/#SA1024 - SA1024 # It is not possible to use '(*time.Timer).Reset''s return value correctly. # https://staticcheck.dev/docs/checks/#SA1025 - SA1025 # Cannot marshal channels or functions. # https://staticcheck.dev/docs/checks/#SA1026 - SA1026 # Atomic access to 64-bit variable must be 64-bit aligned. # https://staticcheck.dev/docs/checks/#SA1027 - SA1027 # 'sort.Slice' can only be used on slices. # https://staticcheck.dev/docs/checks/#SA1028 - SA1028 # Inappropriate key in call to 'context.WithValue'. # https://staticcheck.dev/docs/checks/#SA1029 - SA1029 # Invalid argument in call to a 'strconv' function. # https://staticcheck.dev/docs/checks/#SA1030 - SA1030 # Overlapping byte slices passed to an encoder. # https://staticcheck.dev/docs/checks/#SA1031 - SA1031 # Wrong order of arguments to 'errors.Is'. # https://staticcheck.dev/docs/checks/#SA1032 - SA1032 # 'sync.WaitGroup.Add' called inside the goroutine, leading to a race condition. # https://staticcheck.dev/docs/checks/#SA2000 - SA2000 # Empty critical section, did you mean to defer the unlock?. # https://staticcheck.dev/docs/checks/#SA2001 - SA2001 # Called 'testing.T.FailNow' or 'SkipNow' in a goroutine, which isn't allowed. # https://staticcheck.dev/docs/checks/#SA2002 - SA2002 # Deferred 'Lock' right after locking, likely meant to defer 'Unlock' instead. # https://staticcheck.dev/docs/checks/#SA2003 - SA2003 # 'TestMain' doesn't call 'os.Exit', hiding test failures. # https://staticcheck.dev/docs/checks/#SA3000 - SA3000 # Assigning to 'b.N' in benchmarks distorts the results. # https://staticcheck.dev/docs/checks/#SA3001 - SA3001 # Binary operator has identical expressions on both sides. # https://staticcheck.dev/docs/checks/#SA4000 - SA4000 # '\u0026*x' gets simplified to 'x', it does not copy 'x'. # https://staticcheck.dev/docs/checks/#SA4001 - SA4001 # Comparing unsigned values against negative values is pointless. # https://staticcheck.dev/docs/checks/#SA4003 - SA4003 # The loop exits unconditionally after one iteration. # https://staticcheck.dev/docs/checks/#SA4004 - SA4004 # Field assignment that will never be observed. Did you mean to use a pointer receiver?. # https://staticcheck.dev/docs/checks/#SA4005 - SA4005 # A value assigned to a variable is never read before being overwritten. Forgotten error check or dead code?. # https://staticcheck.dev/docs/checks/#SA4006 - SA4006 # The variable in the loop condition never changes, are you incrementing the wrong variable?. # https://staticcheck.dev/docs/checks/#SA4008 - SA4008 # A function argument is overwritten before its first use. # https://staticcheck.dev/docs/checks/#SA4009 - SA4009 # The result of 'append' will never be observed anywhere. # https://staticcheck.dev/docs/checks/#SA4010 - SA4010 # Break statement with no effect. Did you mean to break out of an outer loop?. # https://staticcheck.dev/docs/checks/#SA4011 - SA4011 # Comparing a value against NaN even though no value is equal to NaN. # https://staticcheck.dev/docs/checks/#SA4012 - SA4012 # Negating a boolean twice ('!!b') is the same as writing 'b'. This is either redundant, or a typo. # https://staticcheck.dev/docs/checks/#SA4013 - SA4013 # An if/else if chain has repeated conditions and no side-effects; if the condition didn't match the first time, it won't match the second time, either. # https://staticcheck.dev/docs/checks/#SA4014 - SA4014 # Calling functions like 'math.Ceil' on floats converted from integers doesn't do anything useful. # https://staticcheck.dev/docs/checks/#SA4015 - SA4015 # Certain bitwise operations, such as 'x ^ 0', do not do anything useful. # https://staticcheck.dev/docs/checks/#SA4016 - SA4016 # Discarding the return values of a function without side effects, making the call pointless. # https://staticcheck.dev/docs/checks/#SA4017 - SA4017 # Self-assignment of variables. # https://staticcheck.dev/docs/checks/#SA4018 - SA4018 # Multiple, identical build constraints in the same file. # https://staticcheck.dev/docs/checks/#SA4019 - SA4019 # Unreachable case clause in a type switch. # https://staticcheck.dev/docs/checks/#SA4020 - SA4020 # \"x = append(y)\" is equivalent to \"x = y\". # https://staticcheck.dev/docs/checks/#SA4021 - SA4021 # Comparing the address of a variable against nil. # https://staticcheck.dev/docs/checks/#SA4022 - SA4022 # Impossible comparison of interface value with untyped nil. # https://staticcheck.dev/docs/checks/#SA4023 - SA4023 # Checking for impossible return value from a builtin function. # https://staticcheck.dev/docs/checks/#SA4024 - SA4024 # Integer division of literals that results in zero. # https://staticcheck.dev/docs/checks/#SA4025 - SA4025 # Go constants cannot express negative zero. # https://staticcheck.dev/docs/checks/#SA4026 - SA4026 # '(*net/url.URL).Query' returns a copy, modifying it doesn't change the URL. # https://staticcheck.dev/docs/checks/#SA4027 - SA4027 # 'x % 1' is always zero. # https://staticcheck.dev/docs/checks/#SA4028 - SA4028 # Ineffective attempt at sorting slice. # https://staticcheck.dev/docs/checks/#SA4029 - SA4029 # Ineffective attempt at generating random number. # https://staticcheck.dev/docs/checks/#SA4030 - SA4030 # Checking never-nil value against nil. # https://staticcheck.dev/docs/checks/#SA4031 - SA4031 # Comparing 'runtime.GOOS' or 'runtime.GOARCH' against impossible value. # https://staticcheck.dev/docs/checks/#SA4032 - SA4032 # Assignment to nil map. # https://staticcheck.dev/docs/checks/#SA5000 - SA5000 # Deferring 'Close' before checking for a possible error. # https://staticcheck.dev/docs/checks/#SA5001 - SA5001 # The empty for loop (\"for {}\") spins and can block the scheduler. # https://staticcheck.dev/docs/checks/#SA5002 - SA5002 # Defers in infinite loops will never execute. # https://staticcheck.dev/docs/checks/#SA5003 - SA5003 # \"for { select { ...\" with an empty default branch spins. # https://staticcheck.dev/docs/checks/#SA5004 - SA5004 # The finalizer references the finalized object, preventing garbage collection. # https://staticcheck.dev/docs/checks/#SA5005 - SA5005 # Infinite recursive call. # https://staticcheck.dev/docs/checks/#SA5007 - SA5007 # Invalid struct tag. # https://staticcheck.dev/docs/checks/#SA5008 - SA5008 # Invalid Printf call. # https://staticcheck.dev/docs/checks/#SA5009 - SA5009 # Impossible type assertion. # https://staticcheck.dev/docs/checks/#SA5010 - SA5010 # Possible nil pointer dereference. # https://staticcheck.dev/docs/checks/#SA5011 - SA5011 # Passing odd-sized slice to function expecting even size. # https://staticcheck.dev/docs/checks/#SA5012 - SA5012 # Using 'regexp.Match' or related in a loop, should use 'regexp.Compile'. # https://staticcheck.dev/docs/checks/#SA6000 - SA6000 # Missing an optimization opportunity when indexing maps by byte slices. # https://staticcheck.dev/docs/checks/#SA6001 - SA6001 # Storing non-pointer values in 'sync.Pool' allocates memory. # https://staticcheck.dev/docs/checks/#SA6002 - SA6002 # Converting a string to a slice of runes before ranging over it. # https://staticcheck.dev/docs/checks/#SA6003 - SA6003 # Inefficient string comparison with 'strings.ToLower' or 'strings.ToUpper'. # https://staticcheck.dev/docs/checks/#SA6005 - SA6005 # Using io.WriteString to write '[]byte'. # https://staticcheck.dev/docs/checks/#SA6006 - SA6006 # Defers in range loops may not run when you expect them to. # https://staticcheck.dev/docs/checks/#SA9001 - SA9001 # Using a non-octal 'os.FileMode' that looks like it was meant to be in octal. # https://staticcheck.dev/docs/checks/#SA9002 - SA9002 # Empty body in an if or else branch. # https://staticcheck.dev/docs/checks/#SA9003 - SA9003 # Only the first constant has an explicit type. # https://staticcheck.dev/docs/checks/#SA9004 - SA9004 # Trying to marshal a struct with no public fields nor custom marshaling. # https://staticcheck.dev/docs/checks/#SA9005 - SA9005 # Dubious bit shifting of a fixed size integer value. # https://staticcheck.dev/docs/checks/#SA9006 - SA9006 # Deleting a directory that shouldn't be deleted. # https://staticcheck.dev/docs/checks/#SA9007 - SA9007 # 'else' branch of a type assertion is probably not reading the right value. # https://staticcheck.dev/docs/checks/#SA9008 - SA9008 # Ineffectual Go compiler directive. # https://staticcheck.dev/docs/checks/#SA9009 - SA9009 # Incorrect or missing package comment. # https://staticcheck.dev/docs/checks/#ST1000 - ST1000 # Dot imports are discouraged. # https://staticcheck.dev/docs/checks/#ST1001 - ST1001 # Poorly chosen identifier. # https://staticcheck.dev/docs/checks/#ST1003 - ST1003 # Incorrectly formatted error string. # https://staticcheck.dev/docs/checks/#ST1005 - ST1005 # Poorly chosen receiver name. # https://staticcheck.dev/docs/checks/#ST1006 - ST1006 # A function's error value should be its last return value. # https://staticcheck.dev/docs/checks/#ST1008 - ST1008 # Poorly chosen name for variable of type 'time.Duration'. # https://staticcheck.dev/docs/checks/#ST1011 - ST1011 # Poorly chosen name for error variable. # https://staticcheck.dev/docs/checks/#ST1012 - ST1012 # Should use constants for HTTP error codes, not magic numbers. # https://staticcheck.dev/docs/checks/#ST1013 - ST1013 # A switch's default case should be the first or last case. # https://staticcheck.dev/docs/checks/#ST1015 - ST1015 # Use consistent method receiver names. # https://staticcheck.dev/docs/checks/#ST1016 - ST1016 # Don't use Yoda conditions. # https://staticcheck.dev/docs/checks/#ST1017 - ST1017 # Avoid zero-width and control characters in string literals. # https://staticcheck.dev/docs/checks/#ST1018 - ST1018 # Importing the same package multiple times. # https://staticcheck.dev/docs/checks/#ST1019 - ST1019 # The documentation of an exported function should start with the function's name. # https://staticcheck.dev/docs/checks/#ST1020 - ST1020 # The documentation of an exported type should start with type's name. # https://staticcheck.dev/docs/checks/#ST1021 - ST1021 # The documentation of an exported variable or constant should start with variable's name. # https://staticcheck.dev/docs/checks/#ST1022 - ST1022 # Redundant type in variable declaration. # https://staticcheck.dev/docs/checks/#ST1023 - ST1023 # Use plain channel send or receive instead of single-case select. # https://staticcheck.dev/docs/checks/#S1000 - S1000 # Replace for loop with call to copy. # https://staticcheck.dev/docs/checks/#S1001 - S1001 # Omit comparison with boolean constant. # https://staticcheck.dev/docs/checks/#S1002 - S1002 # Replace call to 'strings.Index' with 'strings.Contains'. # https://staticcheck.dev/docs/checks/#S1003 - S1003 # Replace call to 'bytes.Compare' with 'bytes.Equal'. # https://staticcheck.dev/docs/checks/#S1004 - S1004 # Drop unnecessary use of the blank identifier. # https://staticcheck.dev/docs/checks/#S1005 - S1005 # Use \"for { ... }\" for infinite loops. # https://staticcheck.dev/docs/checks/#S1006 - S1006 # Simplify regular expression by using raw string literal. # https://staticcheck.dev/docs/checks/#S1007 - S1007 # Simplify returning boolean expression. # https://staticcheck.dev/docs/checks/#S1008 - S1008 # Omit redundant nil check on slices, maps, and channels. # https://staticcheck.dev/docs/checks/#S1009 - S1009 # Omit default slice index. # https://staticcheck.dev/docs/checks/#S1010 - S1010 # Use a single 'append' to concatenate two slices. # https://staticcheck.dev/docs/checks/#S1011 - S1011 # Replace 'time.Now().Sub(x)' with 'time.Since(x)'. # https://staticcheck.dev/docs/checks/#S1012 - S1012 # Use a type conversion instead of manually copying struct fields. # https://staticcheck.dev/docs/checks/#S1016 - S1016 # Replace manual trimming with 'strings.TrimPrefix'. # https://staticcheck.dev/docs/checks/#S1017 - S1017 # Use \"copy\" for sliding elements. # https://staticcheck.dev/docs/checks/#S1018 - S1018 # Simplify \"make\" call by omitting redundant arguments. # https://staticcheck.dev/docs/checks/#S1019 - S1019 # Omit redundant nil check in type assertion. # https://staticcheck.dev/docs/checks/#S1020 - S1020 # Merge variable declaration and assignment. # https://staticcheck.dev/docs/checks/#S1021 - S1021 # Omit redundant control flow. # https://staticcheck.dev/docs/checks/#S1023 - S1023 # Replace 'x.Sub(time.Now())' with 'time.Until(x)'. # https://staticcheck.dev/docs/checks/#S1024 - S1024 # Don't use 'fmt.Sprintf(\"%s\", x)' unnecessarily. # https://staticcheck.dev/docs/checks/#S1025 - S1025 # Simplify error construction with 'fmt.Errorf'. # https://staticcheck.dev/docs/checks/#S1028 - S1028 # Range over the string directly. # https://staticcheck.dev/docs/checks/#S1029 - S1029 # Use 'bytes.Buffer.String' or 'bytes.Buffer.Bytes'. # https://staticcheck.dev/docs/checks/#S1030 - S1030 # Omit redundant nil check around loop. # https://staticcheck.dev/docs/checks/#S1031 - S1031 # Use 'sort.Ints(x)', 'sort.Float64s(x)', and 'sort.Strings(x)'. # https://staticcheck.dev/docs/checks/#S1032 - S1032 # Unnecessary guard around call to \"delete\". # https://staticcheck.dev/docs/checks/#S1033 - S1033 # Use result of type assertion to simplify cases. # https://staticcheck.dev/docs/checks/#S1034 - S1034 # Redundant call to 'net/http.CanonicalHeaderKey' in method call on 'net/http.Header'. # https://staticcheck.dev/docs/checks/#S1035 - S1035 # Unnecessary guard around map access. # https://staticcheck.dev/docs/checks/#S1036 - S1036 # Elaborate way of sleeping. # https://staticcheck.dev/docs/checks/#S1037 - S1037 # Unnecessarily complex way of printing formatted string. # https://staticcheck.dev/docs/checks/#S1038 - S1038 # Unnecessary use of 'fmt.Sprint'. # https://staticcheck.dev/docs/checks/#S1039 - S1039 # Type assertion to current type. # https://staticcheck.dev/docs/checks/#S1040 - S1040 # Apply De Morgan's law. # https://staticcheck.dev/docs/checks/#QF1001 - QF1001 # Convert untagged switch to tagged switch. # https://staticcheck.dev/docs/checks/#QF1002 - QF1002 # Convert if/else-if chain to tagged switch. # https://staticcheck.dev/docs/checks/#QF1003 - QF1003 # Use 'strings.ReplaceAll' instead of 'strings.Replace' with 'n == -1'. # https://staticcheck.dev/docs/checks/#QF1004 - QF1004 # Expand call to 'math.Pow'. # https://staticcheck.dev/docs/checks/#QF1005 - QF1005 # Lift 'if'+'break' into loop condition. # https://staticcheck.dev/docs/checks/#QF1006 - QF1006 # Merge conditional assignment into variable declaration. # https://staticcheck.dev/docs/checks/#QF1007 - QF1007 # Omit embedded fields from selector expression. # https://staticcheck.dev/docs/checks/#QF1008 - QF1008 # Use 'time.Time.Equal' instead of '==' operator. # https://staticcheck.dev/docs/checks/#QF1009 - QF1009 # Convert slice of bytes to string when printing it. # https://staticcheck.dev/docs/checks/#QF1010 - QF1010 # Omit redundant type from variable declaration. # https://staticcheck.dev/docs/checks/#QF1011 - QF1011 # Use 'fmt.Fprintf(x, ...)' instead of 'x.Write(fmt.Sprintf(...))'. # https://staticcheck.dev/docs/checks/#QF1012 - QF1012","tagalign#tagalign":"Check that struct tags are well aligned.\nSince golangci-lint v1.53.0 Autofix Repository linters: settings: tagalign: # Align and sort can be used together or separately. # # Whether enable align. If true, the struct tags will be aligned. # E.g.: # type FooBar struct { # Bar string `json:\"bar\" validate:\"required\"` # FooFoo int8 `json:\"foo_foo\" validate:\"required\"` # } # will be formatted to: # type FooBar struct { # Bar string `json:\"bar\" validate:\"required\"` # FooFoo int8 `json:\"foo_foo\" validate:\"required\"` # } # Default: true. align: false # Whether enable tags sort. # If true, the tags will be sorted by name in ascending order. # E.g.: `xml:\"bar\" json:\"bar\" validate:\"required\"` -\u003e `json:\"bar\" validate:\"required\" xml:\"bar\"`. # Default: true sort: false # Specify the order of tags, the other tags will be sorted by name. # This option will be ignored if `sort` is false. # Default: [] order: - json - yaml - yml - toml - mapstructure - binding - validate # Whether enable strict style. # In this style, the tags will be sorted and aligned in the dictionary order, # and the tags with the same name will be aligned together. # Note: This option will be ignored if 'align' or 'sort' is false. # Default: false strict: true","tagliatelle#tagliatelle":"Checks the struct tags.\nSince golangci-lint v1.40.0 Repository linters: settings: tagliatelle: # Checks the struct tag name case. case: # Defines the association between tag name and case. # Any struct tag name can be used. # Supported string cases: # - `camel` # - `pascal` # - `kebab` # - `snake` # - `upperSnake` # - `goCamel` # - `goPascal` # - `goKebab` # - `goSnake` # - `upper` # - `lower` # - `header` rules: json: camel yaml: camel xml: camel toml: camel bson: camel avro: snake mapstructure: kebab env: upperSnake envconfig: upperSnake whatever: snake # Defines the association between tag name and case. # Important: the `extended-rules` overrides `rules`. # Default: empty extended-rules: json: # Supported string cases: # - `camel` # - `pascal` # - `kebab` # - `snake` # - `upperSnake` # - `goCamel` # - `goPascal` # - `goKebab` # - `goSnake` # - `header` # - `lower` # - `header` # # Required case: camel # Adds 'AMQP', 'DB', 'GID', 'RTP', 'SIP', 'TS' to initialisms, # and removes 'LHS', 'RHS' from initialisms. # Default: false extra-initialisms: true # Defines initialism additions and overrides. # Default: empty initialism-overrides: DB: true # add a new initialism LHS: false # disable a default initialism. # ... # Uses the struct field name to check the name of the struct tag. # Default: false use-field-name: true # The field names to ignore. # Default: [] ignored-fields: - Bar - Foo # Overrides the default/root configuration. # Default: [] overrides: - # The package path (uses `/` only as a separator). # Required pkg: foo/bar # Default: empty or the same as the default/root configuration. rules: json: snake xml: pascal # Default: empty or the same as the default/root configuration. extended-rules: # Same options as the base `extended-rules`. # Default: false (WARNING: it doesn't follow the default/root configuration) use-field-name: true # The field names to ignore. # Default: [] or the same as the default/root configuration. ignored-fields: - Bar - Foo # Ignore the package (takes precedence over all other configurations). # Default: false ignore: true","testableexamples#testableexamples":"Linter checks if examples are testable (have an expected output).\nSince golangci-lint v1.50.0 Repository No settings available.","testifylint#testifylint":"Checks usage of github.com/stretchr/testify.\nSince golangci-lint v1.55.0 Autofix Repository linters: settings: testifylint: # Enable all checkers (https://github.com/Antonboom/testifylint#checkers). # Default: false enable-all: true # Disable checkers by name # (in addition to default # suite-thelper # ). disable: - blank-import - bool-compare - compares - contains - empty - encoded-compare - equal-values - error-is-as - error-nil - expected-actual - float-compare - formatter - go-require - len - negative-positive - nil-compare - regexp - require-error - suite-broken-parallel - suite-dont-use-pkg - suite-extra-assert-call - suite-method-signature - suite-subtest-run - suite-thelper - useless-assert # Disable all checkers (https://github.com/Antonboom/testifylint#checkers). # Default: false disable-all: true # Enable checkers by name # (in addition to default # blank-import, bool-compare, compares, contains, empty, encoded-compare, equal-values, error-is-as, error-nil, # expected-actual, go-require, float-compare, formatter, len, negative-positive, nil-compare, regexp, require-error, # suite-broken-parallel, suite-dont-use-pkg, suite-extra-assert-call, suite-subtest-run, suite-method-signature, # useless-assert # ). enable: - blank-import - bool-compare - compares - contains - empty - encoded-compare - equal-values - error-is-as - error-nil - expected-actual - float-compare - formatter - go-require - len - negative-positive - nil-compare - regexp - require-error - suite-broken-parallel - suite-dont-use-pkg - suite-extra-assert-call - suite-method-signature - suite-subtest-run - suite-thelper - useless-assert bool-compare: # To ignore user defined types (over builtin bool). # Default: false ignore-custom-types: true expected-actual: # Regexp for expected variable name. # Default: (^(exp(ected)?|want(ed)?)([A-Z]\\w*)?$)|(^(\\w*[a-z])?(Exp(ected)?|Want(ed)?)$) pattern: ^expected formatter: # To enable go vet's printf checks. # Default: true check-format-string: false # To require f-assertions (e.g. `assert.Equalf`) if format string is used, even if there are no variable-length # variables, i.e. it requires `require.NoErrorf` for both these cases: # - require.NoErrorf(t, err, \"unexpected error\") # - require.NoErrorf(t, err, \"unexpected error for sid: %v\", sid) # To understand this behavior, please read the # https://github.com/Antonboom/testifylint?tab=readme-ov-file#historical-reference-of-formatter. # Default: false require-f-funcs: true # To require that the first element of msgAndArgs (msg) has a string type. # For example, in such case assertion like `assert.True(t, b, tt.case)` will be considered as invalid. # Default: true require-string-msg: false go-require: # To ignore HTTP handlers (like http.HandlerFunc). # Default: false ignore-http-handlers: true require-error: # Regexp for assertions to analyze. If defined, then only matched error assertions will be reported. # Default: \"\" fn-pattern: ^(Errorf?|NoErrorf?)$ suite-extra-assert-call: # To require or remove extra Assert() call? # Default: remove mode: require","testpackage#testpackage":"Linter that makes you use a separate _test package.\nSince golangci-lint v1.25.0 Repository linters: settings: testpackage: # Regexp pattern to skip files. # Default: \"(export|internal)_test\\\\.go\" skip-regexp: (export|internal)_test\\.go # List of packages that don't end with _test that tests are allowed to be in. # Default: \"main\" allow-packages: - example - main","thelper#thelper":"Thelper detects tests helpers which do not start with the t.Helper() method.\nSince golangci-lint v1.34.0 Repository linters: settings: thelper: test: # Check *testing.T is first param (or after context.Context) of helper function. # Default: true first: false # Check *testing.T param has name t. # Default: true name: false # Check t.Helper() begins helper function. # Default: true begin: false benchmark: # Check *testing.B is first param (or after context.Context) of helper function. # Default: true first: false # Check *testing.B param has name b. # Default: true name: false # Check b.Helper() begins helper function. # Default: true begin: false tb: # Check *testing.TB is first param (or after context.Context) of helper function. # Default: true first: false # Check *testing.TB param has name tb. # Default: true name: false # Check tb.Helper() begins helper function. # Default: true begin: false fuzz: # Check *testing.F is first param (or after context.Context) of helper function. # Default: true first: false # Check *testing.F param has name f. # Default: true name: false # Check f.Helper() begins helper function. # Default: true begin: false","tparallel#tparallel":"Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes.\nSince golangci-lint v1.32.0 Repository No settings available.","unconvert#unconvert":"Remove unnecessary type conversions.\nSince golangci-lint v1.0.0 Repository linters: settings: unconvert: # Remove conversions that force intermediate rounding. # Default: false fast-math: true # Be more conservative (experimental). # Default: false safe: true","unparam#unparam":"Reports unused function parameters.\nSince golangci-lint v1.9.0 Repository linters: settings: unparam: # Inspect exported functions. # # Set to true if no external program/library imports your code. # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors: # if it's called for subdir of a project it can't find external interfaces. All text editor integrations # with golangci-lint call it on a directory with the changed file. # # Default: false check-exported: true","unqueryvet#unqueryvet":"Detects SELECT * in SQL queries and SQL builders, preventing performance issues and encouraging explicit column selection.\nSince golangci-lint v2.5.0 Repository linters: settings: unqueryvet: # Enable SQL builder checking. # Default: true check-sql-builders: false # Regex patterns for acceptable SELECT * usage. # Default: # - \"SELECT \\\\* FROM information_schema\\\\..*\" # - \"SELECT \\\\* FROM pg_catalog\\\\..*\" # - \"SELECT COUNT\\\\(\\\\*\\\\)\" # - \"SELECT MAX\\\\(\\\\*\\\\)\" # - \"SELECT MIN\\\\(\\\\*\\\\)\" allowed-patterns: - \"SELECT \\\\* FROM temp_.*\" - \"SELECT \\\\* FROM.*-- migration\"","unused#unused":"Checks Go code for unused constants, variables, functions and types.\nSince golangci-lint v1.20.0 Repository linters: settings: unused: # Mark all struct fields that have been written to as used. # Default: true field-writes-are-uses: false # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write. # Default: false post-statements-are-reads: true # Mark all exported fields as used. # default: true exported-fields-are-used: false # Mark all function parameters as used. # default: true parameters-are-used: false # Mark all local variables as used. # default: true local-variables-are-used: false # Mark all identifiers inside generated files as used. # Default: true generated-is-used: false","usestdlibvars#usestdlibvars":"A linter that detect the possibility to use variables/constants from the Go standard library.\nSince golangci-lint v1.48.0 Autofix Repository linters: settings: usestdlibvars: # Suggest the use of http.MethodXX. # Default: true http-method: false # Suggest the use of http.StatusXX. # Default: true http-status-code: false # Suggest the use of time.Month in time.Date. # Default: false time-date-month: true # Suggest the use of time.Weekday.String(). # Default: true time-weekday: true # Suggest the use of time.Month.String(). # Default: false time-month: true # Suggest the use of time.Layout. # Default: false time-layout: true # Suggest the use of crypto.Hash.String(). # Default: false crypto-hash: true # Suggest the use of rpc.DefaultXXPath. # Default: false default-rpc-path: true # Suggest the use of sql.LevelXX.String(). # Default: false sql-isolation-level: true # Suggest the use of tls.SignatureScheme.String(). # Default: false tls-signature-scheme: true # Suggest the use of constant.Kind.String(). # Default: false constant-kind: true","usetesting#usetesting":"Reports uses of functions with replacement inside the testing package.\nSince golangci-lint v1.63.0 Autofix Repository linters: settings: usetesting: # Enable/disable `os.CreateTemp(\"\", ...)` detections. # Default: true os-create-temp: false # Enable/disable `os.MkdirTemp()` detections. # Default: true os-mkdir-temp: false # Enable/disable `os.Setenv()` detections. # Default: true os-setenv: false # Enable/disable `os.TempDir()` detections. # Default: false os-temp-dir: true # Enable/disable `os.Chdir()` detections. # Disabled if Go \u003c 1.24. # Default: true os-chdir: false # Enable/disable `context.Background()` detections. # Disabled if Go \u003c 1.24. # Default: false context-background: true # Enable/disable `context.TODO()` detections. # Disabled if Go \u003c 1.24. # Default: false context-todo: true","varnamelen#varnamelen":"Checks that the length of a variable's name matches its scope.\nSince golangci-lint v1.43.0 Repository linters: settings: varnamelen: # The longest distance, in source lines, that is being considered a \"small scope\". # Variables used in at most this many lines will be ignored. # Default: 5 max-distance: 6 # The minimum length of a variable's name that is considered \"long\". # Variable names that are at least this long will be ignored. # Default: 3 min-name-length: 2 # Check method receivers. # Default: false check-receiver: true # Check named return values. # Default: false check-return: true # Check type parameters. # Default: false check-type-param: true # Ignore \"ok\" variables that hold the bool return value of a type assertion. # Default: false ignore-type-assert-ok: true # Ignore \"ok\" variables that hold the bool return value of a map index. # Default: false ignore-map-index-ok: true # Ignore \"ok\" variables that hold the bool return value of a channel receive. # Default: false ignore-chan-recv-ok: true # Optional list of variable names that should be ignored completely. # Default: [] ignore-names: - err # Optional list of variable declarations that should be ignored completely. # Entries must be in one of the following forms (see below for examples): # - for variables, parameters, named return values, method receivers, or type parameters: # ( can also be a pointer/slice/map/chan/...) # - for constants: const # # Default: [] ignore-decls: - c echo.Context - t testing.T - f *foo.Bar - e error - i int - const C - T any - m map[string]int","wastedassign#wastedassign":"Finds wasted assignment statements.\nSince golangci-lint v1.38.0 Repository No settings available.","whitespace#whitespace":"Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc.\nSince golangci-lint v1.19.0 Autofix Repository linters: settings: whitespace: # Enforces newlines (or comments) after every multi-line if statement. # Default: false multi-if: true # Enforces newlines (or comments) after every multi-line function signature. # Default: false multi-func: true","wrapcheck#wrapcheck":"Checks that errors returned from external packages are wrapped.\nSince golangci-lint v1.32.0 Repository linters: settings: wrapcheck: # An array of strings specifying additional substrings of signatures to ignore. # Unlike 'ignore-sigs', this option extends the default set (or the set specified in 'ignore-sigs') without replacing it entirely. # This allows you to add specific signatures to the ignore list # while retaining the defaults or any items in 'ignore-sigs'. # Default: [] extra-ignore-sigs: - .CustomError( - .SpecificWrap( # An array of strings that specify substrings of signatures to ignore. # If this set, it will override the default set of ignored signatures. # See https://github.com/tomarrell/wrapcheck#configuration for more information. # Default: [\".Errorf(\", \"errors.New(\", \"errors.Unwrap(\", \"errors.Join(\", \".Wrap(\", \".Wrapf(\", \".WithMessage(\", \".WithMessagef(\", \".WithStack(\"] ignore-sigs: - .Errorf( - errors.New( - errors.Unwrap( - errors.Join( - .Wrap( - .Wrapf( - .WithMessage( - .WithMessagef( - .WithStack( # An array of strings that specify regular expressions of signatures to ignore. # Default: [] ignore-sig-regexps: - \\.New.*Error\\( # An array of strings that specify globs of packages to ignore. # Default: [] ignore-package-globs: - encoding/* - github.com/pkg/* # An array of strings that specify regular expressions of interfaces to ignore. # Default: [] ignore-interface-regexps: - ^(?i)c(?-i)ach(ing|e) # Determines whether wrapcheck should report errors returned from inside the package. # Default: false report-internal-errors: true","wsl#wsl":"New major version. Use wsl_v5 instead.\nSince golangci-lint v1.20.0 Deprecated since v2.2.0 Repository No settings available.","wsl_v5#wsl_v5":"Add or remove empty lines.\nSince golangci-lint v2.2.0 Autofix Repository linters: settings: wsl_v5: # Allow cuddling a variable if it's used first in the immediate following block, # even if the statement with the block doesn't use the variable. # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration # Default: true allow-first-in-block: false # Same as above, # but allows cuddling if the variable is used anywhere in the following (or nested) block. # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration # Default: false allow-whole-block: true # If a block contains more than this number of lines, # the branch statement needs to be separated by whitespace. # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration # Default: 2 branch-max-lines: 4 # If set to a non-negative number, # case blocks need to end with whitespace if exceeding this number # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#configuration # Default: 0 case-max-lines: 2 # Default checks to use. # Can be `all`, `none`, `default` or empty. # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration # Default: \"\" default: all # Enabled checks. # Will be additive to any presets. # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration # Default: [] enable: - assign - branch - decl - defer - expr - for - go - if - inc-dec - label - range - return - select - send - switch - type-switch - append - assign-exclusive - assign-expr - err - leading-whitespace - trailing-whitespace # Disable checks. # Will be subtractive to any preset. # https://github.com/bombsimon/wsl/tree/main?tab=readme-ov-file#checks-and-configuration # Default: [] disable: - assign - branch - decl - defer - expr - for - go - if - inc-dec - label - range - return - select - send - switch - type-switch - append - assign-exclusive - assign-expr - err - leading-whitespace - trailing-whitespace","zerologlint#zerologlint":"Detects the wrong usage of zerolog that a user forgets to dispatch with Send or Msg.\nSince golangci-lint v1.53.0 Repository No settings available."},"title":"Settings"},"/docs/linters/false-positives/":{"data":{"":"False positives are inevitable, but we did our best to reduce their count.\nIf a false positive occurred, you have several choices.","exclude#Exclude":"","exclude-issue-by-text#Exclude Issue by Text":"You can use linters.exclusions.rules config option for per-path or per-linter configuration.\nIn the following example, all the reports from the linters (linters) that contains the text (text) are excluded:\nlinters: exclusions: rules: - linters: - mnd text: \"Magic number: 9\" In the following example, all the reports from the linters (linters) that originated from the source (source) are excluded:\nlinters: exclusions: rules: - linters: - lll source: \"^//go:generate \" In the following example, all the reports that contains the text (text) in the path (path) are excluded:\nlinters: exclusions: rules: - path: path/to/a/file.go text: \"string `example` has (\\\\d+) occurrences, make it a constant\"","exclude-issues-by-path#Exclude Issues by Path":"Exclude issues in path by linters.exclusions.paths or linters.exclusions.rules config options.\nIn the following example, all the reports from the linters (linters) that concerns the path (path) are excluded:\nlinters: exclusions: rules: - path: '(.+)_test\\.go' linters: - funlen - goconst The opposite, excluding reports except for specific paths, is also possible. In the following example, only test files get checked:\nlinters: exclusions: rules: - path-except: '(.+)_test\\.go' linters: - funlen - goconst In the following example, all the reports related to the files (paths) are excluded:\nlinters: exclusions: paths: - path/to/a/file.go In the following example, all the reports related to the directories (paths) are excluded:\nlinters: exclusions: paths: - path/to/a/dir/","exclusion-presets#Exclusion Presets":"Some exclusions are considered common. To help golangci-lint users, those common exclusions are provided through presets.\nlinters: exclusions: presets: - comments - common-false-positives - legacy - std-error-handling","nolint-directive#Nolint Directive":"To exclude issues from all linters use //nolint:all. For example, if it’s used inline (not from the beginning of the line) it excludes issues only for this line.\nvar bad_name int //nolint:all To exclude issues from specific linters only:\nvar bad_name int //nolint:wsl,unused To exclude issues for the block of code, use this directive at the beginning of a line:\n//nolint:all func allIssuesInThisFunctionAreExcluded() *string { // ... } //nolint:govet var ( a int b int ) Also, you can exclude all issues in a file by:\n//nolint:unparam package pkg You may add a comment explaining or justifying why a nolint directive is being used on the same line as the flag itself:\n//nolint:gocyclo // This legacy function is complex, but the team too busy to simplify it func someLegacyFunction() *string { // ... } You can see more examples of using nolint directives in our tests for it.","preset-comments#Preset \u003ccode\u003ecomments\u003c/code\u003e":"Linter Issue Text staticcheck (ST1000|ST1020|ST1021|ST1022) revive exported (.+) should have comment( \\(or a comment on this block\\))? or be unexported revive package comment should be of the form \"(.+)...\" revive comment on exported (.+) should be of the form \"(.+)...\" revive should have a package comment","preset-common-false-positives#Preset \u003ccode\u003ecommon-false-positives\u003c/code\u003e":"Linter Issue Text gosec G103: Use of unsafe calls should be audited gosec G204: Subprocess launched with variable gosec G304: Potential file inclusion via variable","preset-legacy#Preset \u003ccode\u003elegacy\u003c/code\u003e":"Linter Issue Text govet (possible misuse of unsafe.Pointer|should have signature) staticcheck SA4011 gosec G104 gosec (G301|G302|G307): Expect (directory permissions to be 0750|file permissions to be 0600) or less","preset-std-error-handling#Preset \u003ccode\u003estd-error-handling\u003c/code\u003e":"Linter Issue Text errcheck (?i)Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*print(f|ln)?|os\\.(Un)?Setenv). is not checked","specific-linter-excludes#Specific Linter Excludes":"Most of the linters have a configuration, sometimes false-positives can be related to a bad configuration of a linter. So it’s recommended to check the linter configurations.\nOtherwise, some linters have dedicated configuration to exclude or disable rules.\nAn example with staticcheck:\nlinters: settings: staticcheck: checks: - all - '-SA1000' # disable the rule SA1000 - '-SA1004' # disable the rule SA1004","syntax#Syntax":"nolint is not regular comment but a directive.\nA directive comment is a line matching the regular expression //(line |extern |export |[a-z0-9]+:[a-z0-9]). https://go.dev/doc/comment#syntax\nThis means that no spaces are allowed between:\n// and nolint nolint and : : and the name of the linter. Invalid syntax:\n// nolint // nolint:xxx //nolint :xxx //nolint: xxx Valid syntax:\n//nolint:xxx"},"title":"False Positives"},"/docs/plugins/":{"data":{"":"Module Plugin System Go Plugin System"},"title":"Plugins"},"/docs/plugins/go-plugins/":{"data":{"":"We recommend using Module Plugin System instead of the Go Plugin System. Private linters can be added through Go’s plugin system.\nFor a private linter (which acts as a plugin) to work properly, the plugin as well as the golangci-lint binary needs to be built for the same environment.\nCGO_ENABLED is another requirement.\nThis means that golangci-lint needs to be built for whatever machine you intend to run it on (cloning the golangci-lint repository and running a CGO_ENABLED=1 make build should do the trick for your machine).","configure-a-plugin#Configure a Plugin":"If you already have a linter plugin available, you can follow these steps to define its usage in a projects .golangci.yml file.\nAn example linter can be found at here.\nIf you’re looking for instructions on how to configure your own custom linter, they can be found further down.\nIf the project you want to lint does not have one already, copy the .golangci.yml to the root directory. Adjust the YAML to appropriate linters.settings.custom entries as so: .golangci.ymlversion: \"2\" linters: settings: custom: example: path: /example.so description: The description of the linter original-url: github.com/golangci/example-linter settings: # Settings are optional. one: Foo two: - name: Bar three: name: Bar That is all the configuration that is required to run a custom linter in your project.\nCustom linters are enabled by default, but abide by the same rules as other linters.\nIf the ‘disable all’ option is specified either on command line or in .golangci.yml files linters.default: none, custom linters will be disabled; they can be re-enabled by adding them to the linters.enable list, or providing the enabled option on the command line, golangci-lint run -Eexample.\nThe configuration inside the linters.settings field of linter have some limitations (there are NOT related to the plugin system itself): we use Viper to handle the configuration, but Viper put all the keys in lowercase, and . cannot be used inside a key.","create-a-plugin#Create a Plugin":"Your linter must provide one or more golang.org/x/tools/go/analysis.Analyzer structs.\nYour project should also use go.mod.\nAll versions of libraries that overlap golangci-lint (including replaced libraries) MUST be set to the same version as golangci-lint. You can see the versions by running go version -m golangci-lint.\nYou’ll also need to create a Go file like plugin/example.go.\nThis file MUST be in the package main, and MUST define an exposed function called New with the following signature:\nfunc New(conf any) ([]*analysis.Analyzer, error) { // ... } See plugin/example.go for more info.\nTo build the plugin, from the root project directory, run:\ngo build -buildmode=plugin plugin/example.go This will create a plugin *.so file that can be copied into your project or another well-known location for usage in golangci-lint."},"title":"Go Plugin System"},"/docs/plugins/module-plugins/":{"data":{"":"Tip\nAn example linter can be found at here.","configuration-example#Configuration Example":".custom-gcl.ymlversion: v2.6.0 plugins: # a plugin from a Go proxy - module: 'github.com/golangci/plugin1' import: 'github.com/golangci/plugin1/foo' version: v1.0.0 # a plugin from local source - module: 'github.com/golangci/plugin2' path: /my/local/path/plugin2 .golangci.ymlversion: \"2\" linters: default: none enable: - foo settings: custom: foo: type: \"module\" description: This is an example usage of a plugin linter. settings: message: hello","configuration-example-1#Configuration Example":".golangci.ymlversion: \"2\" linters: default: none enable: - foo settings: custom: foo: type: \"module\" description: This is an example usage of a plugin linter. settings: message: hello","reference#Reference":"The configuration file can be validated with the JSON Schema: custom-gcl.jsonschema.json\n.custom-gcl.yml# The golangci-lint version used to build the custom binary. # Required. version: v2.0.0 # The name of the custom binary. # Optional. # Default: custom-gcl name: custom-golangci-lint # The directory path used to store the custom binary. # Optional. # Default: . destination: ./my/path/ # The list of the plugins to integrate inside the custom binary. plugins: # a plugin from a Go proxy - module: 'github.com/example/plugin3' version: v1.2.3 # a plugin from a Go proxy (with a specific import path) - module: 'github.com/example/plugin4' import: 'github.com/example/plugin4/foo' version: v1.0.0 # a plugin from local source (with absolute path) - module: 'github.com/example/plugin2' path: /my/local/path/plugin2 # a plugin from local source (with relative path) - module: 'github.com/example/plugin1' path: ./my/local/path/plugin1 # a plugin from local source (with absolute path and a specific import path) - module: 'github.com/example/plugin2' import: 'github.com/example/plugin4/foo' path: /my/local/path/plugin2","the-automatic-way#The Automatic Way":"Define your building configuration into .custom-gcl.yml. Run the command golangci-lint custom (or golangci-lint custom -v to have logs). Define the plugin inside the linters.settings.custom section with the type module. Run the resulting custom binary of golangci-lint (./custom-gcl by default). Requirements:\nGo git","the-manual-way#The Manual Way":"Add a blank-import of your module inside cmd/golangci-lint/plugins.go. Run go mod tidy (the module containing the plugin will be imported). Run make build. Define the plugin inside the linters.settings.custom section with the type module. Run your custom version of golangci-lint."},"title":"Module Plugin System"},"/docs/product/":{"data":{"":"Thanks Migration Guide Changelog Roadmap"},"title":"Product"},"/docs/product/migration-guide/":{"data":{"":"","--disable-all-and---enable-all#\u003ccode\u003e--disable-all\u003c/code\u003e and \u003ccode\u003e--enable-all\u003c/code\u003e":"--disable-all has been replaced with --default=none.\n--enable-all has been replaced with --default=all.","--out-format#\u003ccode\u003e--out-format\u003c/code\u003e":"--out-format has been replaced with the following flags:\n# Previously 'colored-line-number' and 'line-number' --output.text.path --output.text.print-linter-name --output.text.print-issued-lines --output.text.colors # Previously 'json' --output.json.path # Previously 'colored-tab' and 'tab' --output.tab.path --output.tab.print-linter-name --output.tab.colors # Previously 'html' --output.html.path # Previously 'checkstyle' --output.checkstyle.path # Previously 'code-climate' --output.code-climate.path # Previously 'junit-xml' and 'junit-xml-extended' --output.junit-xml.path --output.junit-xml.extended # Previously 'teamcity' --output.teamcity.path # Previously 'sarif' --output.sarif.path","--print-issued-lines#\u003ccode\u003e--print-issued-lines\u003c/code\u003e":"--print-issued-lines has been replaced with --output.text.print-issued-lines.","--print-linter-name#\u003ccode\u003e--print-linter-name\u003c/code\u003e":"--print-linter-name has been replaced with --output.text.print-linter-name or --output.tab.print-linter-name.","alternative-linter-names#Alternative Linter Names":"The alternative linters has been removed.\nAlt Name v1 Name v2 gas gosec goerr113 err113 gomnd mnd logrlint loggercheck megacheck staticcheck vet govet vetshadow govet v1v2 linters: enable: - gas - goerr113 - gomnd - logrlint - megacheck - vet - vetshadow linters: enable: - gosec - err113 - mnd - loggercheck - staticcheck - govet","changes#Changes":"","command-line-flags#Command Line Flags":"The following flags have been removed:\n--disable-all --enable-all -p, --presets --fast -e, --exclude --exclude-case-sensitive --exclude-dirs-use-default --exclude-dirs --exclude-files --exclude-generated --exclude-use-default --go string --sort-order --sort-results --out-format --print-issued-lines --print-linter-name","command-migrate#Command \u003ccode\u003emigrate\u003c/code\u003e":"You can use golangci-lint to migrate your configuration with the migrate command:\ngolangci-lint migrate Be aware that comments inside a configuration file are not migrated. You need to add them manually after the migration.\nDeprecated options from v1 or unknown fields are not migrated.\nThe migration file format is based on the extension of the configuration file. The format can be overridden by using the --format flag:\ngolangci-lint migrate --format json Before the migration, the previous configuration file is copied and saved to a file named .bck..\nBy default, before the migration process, the configuration file is validated against the JSON Schema of configuration v1. If you want to skip this validation, you can use the --skip-validation flag:\ngolangci-lint migrate --skip-validation The migrate command enforces the following default values:\nrun.timeout: the existing value is ignored because, in v2, there is no timeout by default. issues.show-stats: the existing value is ignored because, in v2, stats are enabled by default. run.concurrency: if the existing value was 0, it is removed as 0 is the new default. run.relative-path-mode: if the existing value was cfg, it is removed as cfg is the new default. issues.exclude-generated has a new default value (v1 lax, v2 strict), so this field will be added during the migration to maintain the previous behavior.\nissues.exclude-dirs-use-default has been removed, so it is converted to linters.exclusions.paths and, if needed, formatters.exclusions.paths.\nOther fields explicitly defined in the configuration file are migrated even if the value is the same as the default value.\nThe migrate command automatically migrates linters.presets in individual linters to linters.enable.\n$ golangci-lint migrate -h Migrate configuration file from v1 to v2. Usage: golangci-lint migrate [flags] Flags: -c, --config PATH Read config from file path PATH --no-config Don't read config file --format string Output file format. By default, the format of the input configuration file is used. It can be 'yml', 'yaml', 'toml', or 'json'. --skip-validation Skip validation of the configuration file against the JSON Schema for v1. Global Flags: --color string Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\") -h, --help Help for a command -v, --verbose Verbose output","deprecated-linters#Deprecated Linters":"The following deprecated linters have been removed:\ndeadcode execinquery exhaustivestruct exportloopref golint ifshort interfacer maligned nosnakecase scopelint structcheck tenv varcheck","examples#Examples":"Run only the govet linter, output results to stdout in JSON format, and sort results:\nv1v2 golangci-lint run --disable-all --enable=govet --out-format=json --sort-order=linter --sort-results golangci-lint run --default=none --enable=govet --output.json.path=stdout Do not print issued lines, output results to stdout without colors in text format, and to gl-code-quality-report.json file in Code Climate’s format:\nv1v2 golangci-lint run --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number golangci-lint run --output.text.path=stdout --output.text.colors=false --output.text.print-issued-lines=false --output.code-climate.path=gl-code-quality-report.json","integration#Integration":"","issues#\u003ccode\u003eissues\u003c/code\u003e":"","issuesexclude#\u003ccode\u003eissues.exclude\u003c/code\u003e":"This property has been replaced with linters.exclusions.rules.\nv1v2 issues: exclude: - abcdef linters: exclusions: rules: - path: '(.+)\\.go$' text: abcdef","issuesexclude-case-sensitive#\u003ccode\u003eissues.exclude-case-sensitive\u003c/code\u003e":"This property has been removed.\nissues.exclude, issues.exclude-rules.text, and issues.exclude-rules.source are case-sensitive by default.\nTo ignore case, use (?i) at the beginning of a regex syntax.\nv1v2 issues: exclude-case-sensitive: false exclude: - 'abcdef' linters: exclusions: rules: - path: '(.+)\\.go$' text: (?i)abcdef","issuesexclude-dirs#\u003ccode\u003eissues.exclude-dirs\u003c/code\u003e":"This property has been replaced with linters.exclusions.paths and formatters.exclusions.paths.\nv1v2 issues: exclude-dirs: - src/external_libs - autogenerated_by_my_lib linters: exclusions: paths: - src/external_libs - autogenerated_by_my_lib","issuesexclude-dirs-use-default#\u003ccode\u003eissues.exclude-dirs-use-default\u003c/code\u003e":"This property has been removed.\nUse linters.exclusions.paths and formatters.exclusions.paths to exclude directories.\nv1v2 issues: exclude-dirs-use-default: true linters: exclusions: paths: - third_party$ - builtin$ - examples$","issuesexclude-files#\u003ccode\u003eissues.exclude-files\u003c/code\u003e":"This property has been replaced with linters.exclusions.paths and formatters.exclusions.paths.\nv1v2 issues: exclude-files: - '.*\\.my\\.go$' - lib/bad.go linters: exclusions: paths: - '.*\\.my\\.go$' - lib/bad.go","issuesexclude-generated#\u003ccode\u003eissues.exclude-generated\u003c/code\u003e":"This property has been replaced with linters.exclusions.generated.\nv1v2 linters: exclude-generated: lax linters: exclusions: generated: lax","issuesexclude-generated-strict#\u003ccode\u003eissues.exclude-generated-strict\u003c/code\u003e":"This property has been deprecated since v1.59.0 and has been replaced with linters.exclusions.generated: strict.\nv1v2 linters: exclude-generated-strict: true linters: exclusions: generated: strict","issuesexclude-rules#\u003ccode\u003eissues.exclude-rules\u003c/code\u003e":"This property has been replaced with linters.exclusions.rules.\nv1v2 issues: exclude-rules: - path: '_test\\.go' linters: - gocyclo - errcheck - dupl - gosec - path-except: '_test\\.go' linters: - staticcheck - path: internal/hmac/ text: \"weak cryptographic primitive\" linters: - gosec - linters: - staticcheck text: \"SA9003:\" - linters: - err113 source: \"foo\" linters: exclusions: rules: - path: '_test\\.go' linters: - dupl - errcheck - gocyclo - gosec - path-except: '_test\\.go' linters: - staticcheck - path: internal/hmac/ text: weak cryptographic primitive linters: - gosec - text: 'SA9003:' linters: - staticcheck - source: foo linters: - err113","issuesexclude-use-default#\u003ccode\u003eissues.exclude-use-default\u003c/code\u003e":"This property has been replaced with linters.exclusions.presets.\nv1v2 issues: exclude-use-default: true linters: exclusions: presets: - comments - common-false-positives - legacy - std-error-handling","issuesinclude#\u003ccode\u003eissues.include\u003c/code\u003e":"This property has been replaced with linters.exclusions.presets.\nv1v2 issues: include: - EXC0014 - EXC0015 linters: exclusions: presets: - common-false-positives - legacy - std-error-handling","linters#\u003ccode\u003elinters\u003c/code\u003e":"","linters-settings#\u003ccode\u003elinters-settings\u003c/code\u003e":"The linters-settings section has been split into linters.settings and formatters.settings.\nSettings for gci, gofmt, gofumpt, and goimports are moved to the formatters.settings section.\nv1v2 linters-settings: govet: enable-all: true gofmt: simplify: false linters: settings: govet: enable-all: true formatters: settings: gofmt: simplify: false","linters-settingsasasalintignore-test#\u003ccode\u003elinters-settings.asasalint.ignore-test\u003c/code\u003e":"This option has been removed.\nTo ignore test files, use linters.exclusions.rules.\nv1v2 linters-settings: asasalint: ignore-test: true linters: exclusions: rules: - path: '(.+)_test\\.go' linters: - asasalint","linters-settingscopyloopvarignore-alias#\u003ccode\u003elinters-settings.copyloopvar.ignore-alias\u003c/code\u003e":"This option has been deprecated since v1.58.0 and has been replaced with linters.settings.copyloopvar.check-alias.\nv1v2 linters-settings: copyloopvar: ignore-alias: false linters: settings: copyloopvar: check-alias: true","linters-settingscyclopskip-tests#\u003ccode\u003elinters-settings.cyclop.skip-tests\u003c/code\u003e":"This option has been removed.\nTo ignore test files, use linters.exclusions.rules.\nv1v2 linters-settings: cyclop: skip-test: true linters: exclusions: rules: - path: '(.+)_test\\.go' linters: - cyclop","linters-settingserrcheckexclude#\u003ccode\u003elinters-settings.errcheck.exclude\u003c/code\u003e":"This option has been deprecated since v1.42.0 and has been removed.\nTo exclude functions, use linters.settings.errcheck.exclude-functions instead.\nv1v2 linters-settings: errcheck: exclude: ./errcheck_excludes.txt linters: settings: errcheck: exclude-functions: - io.ReadFile - io.Copy(*bytes.Buffer) - io.Copy(os.Stdout)","linters-settingserrcheckignore#\u003ccode\u003elinters-settings.errcheck.ignore\u003c/code\u003e":"This option has been deprecated since v1.13.0 and has been removed.\nTo exclude functions, use linters.settings.errcheck.exclude-functions instead.\nv1v2 linters-settings: errcheck: ignore: 'io:.*' linters: settings: errcheck: exclude-functions: - 'io.ReadFile' - 'io.Copy(*bytes.Buffer)' - 'io.Copy(os.Stdout)'","linters-settingsexhaustivecheck-generated#\u003ccode\u003elinters-settings.exhaustive.check-generated\u003c/code\u003e":"This option has been removed.\nTo analyze generated files, use linters.exclusions.generated.\nv1v2 linters-settings: exhaustive: check-generated: true linters: exclusions: generated: disable","linters-settingsforbidigoforbidp#\u003ccode\u003elinters-settings.forbidigo.forbid[].p\u003c/code\u003e":"This field has been replaced with linters-settings.forbidigo.forbid[].pattern.\nv1v2 linters-settings: forbidigo: forbid: - p: '^fmt\\.Print.*$' msg: Do not commit print statements. linters: settings: forbidigo: forbid: - pattern: '^fmt\\.Print.*$' msg: Do not commit print statements.","linters-settingsforbidigoforbidpattern#\u003ccode\u003elinters-settings.forbidigo.forbid[]\u0026lt;pattern\u0026gt;\u003c/code\u003e":"The pattern has become mandatory for the forbid field.\nv1v2 linters-settings: forbidigo: forbid: - '^print(ln)?$' - '^spew\\.(ConfigState\\.)?Dump$' linters: settings: forbidigo: forbid: - pattern: '^print(ln)?$' - pattern: '^spew\\.(ConfigState\\.)?Dump$'","linters-settingsgcilocal-prefixes#\u003ccode\u003elinters-settings.gci.local-prefixes\u003c/code\u003e":"This option has been deprecated since v1.44.0 and has been removed.\nUse linters.settings.gci.sections instead.\nv1v2 linters-settings: gci: local-prefixes: 'github.com/example/pkg' linters: settings: gci: sections: - standard - default - prefix(github.com/example/pkg)","linters-settingsgciskip-generated#\u003ccode\u003elinters-settings.gci.skip-generated\u003c/code\u003e":"This option has been removed.\nTo analyze generated files, use linters.exclusions.generated.\nv1v2 linters: settings: gci: skip-generated: false linters: exclusions: generated: disable","linters-settingsgoconstignore-tests#\u003ccode\u003elinters-settings.goconst.ignore-tests\u003c/code\u003e":"This option has been removed.\nTo ignore test files, use linters.exclusions.rules.\nv1v2 linters-settings: goconst: ignore-tests: true linters: exclusions: rules: - path: '(.+)_test\\.go' linters: - goconst","linters-settingsgocriticsettingsruleguardrules#\u003ccode\u003elinters-settings.gocritic.settings.ruleguard.rules\u003c/code\u003e":"The special variable ${configDir} has been replaced with ${base-path}.\nv1v2 linters-settings: gocritic: settings: ruleguard: rules: '${configDir}/ruleguard/rules-*.go' linters: settings: gocritic: settings: ruleguard: rules: '${base-path}/ruleguard/rules-*.go'","linters-settingsgovetcheck-shadowing#\u003ccode\u003elinters-settings.govet.check-shadowing\u003c/code\u003e":"This option has been deprecated since v1.57.0 and has been removed.\nUse linters.settings.govet.enable: shadow instead.\nv1v2 linters-settings: govet: check-shadowing: true linters: settings: govet: enable: - shadow","linters-settingsmisspellignore-words#\u003ccode\u003elinters-settings.misspell.ignore-words\u003c/code\u003e":"This option has been replaced with linters.settings.misspell.ignore-rules.\nv1v2 linters-settings: misspell: ignore-words: - foo linters: settings: misspell: ignore-rules: - foo","linters-settingspredeclaredignore#\u003ccode\u003elinters-settings.predeclared.ignore\u003c/code\u003e":"This string option has been replaced with the slice option with the same name.\nv1v2 linters-settings: predeclared: ignore: \"new,int\" linters: settings: predeclared: ignore: - new - int","linters-settingspredeclaredq#\u003ccode\u003elinters-settings.predeclared.q\u003c/code\u003e":"This option has been replaced with linters.settings.predeclared.qualified-name.\nv1v2 linters-settings: predeclared: q: true linters: settings: predeclared: qualified-name: true","linters-settingsreviveignore-generated-header#\u003ccode\u003elinters-settings.revive.ignore-generated-header\u003c/code\u003e":"This option has been removed.\nUse linters.exclusions.generated instead.\nv1v2 linters-settings: revive: ignore-generated-header: true linters: exclusions: generated: strict","linters-settingssloglintcontext-only#\u003ccode\u003elinters-settings.sloglint.context-only\u003c/code\u003e":"This option has been deprecated since v1.58.0 and has been replaced with linters.settings.sloglint.context.\nv1v2 linters-settings: sloglint: context-only: true linters: settings: sloglint: context: all","linters-settingsstaticcheckgo#\u003ccode\u003elinters-settings.staticcheck.go\u003c/code\u003e":"This option has been deprecated since v1.47.0 and has been removed.\nUse run.go instead.\nv1v2 linters-settings: staticcheck: go: '1.22' run: go: '1.22'","linters-settingsunusedexported-is-used#\u003ccode\u003elinters-settings.unused.exported-is-used\u003c/code\u003e":"This option has been deprecated since v1.60.0 and has been removed.\nv1v2 linters-settings: unused: exported-is-used: true # Removed","linters-settingsusestdlibvarsos-dev-null#\u003ccode\u003elinters-settings.usestdlibvars.os-dev-null\u003c/code\u003e":"This option has been deprecated since v1.51.0 and has been removed.\nv1v2 linters-settings: usestdlibvars: os-dev-null: true # Removed","linters-settingsusestdlibvarssyslog-priority#\u003ccode\u003elinters-settings.usestdlibvars.syslog-priority\u003c/code\u003e":"This option has been deprecated since v1.51.0 and has been removed.\nv1v2 linters-settings: usestdlibvars: syslog-priority: true # Removed","linters-settingswrapcheckignoreinterfaceregexps#\u003ccode\u003elinters-settings.wrapcheck.ignoreInterfaceRegexps\u003c/code\u003e":"This option has been renamed to linters.settings.wrapcheck.ignore-interface-regexps.\nv1v2 linters-settings: wrapcheck: ignoreInterfaceRegexps: - '^(?i)c(?-i)ach(ing|e)' linters: settings: wrapcheck: ignore-interface-regexps: - '^(?i)c(?-i)ach(ing|e)'","linters-settingswrapcheckignorepackageglobs#\u003ccode\u003elinters-settings.wrapcheck.ignorePackageGlobs\u003c/code\u003e":"This option has been renamed to linters.settings.wrapcheck.ignore-package-globs.\nv1v2 linters-settings: wrapcheck: ignorePackageGlobs: - 'encoding/*' linters: settings: wrapcheck: ignore-package-globs: - 'encoding/*'","linters-settingswrapcheckignoresigregexps#\u003ccode\u003elinters-settings.wrapcheck.ignoreSigRegexps\u003c/code\u003e":"This option has been renamed to linters.settings.wrapcheck.ignore-sig-regexps.\nv1v2 linters-settings: wrapcheck: ignoreSigRegexps: - '\\.New.*Error\\(' linters: settings: wrapcheck: ignore-sig-regexps: - '\\.New.*Error\\('","linters-settingswrapcheckignoresigs#\u003ccode\u003elinters-settings.wrapcheck.ignoreSigs\u003c/code\u003e":"This option has been renamed to linters.settings.wrapcheck.ignore-sigs.\nv1v2 linters-settings: wrapcheck: ignoreSigs: - '.Errorf(' linters: settings: wrapcheck: ignore-sigs: - '.Errorf('","lintersdisable-all#\u003ccode\u003elinters.disable-all\u003c/code\u003e":"This property has been replaced with linters.default: none.\nv1v2 linters: disable-all: true linters: default: none","lintersenable-all#\u003ccode\u003elinters.enable-all\u003c/code\u003e":"This property has been replaced with linters.default: all.\nv1v2 linters: enable-all: true linters: default: all","lintersenableformatter_name#\u003ccode\u003elinters.enable[].\u0026lt;formatter_name\u0026gt;\u003c/code\u003e":"The linters gci, gofmt, gofumpt, and goimports have been moved to the formatters section.\nv1v2 linters: enable: - gci - gofmt - gofumpt - goimports formatters: enable: - gci - gofmt - gofumpt - goimports","lintersenablestylecheckgosimplestaticcheck#\u003ccode\u003elinters.enable[].{stylecheck,gosimple,staticcheck}\u003c/code\u003e":"The linters stylecheck, gosimple, and staticcheck has been merged inside the staticcheck.\nv1v2 linters: enable: - gosimple - staticcheck - stylecheck linters: enable: - staticcheck","lintersfast#\u003ccode\u003elinters.fast\u003c/code\u003e":"This property has been removed.\nThere are 2 new options (they are not strictly equivalent to the previous option):\nlinters.default: fast: set all “fast” linters as the default set of linters. linters: default: fast --fast-only: filters all enabled linters to keep only “fast” linters.","linterspresets#\u003ccode\u003elinters.presets\u003c/code\u003e":"This property has been removed.\nThe migrate command automatically migrates linters.presets in individual linters to linters.enable.\nv1v2 Presets:\nname linters bugs asasalint, asciicheck, bidichk, bodyclose, contextcheck, durationcheck, errcheck, errchkjson, errorlint, exhaustive, gocheckcompilerdirectives, gochecksumtype, gosec, gosmopolitan, govet, loggercheck, makezero, musttag, nilerr, nilnesserr, noctx, protogetter, reassign, recvcheck, rowserrcheck, spancheck, sqlclosecheck, staticcheck, testifylint, zerologlint comment dupword, godot, godox, misspell complexity cyclop, funlen, gocognit, gocyclo, maintidx, nestif error err113, errcheck, errorlint, wrapcheck format gci, gofmt, gofumpt, goimports import depguard, gci, goimports, gomodguard metalinter gocritic, govet, revive, staticcheck module depguard, gomoddirectives, gomodguard performance bodyclose, fatcontext, noctx, perfsprint, prealloc sql rowserrcheck, sqlclosecheck style asciicheck, canonicalheader, containedctx, copyloopvar, decorder, depguard, dogsled, dupl, err113, errname, exhaustruct, exptostd, forbidigo, forcetypeassert, ginkgolinter, gochecknoglobals, gochecknoinits, goconst, gocritic, godot, godox, goheader, gomoddirectives, gomodguard, goprintffuncname, gosimple, grouper, iface, importas, inamedparam, interfacebloat, intrange, ireturn, lll, loggercheck, makezero, mirror, misspell, mnd, musttag, nakedret, nilnil, nlreturn, nolintlint, nonamedreturns, nosprintfhostport, paralleltest, predeclared, promlinter, revive, sloglint, stylecheck, tagalign, tagliatelle, testpackage, tparallel, unconvert, usestdlibvars, varnamelen, wastedassign, whitespace, wrapcheck, wsl test exhaustruct, paralleltest, testableexamples, testifylint, testpackage, thelper, tparallel, usetesting unused ineffassign, unparam, unused # Removed","output#\u003ccode\u003eoutput\u003c/code\u003e":"","outputformat#\u003ccode\u003eoutput.format\u003c/code\u003e":"This property has been deprecated since v1.57.0 and has been replaced with output.formats.\nv1v2 output: format: 'checkstyle:report.xml,json:stdout,colored-line-number' output: formats: checkstyle: path: 'report.xml' json: path: stdout text: path: stdout color: true","outputformatsformat-colored-line-number#\u003ccode\u003eoutput.formats[].format: colored-line-number\u003c/code\u003e":"This format has been replaced by the format text with the option colors (true by default).\nv1v2 output: formats: - format: colored-line-number output: formats: text: path: stdout colors: true","outputformatsformat-colored-tab#\u003ccode\u003eoutput.formats[].format: colored-tab\u003c/code\u003e":"This format has been replaced by the format tab with the option colors (true by default).\nv1v2 output: formats: - format: colored-tab output: formats: tab: path: stdout colors: true","outputformatsformat-line-number#\u003ccode\u003eoutput.formats[].format: line-number\u003c/code\u003e":"This format has been replaced by the format text.\nv1v2 output: formats: - format: line-number output: formats: text: path: stdout","outputformatsformat-name#\u003ccode\u003eoutput.formats[].format: \u0026lt;name\u0026gt;\u003c/code\u003e":"The property output.formats[].format has been replaced with output.formats[]..\nv1v2 output: formats: - format: json path: stderr - format: checkstyle path: report.xml output: formats: json: path: stderr checkstyle: path: report.xml","outputprint-issued-lines#\u003ccode\u003eoutput.print-issued-lines\u003c/code\u003e":"This property has been removed.\nTo not print the lines with issues, use the text format with the option print-issued-lines: false.\nv1v2 output: formats: - format: line-number path: stdout print-issued-lines: false output: formats: text: path: stdout print-issued-lines: false","outputprint-linter-name#\u003ccode\u003eoutput.print-linter-name\u003c/code\u003e":"This property has been removed.\nTo not print the linter name, use the text format with the option print-linter-name: false.\nv1v2 output: formats: - format: line-number path: stdout print-linter-name: false output: formats: text: path: stdout print-linter-name: false","outputshow-stats#\u003ccode\u003eoutput.show-stats\u003c/code\u003e":"This property is true by default.","outputsort-order#\u003ccode\u003eoutput.sort-order\u003c/code\u003e":"This property has a new default value ['linter', 'file'] instead of ['file'].","outputsort-results#\u003ccode\u003eoutput.sort-results\u003c/code\u003e":"The property has been removed.\nThe output results are always sorted.","outputuniq-by-line#\u003ccode\u003eoutput.uniq-by-line\u003c/code\u003e":"This property has been deprecated since v1.63.0 and has been replaced by issues.uniq-by-line.\nv1v2 output: uniq-by-line: true issues: uniq-by-line: true","run#\u003ccode\u003erun\u003c/code\u003e":"","runconcurrency#\u003ccode\u003erun.concurrency\u003c/code\u003e":"This property value set to match Linux container CPU quota by default and fallback on the number of logical CPUs in the machine.","rungo#\u003ccode\u003erun.go\u003c/code\u003e":"The new fallback value for this property is 1.22 instead of 1.17.","runrelative-path-mode#\u003ccode\u003erun.relative-path-mode\u003c/code\u003e":"This property has a new default value of cfg instead of wd.\nv1v2 run: # When not specified, relative-path-mode is set to 'wd' by default run: relative-path-mode: 'cfg'","runshow-stats#\u003ccode\u003erun.show-stats\u003c/code\u003e":"This property has been deprecated since v1.57.0 and has been replaced by output.show-stats.\nv1v2 run: show-stats: true output: show-stats: true","runskip-dirs#\u003ccode\u003erun.skip-dirs\u003c/code\u003e":"This property has been deprecated since v1.57.0 and has been removed.\nUse linters.exclusions.paths and formatters.exclusions.paths to exclude directories.\nv1v2 run: skip-dirs: - src/external_libs - autogenerated_by_my_lib linters: exclusions: paths: - src/external_libs - autogenerated_by_my_lib","runskip-dirs-use-default#\u003ccode\u003erun.skip-dirs-use-default\u003c/code\u003e":"This property has been deprecated since v1.57.0 and has been replaced by issues.exclude-dirs-use-default.\nv1v2 run: skip-dirs-use-default: false issues: exclude-dirs-use-default: false","runskip-files#\u003ccode\u003erun.skip-files\u003c/code\u003e":"This property has been deprecated since v1.57.0 and has been removed.\nUse linters.exclusions.paths and formatters.exclusions.paths to exclude files.\nv1v2 run: skip-files: - '.*\\.my\\.go$' - lib/bad.go linters: exclusions: paths: - '.*\\.my\\.go$' - lib/bad.go","runtimeout#\u003ccode\u003erun.timeout\u003c/code\u003e":"This property value is disabled by default (0).","severity#\u003ccode\u003eseverity\u003c/code\u003e":"","severitydefault-severity#\u003ccode\u003eseverity.default-severity\u003c/code\u003e":"This property has been replaced with severity.default.\nv1v2 severity: default-severity: error severity: default: error","severityrulescase-sensitive#\u003ccode\u003eseverity.rules.case-sensitive\u003c/code\u003e":"severity.rules.text and severity.rules.source are case-sensitive by default.\nTo ignore case, use (?i) at the beginning of a regex syntax.\nv1v2 severity: case-sensitive: true rules: - severity: info linters: - foo text: 'Example.*' severity: rules: - severity: info linters: - foo text: '(?i)Example.*'","typecheck#\u003ccode\u003etypecheck\u003c/code\u003e":"This typecheck is not a linter, so it cannot be enabled or disabled:\nFAQ: Why do you have typecheck errors? FAQ: Why is it not possible to skip/ignore typecheck errors?","version#\u003ccode\u003eversion\u003c/code\u003e":"The version property has been added to the configuration file.\nversion: \"2\"","visual-studio-code#Visual Studio Code":"v1v2 \"go.lintTool\": \"golangci-lint\", \"go.lintFlags\": [ \"--fast\" ] \"go.lintTool\": \"golangci-lint\", \"go.lintFlags\": [ \"--fast-only\" ], \"go.formatTool\": \"custom\", \"go.alternateTools\": { \"customFormatter\": \"golangci-lint\" }, \"go.formatFlags\": [ \"fmt\", \"--stdin\" ]"},"title":"Migration guide"},"/docs/product/roadmap/":{"data":{"":"","-bugs#🐛 Bugs":"Please file an issue for bugs, missing documentation or unexpected behavior.\nSee Bugs","-feature-requests#💡 Feature Requests":"Please file an issue to suggest new features. Vote on feature requests by adding a 👍. This helps maintainers prioritize what to work on.\nSee Feature Requests","future-plans#Future Plans":"Upstream all changes of forked linters. Make it easy to write own linter/checker: it should take a minimum code, have perfect documentation, debugging and testing tooling. Speed up SSA loading: on-disk cache and existing code profiling-optimizing. Analyze (don’t only filter) only new code: analyze only changed files and dependencies, make incremental analysis, caches. Smart new issues detector: don’t print existing issues on changed lines. Minimize false-positives by fixing linters and improving testing tooling. Documentation for every issue type.","linter-deprecation-cycle#Linter Deprecation Cycle":"A linter can be deprecated for various reasons, e.g. the linter stops working with a newer version of Go or the author has abandoned its linter.\nThe deprecation of a linter will follow 3 phases:\nDisplay of a warning message: The linter can still be used (unless it’s completely non-functional), but it’s recommended to remove it from your configuration. Display of an error message: At this point, you should remove the linter. The original implementation is replaced by a placeholder that does nothing. The linter is NOT enabled when using default: all and should be removed from the disable option. Removal of the linter from golangci-lint. Each phase corresponds to a minor version:\nv1.0.0 -\u003e warning message v1.1.0 -\u003e error message v1.2.0 -\u003e linter removed We will provide clear information about those changes on different supports: changelog, logs, social network, etc.\nWe consider the removal of a linter as non-breaking changes for golangci-lint itself. No major version will be created when a linter is removed.","versioning-policy#Versioning Policy":"golangci-lint follows semantic versioning. However, due to the nature of golangci-lint as a code quality tool, it’s not always clear when a minor or major version bump occurs. To help clarify this for everyone, we’ve defined the following semantic versioning policy:\nPatch release (intended to not break your lint build) A patch version update in a specific linter that results in golangci-lint reporting fewer errors. A bug fix to the CLI or core (packages loading, runner, postprocessors, etc). Improvements to documentation. Non-user-facing changes such as refactoring code, adding, deleting, or modifying tests, and increasing test coverage. Re-releasing after a failed release (i.e., publishing a release that doesn’t work for anyone). Minor release (might break your lint build because of newly found issues) A major or minor version update of a specific linter that results in golangci-lint reporting more errors. A new linter is added. An existing configuration option or linter is deprecated. A new CLI command is created. Backward incompatible change of configuration. Major release (likely to break your lint build) Backward incompatible change of configuration with huge impact. According to our policy, any minor update may report more errors than the previous release (ex: from a bug fix). As such, we recommend using the fixed minor version and fixed or the latest patch version to guarantee the results of your builds.\nFor example, in our GitHub Action we require users to explicitly set the minor version of golangci-lint and we always use the latest patch version."},"title":"Roadmap"},"/docs/product/thanks/":{"data":{"":"","heading#❤️":"","special-thanks#Special thanks":"Thanks to alecthomas/gometalinter for inspiration and amazing work.\nThanks to bradleyfalzon/revgrep for cool diff tool.\nThe golangci-lint logo is inspired by the Go gopher designed by Renee French CC BY 3.0.","thanks-to-all-contributors#Thanks to all contributors":"","thanks-to-developers-and-authors-of-used-linters#Thanks to developers and authors of used linters":"4meepotagalign Abirdcflydupword AdminBenniiotamixing alecthomasgochecksumtype alexkohlerdogsled\nnakedret\nprealloc alingseasasalint\nnilnesserr AlwxSinnoinlineerr Antonboomerrname\nnilnil\ntestifylint ashanbrownforbidigo\nmakezero babakksgodoclint bkielbasacyclop blizzy78varnamelen bombsimonwsl\nwsl_v5 bosidecorder bremlbidichk\nerrchkjson butuzovireturn\nmirror catenacyberperfsprint charithedurationcheck chokoswitchreassign ckaznochaintrange client9misspell Crocmagnonarangolint\nfatcontext daixiang0gci denis-tingaikingoheader dixonwilledepguard Djarvurerr113 dominikhstaticcheck\nunused firefartnonamedreturns fzippgocyclo ghostiamprotogetter go-criticgocritic golanggofmt\ngoimports\nmodernize\ngovet gordonklausineffassign jgautherongoconst jingyugaorowserrcheck jjtispancheck julzimportas karamaru-alphacopyloopvar kisielkerrcheck kkHAIKEcontextcheck kultithelper kunwardeepparalleltest lasiarcanonicalheader ldezexptostd\ngomoddirectives\ntagliatelle\nusetesting leighmccullochgocheckcompilerdirectives\ngochecknoglobals leonklingelegrouper macabuinamedparam manuelarteembeddedstructfieldcheck\nfuncorder maratoritestableexamples\ntestpackage matoousgodox mdempskyunconvert mgechevrevive mibkdupl MirrexOneunqueryvet morichotparallel mvdangofumpt\nunparam nakabonnenestif nishanthsexhaustive\npredeclared nunnatsaginkgolinter polyfloyderrorlint raeperdrecvcheck ryancurrahgomodguard ryanroldssqlclosecheck sanposhihowastedassign sashamelentyevinterfacebloat\nusestdlibvars securegogosec segmentiogolines sivcharicontainedctx sonatardnoctx ssgregnlreturn stbenjamnosprintfhostport swaggoswaggo tenntennforcetypeassert\nnilerr tetafrogodot timakinbodyclose timonwongloggercheck tmzanemusttag\nsloglint tomarrellwrapcheck tommy-muehlemnd ultrawarefunlen\nwhitespace uudashrgocognit\niface xen0ngosmopolitan xobotyiexhaustruct yagipymaintidx yeya24promlinter ykadowakzerologlint"},"title":"Thanks"},"/docs/welcome/":{"data":{"":"This quickstart guide provides step-by-step instructions to help you install, configure, and begin using golangci-lint efficiently.\nLocal Installation CI Installation Integrations Quick Start: Linting Quick Start: Formatting FAQ"},"title":"Welcome"},"/docs/welcome/faq/":{"data":{"":"","golangci-lint-doesnt-work#golangci-lint doesn\u0026rsquo;t work":"Please ensure you are using the latest binary release. Run it with -v option and check the output. If it doesn’t help, create a GitHub issue with the output from the error and #2 above.","how-do-you-add-a-custom-linter#How do you add a custom linter?":"You can integrate it yourself, see this manual. Or you can create a GitHub Issue and we will integrate when time permits.","how-to-integrate-golangci-lint-into-a-large-project-with-thousands-of-issues#How to integrate golangci-lint into a large project with thousands of issues":"We are sure that every project can easily integrate golangci-lint, even the large one.\nThe idea is to not fix all existing issues. Fix only newly added issue: issues in new code.\nTo do this, set up the CI to run golangci-lint with options --new-from-merge-base=main or --new-from-rev=HEAD~1.\nAlso, take a look at option --new, but consider that CI scripts that generate unstaged files will make --new only point out issues in those files and not in the last commit. In that regard --new-from-merge-base=main or --new-from-rev=HEAD~1 are safer.\nBy doing this you won’t create new issues in your code and can choose fix existing issues (or not).","how-to-use-golangci-lint-in-ci#How to use golangci-lint in CI":"Run golangci-lint in CI and check the exit code. If it’s non-zero - fail the build.\nSee how to properly install golangci-lint in CI","which-go-versions-are-supported#Which Go versions are supported?":"The same as the Go team (the 2 latest minor versions).\nBasically, golangci-lint supports Go versions lower or equal to the Go version used to compile it.\nNew versions of Go are not automatically supported because, in addition of the Go version used to build it, some linters and/or internal pieces of golangci-lint could need to be adapted to support this new Go version.","why---new-from-xxx-dont-seem-to-be-working-in-some-cases#Why \u003ccode\u003e--new-from-xxx\u003c/code\u003e don\u0026rsquo;t seem to be working in some cases?":"The options --new-from-merge-base, --new-from-rev, and --new-from-patch work by comparing git diff output and issues.\nIf an issue is not reported as the same line as the changes then the issue will be skipped. This is the line of the issue is not inside the lines changed.\nTo fix that, you have to use the option --whole-files.\nThe side effect is the issues inside the file that contain changes but not directly related to the changes themselves will be reported.","why-do-you-have-typecheck-errors#Why do you have \u003ccode\u003etypecheck\u003c/code\u003e errors?":"typecheck is like a front-end for the Go compiler errors. Compilation errors are identified/labeled as reports of typecheck but they are not produced by a linter called typecheck.\ntypecheck is not a linter, it doesn’t perform any analysis, it’s just a way to identify, parse, and display compiling errors (produced by the types.Checker) and some linter errors.\nIt cannot be disabled because of that.\nOf course, this is just as good as the compiler itself, and a lot of compilation issues will not properly show where in the code your error lies.\nAs a consequence, the code to analyze should compile. It means that if you try to run an analysis on a single file or a group of files or a package or a group of packages, with dependencies on other files or packages of your project, as it doesn’t compile (because of the missing pieces of code), it also cannot be analyzed.\nIf there are typecheck errors, golangci-lint will not be able to produce other reports because that kind of error doesn’t allow it to perform any analysis.\nHow to troubleshoot:\nEnsure the version of golangci-lint is built with a compatible version of Go (golangci-lint version). Ensure dependencies are up to date with go mod tidy. Ensure building works with go run ./.../go build ./... - whole package. Ensure you are not running an analysis on code that depends on files/packages outside the scope of the analyzed elements. If using CGO, ensure all required system libraries are installed. If you are using private repositories/dependencies, ensure the Go proxy (GOPROXY) and checksum database (GOSUMDB) are right and/or your git configuration.","why-is-it-not-possible-to-skipignore-typecheck-errors#Why is it not possible to skip/ignore \u003ccode\u003etypecheck\u003c/code\u003e errors?":"For mainly the same reasons that you cannot compile when you have a compiler error.\ntypecheck errors are reported in the same style as linter reports/issues, but are completely different because they are related to problems that block the analysis (typecheck is not a linter).\nWhen there are typecheck errors, most linters are not able to perform the analysis, and they simply do not produce any reports, so it’s not possible to skip/ignore typecheck errors.","why-running-with---fast-only-can-be-slow-on-the-first-run#Why running with \u003ccode\u003e--fast-only\u003c/code\u003e can be slow on the first run?":"Because the first run caches type information. All subsequent runs will be faster. Usually this option is used during development on a local machine and compilation was already performed."},"title":"FAQ"},"/docs/welcome/install/":{"data":{"":"","binaries#Binaries":"# binary will be $(go env GOPATH)/bin/golangci-lint curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.6.0 golangci-lint --version On Windows, you can run the above commands with Git Bash, which comes with Git for Windows.","chocolatey#Chocolatey":"You can install a binary on Windows using chocolatey.\nchoco install golangci-lint","ci-installation#CI installation":"Most installations of golangci-lint are performed for CI.\nIt’s important to have reproducible CI: don’t start to fail all builds at the same time. With golangci-lint this can happen if you use option linters.default: all and a new linter is added or even without linters.default: all when one upstream linter is upgraded.\nImportant\nIt’s highly recommended installing a specific version of golangci-lint available on the releases page.","docker#Docker":"docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v2.6.0 golangci-lint run Colored output:\ndocker run -t --rm -v $(pwd):/app -w /app golangci/golangci-lint:v2.6.0 golangci-lint run Preserving caches between consecutive runs:\ndocker run --rm -t -v $(pwd):/app -w /app \\ --user $(id -u):$(id -g) \\ -v $(go env GOCACHE):/.cache/go-build -e GOCACHE=/.cache/go-build \\ -v $(go env GOMODCACHE):/.cache/mod -e GOMODCACHE=/.cache/mod \\ -v ~/.cache/golangci-lint:/.cache/golangci-lint -e GOLANGCI_LINT_CACHE=/.cache/golangci-lint \\ golangci/golangci-lint:v2.6.0 golangci-lint run","github-actions#GitHub Actions":"We recommend using our GitHub Action for running golangci-lint in CI for GitHub projects.\nIt’s fast and uses smart caching inside, and it can be much faster than the simple binary installation.\nAlso, the action creates GitHub annotations for found issues (you don’t need to dig into build log to see found by golangci-lint issues).","gitlab-ci#GitLab CI":"GitLab provides a guide for integrating golangci-lint into the Code Quality widget. A simple quickstart is their CI component, which can be used like this:\n.gitlab-ci.ymlinclude: - component: $CI_SERVER_FQDN/components/code-quality-oss/codequality-os-scanners-integration/golangci@1.0.1 Note that you can only reference components in the same GitLab instance as your project","homebrew#Homebrew":"Note: Homebrew can use an unexpected version of Go to build the binary, so we recommend either using our binaries or ensuring the version of Go used to build.\nYou can install a binary release on macOS using brew:\nbrew install golangci-lint brew upgrade golangci-lint Note: Previously, we used a Homebrew tap. We recommend using the official formula instead of the tap, but sometimes the most recent release isn’t immediately available via Homebrew core due to manual updates that need to occur from Homebrew core maintainers. In this case, the tap formula, which is updated automatically, can be used to install the latest version of golangci-lint:\nbrew tap golangci/tap brew install golangci/tap/golangci-lint","install-from-sources#Install from Sources":"Warning\nUsing go install/go get, “tools pattern”, and tool command/directives installations aren’t guaranteed to work.\nWe recommend using binary installation.\nThese installations aren’t recommended because of the following points:\nThese installations compile golangci-lint locally. The Go version used to build will depend on your local Go version. Some users use the -u flag for go get, which upgrades our dependencies. The resulting binary was not tested and is not guaranteed to work. When using the “tools pattern” or tool command/directives, the dependencies of a tool can modify the dependencies of another tool or your project. The resulting binary was not tested and is not guaranteed to work. We’ve encountered issues with Go module hashes due to the unexpected recreation of dependency tags. go.mod replacement directives don’t apply transitively. It means a user will be using a patched version of golangci-lint if we use such replacements. It allows installation from the main branch, which can’t be considered stable. It’s slower than binary installation. go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.6.0 go tool usage recommendations Warning\nWe don’t recommend using go tool.\nBut if you want to use go tool to install and run golangci-lint (once again we don’t recommend that), the best approach is to use a dedicated module or module file to isolate golangci-lint from other tools or dependencies.\nThis approach avoids modifying your project dependencies and the golangci-lint dependencies.\nCaution\nYou should never update golangci-lint dependencies manually.\nMethod 1: dedicated module file\n# Create a dedicated module file go mod init -modfile=golangci-lint.mod /golangci-lint # Example: go mod init -modfile=golangci-lint.mod github.com/org/repo/golangci-lint # Add golangci-lint as a tool go get -tool -modfile=golangci-lint.mod github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.6.0 # Run golangci-lint as a tool go tool -modfile=golangci-lint.mod golangci-lint run # Update golangci-lint go get -tool -modfile=golangci-lint.mod github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest Method 2: dedicated module\n# Create a dedicated directory mkdir golangci-lint # Create a dedicated module file go mod init -modfile=tools/go.mod /golangci-lint # Example: go mod init -modfile=golangci-lint/go.mod github.com/org/repo/golangci-lint # Setup a Go workspace go work init . golangci-lint # Add golangci-lint as a tool go get -tool -modfile=golangci-lint/go.mod github.com/golangci/golangci-lint/v2/cmd/golangci-lint # Run golangci-lint as a tool go tool golangci-lint run # Update golangci-lint go get -tool -modfile=golangci-lint/go.mod github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest","linux#Linux":"Golangci-lint is available inside the majority of the package managers.","local-installation#Local Installation":"","macos#macOS":"","macports#MacPorts":"It can also be installed through MacPorts The MacPorts installation mode is community-driven and not officially maintained by the golangci team.\nsudo port install golangci-lint","other-ci#Other CI":"Here is the other way to install golangci-lint:\n# binary will be $(go env GOPATH)/bin/golangci-lint curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.6.0 # or install it into ./bin/ curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s v2.6.0 # In Alpine Linux (as it does not come with curl by default) wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s v2.6.0 golangci-lint --version It is advised that you periodically update the version of golangci-lint as the project is under active development and is constantly being improved. For any problems with golangci-lint, check out recent GitHub issues and update if needed.","scoop#Scoop":"You can install a binary on Windows using scoop.\nscoop install main/golangci-lint The scoop package is not officially maintained by golangci team.","windows#Windows":""},"title":"Install"},"/docs/welcome/integrations/":{"data":{"":"","ci-integration#CI Integration":"Check out our documentation for CI integrations.","editor-integration#Editor Integration":"","gnu-emacs#GNU Emacs":"There are available plugins:\nSpacemacs Flycheck checker","goland#GoLand":"Starting from version 2025.1, GoLand has built-in support of golangci-lint. For IntelliJ IDEA with the Go plugin, please install the plugin.\nBoth v1 and v2 versions are supported.","lsp-server#LSP Server":"golangci-lint-langserver (NeoVim, Vim, Emacs, …)","shell-completion#Shell Completion":"Golangci-lint can generate Bash, fish, PowerShell, and Zsh completion files.\nSee the instructions on golangci-lint completion --help (replace with your favorite one).\nBash \u0026 macOS There are two versions of bash-completion, v1 and v2. V1 is for Bash 3.2 (which is the default on macOS), and v2 is for Bash 4.1+.\nThe golangci-lint completion script doesn’t work correctly with bash-completion v1 and Bash 3.2. It requires bash-completion v2 and Bash 4.1+.\nThus, to be able to correctly use golangci-lint completion on macOS, you have to install and use Bash 4.1+ (instructions).\nThe following instructions assume that you use Bash 4.1+ (that is, any Bash version of 4.1 or newer).\nInstall bash-completion v2:\nbrew install bash-completion@2 echo 'export BASH_COMPLETION_COMPAT_DIR=\"/usr/local/etc/bash_completion.d\"' \u003e\u003e~/.bashrc echo '[[ -r \"/usr/local/etc/profile.d/bash_completion.sh\" ]] \u0026\u0026 . \"/usr/local/etc/profile.d/bash_completion.sh\"' \u003e\u003e~/.bashrc exec bash # reload and replace (if it was updated) shell type _init_completion \u0026\u0026 echo \"completion is OK\" # verify that bash-completion v2 is correctly installed Add golangci-lint bash completion:\necho 'source \u003c(golangci-lint completion bash)' \u003e\u003e~/.bashrc source ~/.bashrc","sublime-text#Sublime Text":"There is a plugin for SublimeLinter.","vim#Vim":"The following plugins support golangci-lint:\nvim-go ALE","visual-studio-code#Visual Studio Code":"Install the extension.\nRecommended settings for those who installed golangci-lint manually \"go.lintTool\": \"golangci-lint\", \"go.lintFlags\": [ \"--path-mode=abs\", \"--fast-only\" ], \"go.formatTool\": \"custom\", \"go.alternateTools\": { \"customFormatter\": \"golangci-lint\" }, \"go.formatFlags\": [ \"fmt\", \"--stdin\" ] Using it in an editor without --fast-only can freeze your editor. Golangci-lint automatically discovers the .golangci.yml config for the edited file, so you don’t need to configure it in VS Code settings.\nRecommended settings for those who installed golangci-lint via extension Install golangci-lint-v2 via the Go: Install/Update Tools command after setting these configs. This will enable golangci-lint v1 to co-exist with v2. And use the following settings:\n\"go.lintTool\": \"golangci-lint-v2\", \"go.lintFlags\": [ \"--path-mode=abs\", \"--fast-only\" ], \"go.formatTool\": \"custom\", \"go.alternateTools\": { \"customFormatter\": \"golangci-lint-v2\" }, \"go.formatFlags\": [ \"fmt\", \"--stdin\" ] Using it in an editor without --fast-only can freeze your editor. Golangci-lint automatically discovers the .golangci.yml config for the edited file, so you don’t need to configure it in VS Code settings."},"title":"Integrations"},"/docs/welcome/quick-start/":{"data":{"":"","formatting#Formatting":"To format your code:\ngolangci-lint fmt You can choose which directories or files to analyze:\ngolangci-lint fmt dir1 dir2/... golangci-lint fmt file1.go More information about available formatters can be found in the formatters page.","linting#Linting":"To run golangci-lint:\ngolangci-lint run It’s an equivalent of:\ngolangci-lint run ./... You can choose which directories or files to analyze:\ngolangci-lint run dir1 dir2/... golangci-lint run file1.go Directories are NOT analyzed recursively. To analyze them recursively append /... to their path. It’s not possible to mix files and packages/directories, and files must come from the same package.\nGolangci-lint can be used with zero configuration. By default, the following linters are enabled:\n$ golangci-lint help linters Enabled by default linters: errcheck: Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases. govet: Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes. [auto-fix] ineffassign: Detects when assignments to existing variables are not used. [fast] staticcheck: It's the set of rules from staticcheck. [auto-fix] unused: Checks Go code for unused constants, variables, functions and types. Pass -E/--enable to enable linter and -D/--disable to disable:\ngolangci-lint run --default=none -E errcheck More information about available linters can be found in the linters page."},"title":"Quick Start"}}