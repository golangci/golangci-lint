{
  "formatters": "formatters:\n  # Enable specific formatter.\n  # Default: [] (uses standard Go formatting)\n  enable:\n    - gci\n    - gofmt\n    - gofumpt\n    - goimports\n    - golines\n    - swaggo\n  # Formatters settings.\n  settings:\n    # See the dedicated \"formatters.settings\" documentation section.\n    option: value\n  exclusions:\n    # Log a warning if an exclusion path is unused.\n    # Default: false\n    warn-unused: true\n    # Mode of the generated files analysis.\n    #\n    # - `strict`: sources are excluded by strictly following the Go generated file convention.\n    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\\.$`\n    #    This line must appear before the first non-comment, non-blank text in the file.\n    #    https://go.dev/s/generatedcode\n    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.\n    # - `disable`: disable the generated files exclusion.\n    #\n    # Default: lax\n    generated: strict\n    # Which file paths to exclude.\n    # This option is ignored when using `--stdin` as the path is unknown.\n    # Default: []\n    paths:\n      - \".*\\\\.my\\\\.go$\"\n      - lib/bad.go\n",
  "issues": "issues:\n  # Maximum issues count per one linter.\n  # Set to 0 to disable.\n  # Default: 50\n  max-issues-per-linter: 0\n  # Maximum count of issues with the same text.\n  # Set to 0 to disable.\n  # Default: 3\n  max-same-issues: 0\n  # Make issues output unique by line.\n  # Default: true\n  uniq-by-line: false\n  # Show only new issues: if there are unstaged changes or untracked files,\n  # only those changes are analyzed, else only changes in HEAD~ are analyzed.\n  # It's a super-useful option for integration of golangci-lint into existing large codebase.\n  # It's not practical to fix all existing issues at the moment of integration:\n  # much better don't allow issues in new code.\n  #\n  # Default: false\n  new: true\n  # Show only new issues created after the best common ancestor (merge-base against HEAD).\n  # Default: \"\"\n  new-from-merge-base: main\n  # Show only new issues created after git revision `REV`.\n  # Default: \"\"\n  new-from-rev: HEAD\n  # Show only new issues created in git patch with set file path.\n  # Default: \"\"\n  new-from-patch: path/to/patch/file\n  # Show issues in any part of update files (requires new-from-rev or new-from-patch).\n  # Default: false\n  whole-files: true\n  # Fix found issues (if it's supported by the linter).\n  # Default: false\n  fix: true\n",
  "linters": "linters:\n  # Default set of linters.\n  # The value can be:\n  # - `standard`: https://golangci-lint.run/docs/linters/#enabled-by-default\n  # - `all`: enables all linters by default.\n  # - `none`: disables all linters by default.\n  # - `fast`: enables only linters considered as \"fast\" (`golangci-lint help linters --json | jq '[ .[] | select(.fast==true) ] | map(.name)'`).\n  # Default: standard\n  default: all\n  # Enable specific linter.\n  enable:\n    - arangolint\n    - asasalint\n    - asciicheck\n    - bidichk\n    - bodyclose\n    - canonicalheader\n    - containedctx\n    - contextcheck\n    - copyloopvar\n    - cyclop\n    - decorder\n    - depguard\n    - dogsled\n    - dupl\n    - dupword\n    - durationcheck\n    - embeddedstructfieldcheck\n    - err113\n    - errcheck\n    - errchkjson\n    - errname\n    - errorlint\n    - exhaustive\n    - exhaustruct\n    - exptostd\n    - fatcontext\n    - forbidigo\n    - forcetypeassert\n    - funcorder\n    - funlen\n    - ginkgolinter\n    - gocheckcompilerdirectives\n    - gochecknoglobals\n    - gochecknoinits\n    - gochecksumtype\n    - gocognit\n    - goconst\n    - gocritic\n    - gocyclo\n    - godot\n    - godox\n    - goheader\n    - gomoddirectives\n    - gomodguard\n    - goprintffuncname\n    - gosec\n    - gosmopolitan\n    - govet\n    - grouper\n    - iface\n    - importas\n    - inamedparam\n    - ineffassign\n    - interfacebloat\n    - intrange\n    - ireturn\n    - lll\n    - loggercheck\n    - maintidx\n    - makezero\n    - mirror\n    - misspell\n    - mnd\n    - musttag\n    - nakedret\n    - nestif\n    - nilerr\n    - nilnesserr\n    - nilnil\n    - nlreturn\n    - noctx\n    - noinlineerr\n    - nolintlint\n    - nonamedreturns\n    - nosprintfhostport\n    - paralleltest\n    - perfsprint\n    - prealloc\n    - predeclared\n    - promlinter\n    - protogetter\n    - reassign\n    - recvcheck\n    - revive\n    - rowserrcheck\n    - sloglint\n    - spancheck\n    - sqlclosecheck\n    - staticcheck\n    - tagalign\n    - tagliatelle\n    - testableexamples\n    - testifylint\n    - testpackage\n    - thelper\n    - tparallel\n    - unconvert\n    - unparam\n    - unused\n    - usestdlibvars\n    - usetesting\n    - varnamelen\n    - wastedassign\n    - whitespace\n    - wrapcheck\n    - wsl\n    - wsl_v5\n    - zerologlint\n  # Disable specific linters.\n  disable:\n    - arangolint\n    - asasalint\n    - asciicheck\n    - bidichk\n    - bodyclose\n    - canonicalheader\n    - containedctx\n    - contextcheck\n    - copyloopvar\n    - cyclop\n    - decorder\n    - depguard\n    - dogsled\n    - dupl\n    - dupword\n    - durationcheck\n    - embeddedstructfieldcheck\n    - err113\n    - errcheck\n    - errchkjson\n    - errname\n    - errorlint\n    - exhaustive\n    - exhaustruct\n    - exptostd\n    - fatcontext\n    - forbidigo\n    - forcetypeassert\n    - funcorder\n    - funlen\n    - ginkgolinter\n    - gocheckcompilerdirectives\n    - gochecknoglobals\n    - gochecknoinits\n    - gochecksumtype\n    - gocognit\n    - goconst\n    - gocritic\n    - gocyclo\n    - godot\n    - godox\n    - goheader\n    - gomoddirectives\n    - gomodguard\n    - goprintffuncname\n    - gosec\n    - gosmopolitan\n    - govet\n    - grouper\n    - iface\n    - importas\n    - inamedparam\n    - ineffassign\n    - interfacebloat\n    - intrange\n    - ireturn\n    - lll\n    - loggercheck\n    - maintidx\n    - makezero\n    - mirror\n    - misspell\n    - mnd\n    - musttag\n    - nakedret\n    - nestif\n    - nilerr\n    - nilnesserr\n    - nilnil\n    - nlreturn\n    - noctx\n    - noinlineerr\n    - nolintlint\n    - nonamedreturns\n    - nosprintfhostport\n    - paralleltest\n    - perfsprint\n    - prealloc\n    - predeclared\n    - promlinter\n    - protogetter\n    - reassign\n    - recvcheck\n    - revive\n    - rowserrcheck\n    - sloglint\n    - spancheck\n    - sqlclosecheck\n    - staticcheck\n    - tagalign\n    - tagliatelle\n    - testableexamples\n    - testifylint\n    - testpackage\n    - thelper\n    - tparallel\n    - unconvert\n    - unparam\n    - unused\n    - usestdlibvars\n    - usetesting\n    - varnamelen\n    - wastedassign\n    - whitespace\n    - wrapcheck\n    - wsl\n    - wsl_v5\n    - zerologlint\n  # All available settings of specific linters.\n  settings:\n    # See the dedicated \"linters.settings\" documentation section.\n    option: value\n  # Defines a set of rules to ignore issues.\n  # It does not skip the analysis, and so does not ignore \"typecheck\" errors.\n  exclusions:\n    # Mode of the generated files analysis.\n    #\n    # - `strict`: sources are excluded by strictly following the Go generated file convention.\n    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\\.$`\n    #    This line must appear before the first non-comment, non-blank text in the file.\n    #    https://go.dev/s/generatedcode\n    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.\n    # - `disable`: disable the generated files exclusion.\n    #\n    # Default: strict\n    generated: lax\n    # Log a warning if an exclusion rule is unused.\n    # Default: false\n    warn-unused: true\n    # Predefined exclusion rules.\n    # Default: []\n    presets:\n      - comments\n      - std-error-handling\n      - common-false-positives\n      - legacy\n    # Excluding configuration per-path, per-linter, per-text and per-source.\n    rules:\n      # Exclude some linters from running on tests files.\n      - path: _test\\.go\n        linters:\n          - gocyclo\n          - errcheck\n          - dupl\n          - gosec\n      # Run some linter only for test files by excluding its issues for everything else.\n      - path-except: _test\\.go\n        linters:\n          - forbidigo\n      # Exclude known linters from partially hard-vendored code,\n      # which is impossible to exclude via `nolint` comments.\n      # `/` will be replaced by the current OS file path separator to properly work on Windows.\n      - path: internal/hmac/\n        text: \"weak cryptographic primitive\"\n        linters:\n          - gosec\n      # Exclude some `staticcheck` messages.\n      - linters:\n          - staticcheck\n        text: \"SA9003:\"\n      # Exclude `lll` issues for long lines with `go:generate`.\n      - linters:\n          - lll\n        source: \"^//go:generate \"\n    # Which file paths to exclude: they will be analyzed, but issues from them won't be reported.\n    # \"/\" will be replaced by the current OS file path separator to properly work on Windows.\n    # Default: []\n    paths:\n      - \".*\\\\.my\\\\.go$\"\n      - lib/bad.go\n    # Which file paths to not exclude.\n    # Default: []\n    paths-except:\n      - \".*\\\\.my\\\\.go$\"\n      - lib/bad.go\n",
  "output": "# Output configuration options.\noutput:\n  # The formats used to render issues.\n  formats:\n    # Prints issues in a text format with colors, line number, and linter name.\n    # This format is the default format.\n    text:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.txt\n      # Print linter name in the end of issue text.\n      # Default: true\n      print-linter-name: false\n      # Print lines of code with issue.\n      # Default: true\n      print-issued-lines: false\n      # Use colors.\n      # Default: true\n      colors: false\n    # Prints issues in a JSON representation.\n    json:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.json\n    # Prints issues in columns representation separated by tabulations.\n    tab:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.txt\n      # Print linter name in the end of issue text.\n      # Default: true\n      print-linter-name: true\n      # Use colors.\n      # Default: true\n      colors: false\n    # Prints issues in an HTML page.\n    # It uses the Cloudflare CDN (cdnjs) and React.\n    html:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.html\n    # Prints issues in the Checkstyle format.\n    checkstyle:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.xml\n    # Prints issues in the Code Climate format.\n    code-climate:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.json\n    # Prints issues in the JUnit XML format.\n    junit-xml:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.xml\n      # Support extra JUnit XML fields.\n      # Default: false\n      extended: true\n    # Prints issues in the TeamCity format.\n    teamcity:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.txt\n    # Prints issues in the SARIF format.\n    sarif:\n      # Output path can be either `stdout`, `stderr` or path to the file to write to.\n      # Default: stdout\n      path: ./path/to/output.json\n  # Add a prefix to the output file references.\n  # This option is ignored when using `output.path-mode: abs` mode.\n  # Default: \"\"\n  path-prefix: \"\"\n  # By default, the report are related to the path obtained by `run.relative-path-mode`.\n  # The mode `abs` allows to show absolute file paths instead of relative file paths.\n  # The option `output.path-prefix` is ignored when using `abs` mode.\n  # Default: \"\"\n  path-mode: \"abs\"\n  # Order to use when sorting results.\n  # Possible values: `file`, `linter`, and `severity`.\n  #\n  # If the severity values are inside the following list, they are ordered in this order:\n  #   1. error\n  #   2. warning\n  #   3. high\n  #   4. medium\n  #   5. low\n  # Either they are sorted alphabetically.\n  #\n  # Default: [\"linter\", \"file\"]\n  sort-order:\n    - linter\n    - severity\n    - file # filepath, line, and column.\n  # Show statistics per linter.\n  # Default: true\n  show-stats: false\n",
  "root": "# See the dedicated \"version\" documentation section.\nversion: \"2\"\nlinters:\n  # See the dedicated \"linters\" documentation section.\n  option: value\nformatters:\n  # See the dedicated \"formatters\" documentation section.\n  option: value\nissues:\n  # See the dedicated \"issues\" documentation section.\n  option: value\n# Output configuration options.\noutput:\n  # See the dedicated \"output\" documentation section.\n  option: value\n# Options for analysis running.\nrun:\n  # See the dedicated \"run\" documentation section.\n  option: value\nseverity:\n  # See the dedicated \"severity\" documentation section.\n  option: value\n",
  "run": "# Options for analysis running.\nrun:\n  # Timeout for total work, e.g. 30s, 5m, 5m30s.\n  # If the value is lower or equal to 0, the timeout is disabled.\n  # Default: 0 (disabled)\n  timeout: 5m\n  # The mode used to evaluate relative paths.\n  # It's used by exclusions, Go plugins, and some linters.\n  # The value can be:\n  # - `gomod`: the paths will be relative to the directory of the `go.mod` file.\n  # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`).\n  # - `cfg`: the paths will be relative to the configuration file.\n  # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run.\n  # Default: cfg\n  relative-path-mode: gomod\n  # Exit code when at least one issue was found.\n  # Default: 1\n  issues-exit-code: 2\n  # Include test files or not.\n  # Default: true\n  tests: false\n  # List of build tags, all linters use it.\n  # Default: []\n  build-tags:\n    - mytag\n  # If set, we pass it to \"go list -mod={option}\". From \"go help modules\":\n  # If invoked with -mod=readonly, the go command is disallowed from the implicit\n  # automatic updating of go.mod described above. Instead, it fails when any changes\n  # to go.mod are needed. This setting is most useful to check that go.mod does\n  # not need updates, such as in a continuous integration and testing system.\n  # If invoked with -mod=vendor, the go command assumes that the vendor\n  # directory holds the correct copies of dependencies and ignores\n  # the dependency descriptions in go.mod.\n  #\n  # Allowed values: readonly|vendor|mod\n  # Default: \"\"\n  modules-download-mode: readonly\n  # Allow multiple parallel golangci-lint instances running.\n  # If false, golangci-lint acquires file lock on start.\n  # Default: false\n  allow-parallel-runners: true\n  # Allow multiple golangci-lint instances running, but serialize them around a lock.\n  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.\n  # Default: false\n  allow-serial-runners: true\n  # Define the Go version limit.\n  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.22.\n  go: '1.23'\n  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.\n  # Default: 0 (automatically set to match Linux container CPU quota and\n  # fall back to the number of logical CPUs in the machine)\n  concurrency: 4\n",
  "severity": "severity:\n  # Set the default severity for issues.\n  #\n  # If severity rules are defined and the issues do not match or no severity is provided to the rule\n  # this will be the default severity applied.\n  # Severities should match the supported severity names of the selected out format.\n  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity\n  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel\n  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message\n  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance\n  #\n  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)\n  #\n  # Default: \"\"\n  default: error\n  # When a list of severity rules are provided, severity information will be added to lint issues.\n  # Severity rules have the same filtering capability as exclude rules\n  # except you are allowed to specify one matcher per severity rule.\n  #\n  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)\n  #\n  # Only affects out formats that support setting severity information.\n  #\n  # Default: []\n  rules:\n    - linters:\n        - dupl\n      severity: info\n",
  "version": "# Defines the configuration version.\n# The only possible value is \"2\".\nversion: \"2\"\n"
}
