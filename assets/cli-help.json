{
  "enable": "Enabled by default linters:\nerrcheck: Errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases.\ngovet: Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes. [auto-fix]\nineffassign: Detects when assignments to existing variables are not used. [fast]\nstaticcheck: It's the set of rules from staticcheck. [auto-fix]\nunused: Checks Go code for unused constants, variables, functions and types.",
  "help": "Usage:\n  golangci-lint run [flags]\n\nFlags:\n  -c, --config PATH                       Read config from file path PATH\n      --no-config                         Don't read config file\n      --default string                    Default set of linters to enable (default \"standard\")\n  -D, --disable strings                   Disable specific linter\n  -E, --enable strings                    Enable specific linter\n      --enable-only strings               Override linters configuration section to only run the specific linter(s)\n      --fast-only                         Filter enabled linters to run only fast linters\n  -j, --concurrency int                   Number of CPUs to use (Default: Automatically set to match Linux container CPU quota and fall back to the number of logical CPUs in the machine)\n      --modules-download-mode string      Modules download mode. If not empty, passed as -mod=\u003cmode\u003e to go tools\n      --issues-exit-code int              Exit code when issues were found (default 1)\n      --build-tags strings                Build tags\n      --timeout duration                  Timeout for total work. Disabled by default\n      --tests                             Analyze tests (*_test.go) (default true)\n      --allow-parallel-runners            Allow multiple parallel golangci-lint instances running.\n                                          If false (default) - golangci-lint acquires file lock on start.\n      --allow-serial-runners              Allow multiple golangci-lint instances running, but serialize them around a lock.\n                                          If false (default) - golangci-lint exits with an error if it fails to acquire file lock on start.\n      --path-prefix string                Path prefix to add to output\n      --path-mode string                  Path mode to use (empty, or 'abs')\n      --show-stats                        Show statistics per linter (default true)\n      --output.text.path stdout           Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.text.print-linter-name     Print linter name in the end of issue text. (default true)\n      --output.text.print-issued-lines    Print lines of code with issue. (default true)\n      --output.text.colors                Use colors. (default true)\n      --output.json.path stdout           Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.tab.path stdout            Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.tab.print-linter-name      Print linter name in the end of issue text. (default true)\n      --output.tab.colors                 Use colors. (default true)\n      --output.html.path stdout           Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.checkstyle.path stdout     Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.code-climate.path stdout   Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.junit-xml.path stdout      Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.junit-xml.extended         Support extra JUnit XML fields.\n      --output.teamcity.path stdout       Output path can be either stdout, `stderr` or path to the file to write to.\n      --output.sarif.path stdout          Output path can be either stdout, `stderr` or path to the file to write to.\n      --max-issues-per-linter int         Maximum issues count per one linter. Set to 0 to disable (default 50)\n      --max-same-issues int               Maximum count of issues with the same text. Set to 0 to disable (default 3)\n      --uniq-by-line                      Make issues output unique by line (default true)\n  -n, --new                               Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.\n                                          It's a super-useful option for integration of golangci-lint into existing large codebase.\n                                          It's not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.\n                                          For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.\n      --new-from-rev REV                  Show only new issues created after git revision REV\n      --new-from-patch PATH               Show only new issues created in git patch with file path PATH\n      --new-from-merge-base string        Show only new issues created after the best common ancestor (merge-base against HEAD)\n      --whole-files                       Show issues in any part of update files (requires new-from-rev or new-from-patch)\n      --fix                               Fix found issues (if it's supported by the linter)\n      --cpu-profile-path string           Path to CPU profile output file\n      --mem-profile-path string           Path to memory profile output file\n      --print-resources-usage             Print avg and max memory usage of golangci-lint and total time\n      --trace-path string                 Path to trace output file\n\nGlobal Flags:\n      --color string   Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\")\n  -h, --help           Help for a command\n  -v, --verbose        Verbose output\n",
  "fmtHelp": "Usage:\n  golangci-lint fmt [flags]\n\nFlags:\n  -c, --config PATH      Read config from file path PATH\n      --no-config        Don't read config file\n  -E, --enable strings   Enable specific formatter\n  -d, --diff             Display diffs instead of rewriting files\n      --diff-colored     Display diffs instead of rewriting files (with colors)\n      --stdin            Use standard input for piping source files\n\nGlobal Flags:\n      --color string   Use color when printing; can be 'always', 'auto', or 'never' (default \"auto\")\n  -h, --help           Help for a command\n  -v, --verbose        Verbose output\n"
}
